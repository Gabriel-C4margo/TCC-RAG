"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain";
exports.ids = ["vendor-chunks/@langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/ansi-styles/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nconst ANSI_BACKGROUND_OFFSET = 10;\nconst wrapAnsi256 = (offset = 0)=>(code)=>`\\u001B[${38 + offset};5;${code}m`;\nconst wrapAnsi16m = (offset = 0)=>(red, green, blue)=>`\\u001B[${38 + offset};2;${red};${green};${blue}m`;\nfunction assembleStyles() {\n    const codes = new Map();\n    const styles = {\n        modifier: {\n            reset: [\n                0,\n                0\n            ],\n            // 21 isn't widely supported and 22 does the same thing\n            bold: [\n                1,\n                22\n            ],\n            dim: [\n                2,\n                22\n            ],\n            italic: [\n                3,\n                23\n            ],\n            underline: [\n                4,\n                24\n            ],\n            overline: [\n                53,\n                55\n            ],\n            inverse: [\n                7,\n                27\n            ],\n            hidden: [\n                8,\n                28\n            ],\n            strikethrough: [\n                9,\n                29\n            ]\n        },\n        color: {\n            black: [\n                30,\n                39\n            ],\n            red: [\n                31,\n                39\n            ],\n            green: [\n                32,\n                39\n            ],\n            yellow: [\n                33,\n                39\n            ],\n            blue: [\n                34,\n                39\n            ],\n            magenta: [\n                35,\n                39\n            ],\n            cyan: [\n                36,\n                39\n            ],\n            white: [\n                37,\n                39\n            ],\n            // Bright color\n            blackBright: [\n                90,\n                39\n            ],\n            redBright: [\n                91,\n                39\n            ],\n            greenBright: [\n                92,\n                39\n            ],\n            yellowBright: [\n                93,\n                39\n            ],\n            blueBright: [\n                94,\n                39\n            ],\n            magentaBright: [\n                95,\n                39\n            ],\n            cyanBright: [\n                96,\n                39\n            ],\n            whiteBright: [\n                97,\n                39\n            ]\n        },\n        bgColor: {\n            bgBlack: [\n                40,\n                49\n            ],\n            bgRed: [\n                41,\n                49\n            ],\n            bgGreen: [\n                42,\n                49\n            ],\n            bgYellow: [\n                43,\n                49\n            ],\n            bgBlue: [\n                44,\n                49\n            ],\n            bgMagenta: [\n                45,\n                49\n            ],\n            bgCyan: [\n                46,\n                49\n            ],\n            bgWhite: [\n                47,\n                49\n            ],\n            // Bright color\n            bgBlackBright: [\n                100,\n                49\n            ],\n            bgRedBright: [\n                101,\n                49\n            ],\n            bgGreenBright: [\n                102,\n                49\n            ],\n            bgYellowBright: [\n                103,\n                49\n            ],\n            bgBlueBright: [\n                104,\n                49\n            ],\n            bgMagentaBright: [\n                105,\n                49\n            ],\n            bgCyanBright: [\n                106,\n                49\n            ],\n            bgWhiteBright: [\n                107,\n                49\n            ]\n        }\n    };\n    // Alias bright black as gray (and grey)\n    styles.color.gray = styles.color.blackBright;\n    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n    styles.color.grey = styles.color.blackBright;\n    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n    for (const [groupName, group] of Object.entries(styles)){\n        for (const [styleName, style] of Object.entries(group)){\n            styles[styleName] = {\n                open: `\\u001B[${style[0]}m`,\n                close: `\\u001B[${style[1]}m`\n            };\n            group[styleName] = styles[styleName];\n            codes.set(style[0], style[1]);\n        }\n        Object.defineProperty(styles, groupName, {\n            value: group,\n            enumerable: false\n        });\n    }\n    Object.defineProperty(styles, \"codes\", {\n        value: codes,\n        enumerable: false\n    });\n    styles.color.close = \"\\x1b[39m\";\n    styles.bgColor.close = \"\\x1b[49m\";\n    styles.color.ansi256 = wrapAnsi256();\n    styles.color.ansi16m = wrapAnsi16m();\n    styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n    styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n    // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n    Object.defineProperties(styles, {\n        rgbToAnsi256: {\n            value: (red, green, blue)=>{\n                // We use the extended greyscale palette here, with the exception of\n                // black and white. normal palette only has 4 greyscale shades.\n                if (red === green && green === blue) {\n                    if (red < 8) {\n                        return 16;\n                    }\n                    if (red > 248) {\n                        return 231;\n                    }\n                    return Math.round((red - 8) / 247 * 24) + 232;\n                }\n                return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);\n            },\n            enumerable: false\n        },\n        hexToRgb: {\n            value: (hex)=>{\n                const matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n                if (!matches) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                let { colorString } = matches.groups;\n                if (colorString.length === 3) {\n                    colorString = colorString.split(\"\").map((character)=>character + character).join(\"\");\n                }\n                const integer = Number.parseInt(colorString, 16);\n                return [\n                    integer >> 16 & 0xFF,\n                    integer >> 8 & 0xFF,\n                    integer & 0xFF\n                ];\n            },\n            enumerable: false\n        },\n        hexToAnsi256: {\n            value: (hex)=>styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n            enumerable: false\n        }\n    });\n    return styles;\n}\n// Make the export immutable\nObject.defineProperty(module, \"exports\", {\n    enumerable: true,\n    get: assembleStyles\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/caches/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/caches/base.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCache: () => (/* binding */ BaseCache),\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache),\n/* harmony export */   deserializeStoredGeneration: () => (/* binding */ deserializeStoredGeneration),\n/* harmony export */   getCacheKey: () => (/* binding */ getCacheKey),\n/* harmony export */   serializeGeneration: () => (/* binding */ serializeGeneration)\n/* harmony export */ });\n/* harmony import */ var _utils_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n\n\n/**\n * This cache key should be consistent across all versions of LangChain.\n * It is currently NOT consistent across versions of LangChain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * separate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of LangChain.\n *\n * @deprecated Use `makeDefaultKeyEncoder()` to create a custom key encoder.\n * This function will be removed in a future version.\n */ const getCacheKey = (...strings)=>(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)(strings.join(\"_\"));\nfunction deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_1__.mapStoredMessageToChatMessage)(storedGeneration.message)\n        };\n    } else {\n        return {\n            text: storedGeneration.text\n        };\n    }\n}\nfunction serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */ class BaseCache {\n    constructor(){\n        // For backwards compatibility, we use a default key encoder\n        // that uses SHA-1 to hash the prompt and LLM key. This will also print a warning\n        // about the security implications of using SHA-1 as a cache key.\n        Object.defineProperty(this, \"keyEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getCacheKey\n        });\n    }\n    /**\n     * Sets a custom key encoder function for the cache.\n     * This function should take a prompt and an LLM key and return a string\n     * that will be used as the cache key.\n     * @param keyEncoderFn The custom key encoder function.\n     */ makeDefaultKeyEncoder(keyEncoderFn) {\n        this.keyEncoder = keyEncoderFn;\n    }\n}\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */ class InMemoryCache extends BaseCache {\n    constructor(map){\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */ lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(this.keyEncoder(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */ async update(prompt, llmKey, value) {\n        this.cache.set(this.keyEncoder(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */ static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFnRDtBQUNxQjtBQUNyRTs7Ozs7Ozs7Ozs7O0NBWUMsR0FDTSxNQUFNRSxjQUFjLENBQUMsR0FBR0MsVUFBWUgsNERBQVlBLENBQUNHLFFBQVFDLElBQUksQ0FBQyxNQUFNO0FBQ3BFLFNBQVNDLDRCQUE0QkMsZ0JBQWdCO0lBQ3hELElBQUlBLGlCQUFpQkMsT0FBTyxLQUFLQyxXQUFXO1FBQ3hDLE9BQU87WUFDSEMsTUFBTUgsaUJBQWlCRyxJQUFJO1lBQzNCRixTQUFTTixpRkFBNkJBLENBQUNLLGlCQUFpQkMsT0FBTztRQUNuRTtJQUNKLE9BQ0s7UUFDRCxPQUFPO1lBQUVFLE1BQU1ILGlCQUFpQkcsSUFBSTtRQUFDO0lBQ3pDO0FBQ0o7QUFDTyxTQUFTQyxvQkFBb0JDLFVBQVU7SUFDMUMsTUFBTUMsa0JBQWtCO1FBQ3BCSCxNQUFNRSxXQUFXRixJQUFJO0lBQ3pCO0lBQ0EsSUFBSUUsV0FBV0osT0FBTyxLQUFLQyxXQUFXO1FBQ2xDSSxnQkFBZ0JMLE9BQU8sR0FBR0ksV0FBV0osT0FBTyxDQUFDTSxNQUFNO0lBQ3ZEO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBOztDQUVDLEdBQ00sTUFBTUU7SUFDVEMsYUFBYztRQUNWLDREQUE0RDtRQUM1RCxpRkFBaUY7UUFDakYsaUVBQWlFO1FBQ2pFQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU9uQjtRQUNYO0lBQ0o7SUFDQTs7Ozs7S0FLQyxHQUNEb0Isc0JBQXNCQyxZQUFZLEVBQUU7UUFDaEMsSUFBSSxDQUFDQyxVQUFVLEdBQUdEO0lBQ3RCO0FBQ0o7QUFDQSxNQUFNRSxhQUFhLElBQUlDO0FBQ3ZCOztDQUVDLEdBQ00sTUFBTUMsc0JBQXNCYjtJQUMvQkMsWUFBWWEsR0FBRyxDQUFFO1FBQ2IsS0FBSztRQUNMWixPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVM7WUFDakNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1EsS0FBSyxHQUFHRCxPQUFPLElBQUlGO0lBQzVCO0lBQ0E7Ozs7OztLQU1DLEdBQ0RJLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQyxJQUFJLENBQUNMLEtBQUssQ0FBQ00sR0FBRyxDQUFDLElBQUksQ0FBQ1gsVUFBVSxDQUFDTyxRQUFRQyxZQUFZO0lBQzlFO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNSSxPQUFPTCxNQUFNLEVBQUVDLE1BQU0sRUFBRVgsS0FBSyxFQUFFO1FBQ2hDLElBQUksQ0FBQ1EsS0FBSyxDQUFDUSxHQUFHLENBQUMsSUFBSSxDQUFDYixVQUFVLENBQUNPLFFBQVFDLFNBQVNYO0lBQ3BEO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9pQixTQUFTO1FBQ1osT0FBTyxJQUFJWCxjQUFjRjtJQUM3QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhY2hlcy9iYXNlLmpzP2EyNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5zZWN1cmVIYXNoIH0gZnJvbSBcIi4uL3V0aWxzL2hhc2guanNcIjtcbmltcG9ydCB7IG1hcFN0b3JlZE1lc3NhZ2VUb0NoYXRNZXNzYWdlIH0gZnJvbSBcIi4uL21lc3NhZ2VzL3V0aWxzLmpzXCI7XG4vKipcbiAqIFRoaXMgY2FjaGUga2V5IHNob3VsZCBiZSBjb25zaXN0ZW50IGFjcm9zcyBhbGwgdmVyc2lvbnMgb2YgTGFuZ0NoYWluLlxuICogSXQgaXMgY3VycmVudGx5IE5PVCBjb25zaXN0ZW50IGFjcm9zcyB2ZXJzaW9ucyBvZiBMYW5nQ2hhaW4uXG4gKlxuICogQSBodWdlIGJlbmVmaXQgb2YgaGF2aW5nIGEgcmVtb3RlIGNhY2hlIChsaWtlIHJlZGlzKSBpcyB0aGF0IHlvdSBjYW5cbiAqIGFjY2VzcyB0aGUgY2FjaGUgZnJvbSBkaWZmZXJlbnQgcHJvY2Vzc2VzL21hY2hpbmVzLiBUaGUgYWxsb3dzIHlvdSB0b1xuICogc2VwYXJhdGUgY29uY2VybnMgYW5kIHNjYWxlIGhvcml6b250YWxseS5cbiAqXG4gKiBUT0RPOiBNYWtlIGNhY2hlIGtleSBjb25zaXN0ZW50IGFjcm9zcyB2ZXJzaW9ucyBvZiBMYW5nQ2hhaW4uXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBtYWtlRGVmYXVsdEtleUVuY29kZXIoKWAgdG8gY3JlYXRlIGEgY3VzdG9tIGtleSBlbmNvZGVyLlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENhY2hlS2V5ID0gKC4uLnN0cmluZ3MpID0+IGluc2VjdXJlSGFzaChzdHJpbmdzLmpvaW4oXCJfXCIpKTtcbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVN0b3JlZEdlbmVyYXRpb24oc3RvcmVkR2VuZXJhdGlvbikge1xuICAgIGlmIChzdG9yZWRHZW5lcmF0aW9uLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogc3RvcmVkR2VuZXJhdGlvbi50ZXh0LFxuICAgICAgICAgICAgbWVzc2FnZTogbWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2Uoc3RvcmVkR2VuZXJhdGlvbi5tZXNzYWdlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHRleHQ6IHN0b3JlZEdlbmVyYXRpb24udGV4dCB9O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVHZW5lcmF0aW9uKGdlbmVyYXRpb24pIHtcbiAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSB7XG4gICAgICAgIHRleHQ6IGdlbmVyYXRpb24udGV4dCxcbiAgICB9O1xuICAgIGlmIChnZW5lcmF0aW9uLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXJpYWxpemVkVmFsdWUubWVzc2FnZSA9IGdlbmVyYXRpb24ubWVzc2FnZS50b0RpY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRWYWx1ZTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGNhY2hlcy4gQWxsIGNhY2hlcyBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIHVzZSBhIGRlZmF1bHQga2V5IGVuY29kZXJcbiAgICAgICAgLy8gdGhhdCB1c2VzIFNIQS0xIHRvIGhhc2ggdGhlIHByb21wdCBhbmQgTExNIGtleS4gVGhpcyB3aWxsIGFsc28gcHJpbnQgYSB3YXJuaW5nXG4gICAgICAgIC8vIGFib3V0IHRoZSBzZWN1cml0eSBpbXBsaWNhdGlvbnMgb2YgdXNpbmcgU0hBLTEgYXMgYSBjYWNoZSBrZXkuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtleUVuY29kZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGdldENhY2hlS2V5XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgY3VzdG9tIGtleSBlbmNvZGVyIGZ1bmN0aW9uIGZvciB0aGUgY2FjaGUuXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgdGFrZSBhIHByb21wdCBhbmQgYW4gTExNIGtleSBhbmQgcmV0dXJuIGEgc3RyaW5nXG4gICAgICogdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcGFyYW0ga2V5RW5jb2RlckZuIFRoZSBjdXN0b20ga2V5IGVuY29kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgbWFrZURlZmF1bHRLZXlFbmNvZGVyKGtleUVuY29kZXJGbikge1xuICAgICAgICB0aGlzLmtleUVuY29kZXIgPSBrZXlFbmNvZGVyRm47XG4gICAgfVxufVxuY29uc3QgR0xPQkFMX01BUCA9IG5ldyBNYXAoKTtcbi8qKlxuICogQSBjYWNoZSBmb3Igc3RvcmluZyBMTE0gZ2VuZXJhdGlvbnMgdGhhdCBzdG9yZXMgZGF0YSBpbiBtZW1vcnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbk1lbW9yeUNhY2hlIGV4dGVuZHMgQmFzZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FjaGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG1hcCA/PyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBkYXRhIGZyb20gdGhlIGNhY2hlIHVzaW5nIGEgcHJvbXB0IGFuZCBhbiBMTE0ga2V5LiBJZiB0aGVcbiAgICAgKiBkYXRhIGlzIG5vdCBmb3VuZCwgaXQgcmV0dXJucyBudWxsLlxuICAgICAqIEBwYXJhbSBwcm9tcHQgVGhlIHByb21wdCB1c2VkIHRvIGZpbmQgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGxsbUtleSBUaGUgTExNIGtleSB1c2VkIHRvIGZpbmQgdGhlIGRhdGEuXG4gICAgICogQHJldHVybnMgVGhlIGRhdGEgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbXB0IGFuZCBMTE0ga2V5LCBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgKi9cbiAgICBsb29rdXAocHJvbXB0LCBsbG1LZXkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNhY2hlLmdldCh0aGlzLmtleUVuY29kZXIocHJvbXB0LCBsbG1LZXkpKSA/PyBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY2FjaGUgd2l0aCBuZXcgZGF0YSB1c2luZyBhIHByb21wdCBhbmQgYW4gTExNIGtleS5cbiAgICAgKiBAcGFyYW0gcHJvbXB0IFRoZSBwcm9tcHQgdXNlZCB0byBzdG9yZSB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gbGxtS2V5IFRoZSBMTE0ga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBkYXRhIHRvIGJlIHN0b3JlZC5cbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGUocHJvbXB0LCBsbG1LZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KHRoaXMua2V5RW5jb2Rlcihwcm9tcHQsIGxsbUtleSksIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGdsb2JhbCBpbnN0YW5jZSBvZiBJbk1lbW9yeUNhY2hlIHVzaW5nIGEgcHJlZGVmaW5lZCBnbG9iYWxcbiAgICAgKiBtYXAgYXMgdGhlIGluaXRpYWwgY2FjaGUuXG4gICAgICogQHJldHVybnMgQSBnbG9iYWwgaW5zdGFuY2Ugb2YgSW5NZW1vcnlDYWNoZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2xvYmFsKCkge1xuICAgICAgICByZXR1cm4gbmV3IEluTWVtb3J5Q2FjaGUoR0xPQkFMX01BUCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImluc2VjdXJlSGFzaCIsIm1hcFN0b3JlZE1lc3NhZ2VUb0NoYXRNZXNzYWdlIiwiZ2V0Q2FjaGVLZXkiLCJzdHJpbmdzIiwiam9pbiIsImRlc2VyaWFsaXplU3RvcmVkR2VuZXJhdGlvbiIsInN0b3JlZEdlbmVyYXRpb24iLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwidGV4dCIsInNlcmlhbGl6ZUdlbmVyYXRpb24iLCJnZW5lcmF0aW9uIiwic2VyaWFsaXplZFZhbHVlIiwidG9EaWN0IiwiQmFzZUNhY2hlIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwibWFrZURlZmF1bHRLZXlFbmNvZGVyIiwia2V5RW5jb2RlckZuIiwia2V5RW5jb2RlciIsIkdMT0JBTF9NQVAiLCJNYXAiLCJJbk1lbW9yeUNhY2hlIiwibWFwIiwiY2FjaGUiLCJsb29rdXAiLCJwcm9tcHQiLCJsbG1LZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldCIsInVwZGF0ZSIsInNldCIsImdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/caches/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler),\n/* harmony export */   callbackHandlerPrefersStreaming: () => (/* binding */ callbackHandlerPrefersStreaming),\n/* harmony export */   isBaseCallbackHandler: () => (/* binding */ isBaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\nfunction callbackHandlerPrefersStreaming(x) {\n    return \"lc_prefer_streaming\" in x && x.lc_prefer_streaming;\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    get lc_serializable_keys() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreCustomEvent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"raiseError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.ignoreCustomEvent = input.ignoreCustomEvent ?? this.ignoreCustomEvent;\n            this.raiseError = input.raiseError ?? this.raiseError;\n            this.awaitHandlers = this.raiseError || (input._awaitHandler ?? this.awaitHandlers);\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\nconst isBaseCallbackHandler = (x)=>{\n    const callbackHandler = x;\n    return callbackHandler !== undefined && typeof callbackHandler.copy === \"function\" && typeof callbackHandler.name === \"string\" && typeof callbackHandler.awaitHandlers === \"boolean\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/manager.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   BaseRunManager: () => (/* binding */ BaseRunManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   ensureHandler: () => (/* binding */ ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tracers/console.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tracers/tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\");\n/* harmony import */ var _utils_callbacks_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/callbacks.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.js\");\n/* harmony import */ var _tracers_base_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tracers/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _singletons_async_local_storage_context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../singletons/async_local_storage/context.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js\");\n\n\n\n\n\n\n\n\n\n\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    get parentRunId() {\n        return this._parentRunId;\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleCustomEvent(eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, _runId, _tags, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _metadata) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleCustomEvent?.(eventName, data, this.runId, this.tags, this.metadata);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleCustomEvent: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err, _runId, _parentRunId, _tags, extraParams) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags, extraParams);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output, _runId, _parentRunId, _tags, extraParams) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags, extraParams);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */ class CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers = options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata = options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */ getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>{\n                if (handler.ignoreLLM) {\n                    return;\n                }\n                if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                    // Create and add run to the run map.\n                    // We do this synchronously to avoid race conditions\n                    // when callbacks are backgrounded.\n                    handler._createRunForLLMStart(llm, [\n                        prompt\n                    ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                }\n                return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                    try {\n                        await handler.handleLLMStart?.(llm, [\n                            prompt\n                        ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }, handler.awaitHandlers);\n            }));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>{\n                if (handler.ignoreLLM) {\n                    return;\n                }\n                if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                    // Create and add run to the run map.\n                    // We do this synchronously to avoid race conditions\n                    // when callbacks are backgrounded.\n                    handler._createRunForChatModelStart(llm, [\n                        messageGroup\n                    ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                }\n                return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                    try {\n                        if (handler.handleChatModelStart) {\n                            await handler.handleChatModelStart?.(llm, [\n                                messageGroup\n                            ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        } else if (handler.handleLLMStart) {\n                            const messageString = (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBufferString)(messageGroup);\n                            await handler.handleLLMStart?.(llm, [\n                                messageString\n                            ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        }\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }, handler.awaitHandlers);\n            }));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>{\n            if (handler.ignoreChain) {\n                return;\n            }\n            if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForChainStart(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n            }\n            return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>{\n            if (handler.ignoreAgent) {\n                return;\n            }\n            if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForToolStart(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n            }\n            return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>{\n            if (handler.ignoreRetriever) {\n                return;\n            }\n            if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForRetrieverStart(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n            }\n            return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleCustomEvent(eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, runId, _tags, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _metadata) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreCustomEvent) {\n                    try {\n                        await handler.handleCustomEvent?.(eventName, data, runId, this.tags, this.metadata);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleCustomEvent: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        return this._configureSync(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options);\n    }\n    // TODO: Deprecate async method in favor of this one.\n    static _configureSync(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" || options?.verbose;\n        const tracingV2Enabled = _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer.getTraceableRunTree()?.tracingEnabled || (0,_utils_callbacks_js__WEBPACK_IMPORTED_MODULE_6__.isTracingEnabled)();\n        const tracingEnabled = tracingV2Enabled || ((0,_utils_env_js__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    const tracerV2 = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer();\n                    callbackManager.addHandler(tracerV2, true);\n                    // handoff between langchain and langsmith/traceable\n                    // override the parent run ID\n                    callbackManager._parentRunId = _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer.getTraceableRunTree()?.id ?? callbackManager._parentRunId;\n                }\n            }\n        }\n        for (const { contextVar, inheritable = true, handlerClass, envVar } of (0,_singletons_async_local_storage_context_js__WEBPACK_IMPORTED_MODULE_8__._getConfigureHooks)()){\n            const createIfNotInContext = envVar && (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(envVar) === \"true\" && handlerClass;\n            let handler;\n            const contextVarValue = contextVar !== undefined ? (0,_singletons_async_local_storage_context_js__WEBPACK_IMPORTED_MODULE_8__.getContextVariable)(contextVar) : undefined;\n            if (contextVarValue && (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.isBaseCallbackHandler)(contextVarValue)) {\n                handler = contextVarValue;\n            } else if (createIfNotInContext) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                handler = new handlerClass({});\n            }\n            if (handler !== undefined) {\n                if (!callbackManager) {\n                    callbackManager = new CallbackManager();\n                }\n                if (!callbackManager.handlers.some((h)=>h.name === handler.name)) {\n                    callbackManager.addHandler(handler, inheritable);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @deprecated Use [`traceable`](https://docs.smith.langchain.com/observability/how_to_guides/tracing/annotate_code)\n * from \"langsmith\" instead.\n */ class TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/promises.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* reexport safe */ _singletons_callbacks_js__WEBPACK_IMPORTED_MODULE_0__.awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* reexport safe */ _singletons_callbacks_js__WEBPACK_IMPORTED_MODULE_0__.consumeCallback)\n/* harmony export */ });\n/* harmony import */ var _singletons_callbacks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../singletons/callbacks.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRjtBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9jYWxsYmFja3MvcHJvbWlzZXMuanM/ZWMzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhd2FpdEFsbENhbGxiYWNrcywgY29uc3VtZUNhbGxiYWNrIH0gZnJvbSBcIi4uL3NpbmdsZXRvbnMvY2FsbGJhY2tzLmpzXCI7XG5leHBvcnQgeyBhd2FpdEFsbENhbGxiYWNrcywgY29uc3VtZUNhbGxiYWNrIH07XG4iXSwibmFtZXMiOlsiYXdhaXRBbGxDYWxsYmFja3MiLCJjb25zdW1lQ2FsbGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/embeddings.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/embeddings.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */ class Embeddings {\n    constructor(params){\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller(params ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZW1iZWRkaW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUN0RDs7O0NBR0MsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEI7OztTQUdDLEdBQ0RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSVYsK0RBQVdBLENBQUNHLFVBQVUsQ0FBQztJQUM3QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2VtYmVkZGluZ3MuanM/ZTE5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuL3V0aWxzL2FzeW5jX2NhbGxlci5qc1wiO1xuLyoqXG4gKiBBbiBhYnN0cmFjdCBjbGFzcyB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGVtYmVkZGluZyBkb2N1bWVudHMgYW5kXG4gKiBxdWVyaWVzIHVzaW5nIExhbmdDaGFpbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVtYmVkZGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFzeW5jIGNhbGxlciBzaG91bGQgYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIG1ha2UgYW55IGFzeW5jIGNhbGxzLFxuICAgICAgICAgKiB3aGljaCB3aWxsIHRodXMgYmVuZWZpdCBmcm9tIHRoZSBjb25jdXJyZW5jeSBhbmQgcmV0cnkgbG9naWMuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWxsZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWxsZXIgPSBuZXcgQXN5bmNDYWxsZXIocGFyYW1zID8/IHt9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQXN5bmNDYWxsZXIiLCJFbWJlZGRpbmdzIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiY2FsbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/errors/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/errors/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLangChainErrorFields: () => (/* binding */ addLangChainErrorFields)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable no-param-reassign */ function addLangChainErrorFields(error, lc_error_code) {\n    error.lc_error_code = lc_error_code;\n    error.message = `${error.message}\\n\\nTroubleshooting URL: https://js.langchain.com/docs/troubleshooting/errors/${lc_error_code}/\\n`;\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxREFBcUQsR0FDckQsb0NBQW9DLEdBQzdCLFNBQVNBLHdCQUF3QkMsS0FBSyxFQUFFQyxhQUFhO0lBQ3hERCxNQUFNQyxhQUFhLEdBQUdBO0lBQ3RCRCxNQUFNRSxPQUFPLEdBQUcsQ0FBQyxFQUFFRixNQUFNRSxPQUFPLENBQUMsOEVBQThFLEVBQUVELGNBQWMsR0FBRyxDQUFDO0lBQ25JLE9BQU9EO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXJyb3JzL2luZGV4LmpzPzE5MWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyhlcnJvciwgbGNfZXJyb3JfY29kZSkge1xuICAgIGVycm9yLmxjX2Vycm9yX2NvZGUgPSBsY19lcnJvcl9jb2RlO1xuICAgIGVycm9yLm1lc3NhZ2UgPSBgJHtlcnJvci5tZXNzYWdlfVxcblxcblRyb3VibGVzaG9vdGluZyBVUkw6IGh0dHBzOi8vanMubGFuZ2NoYWluLmNvbS9kb2NzL3Ryb3VibGVzaG9vdGluZy9lcnJvcnMvJHtsY19lcnJvcl9jb2RlfS9cXG5gO1xuICAgIHJldHVybiBlcnJvcjtcbn1cbiJdLCJuYW1lcyI6WyJhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyIsImVycm9yIiwibGNfZXJyb3JfY29kZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/base.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* binding */ BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* binding */ BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* binding */ calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* binding */ getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* binding */ getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* binding */ getModelNameForTiktoken),\n/* harmony export */   isOpenAITool: () => (/* binding */ isOpenAITool)\n/* harmony export */ });\n/* harmony import */ var _caches_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../caches/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/caches/base.js\");\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/tiktoken.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n\n\n\n\n\n\n// https://www.npmjs.com/package/js-tiktoken\nconst getModelNameForTiktoken = (modelName)=>{\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    if (modelName.startsWith(\"gpt-4o\")) {\n        return \"gpt-4o\";\n    }\n    return modelName;\n};\nconst getEmbeddingContextSize = (modelName)=>{\n    switch(modelName){\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nconst getModelContextSize = (modelName)=>{\n    switch(getModelNameForTiktoken(modelName)){\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\n/**\n * Whether or not the input matches the OpenAI tool definition.\n * @param {unknown} tool The input to check.\n * @returns {boolean} Whether the input is an OpenAI tool definition.\n */ function isOpenAITool(tool) {\n    if (typeof tool !== \"object\" || !tool) return false;\n    if (\"type\" in tool && tool.type === \"function\" && \"function\" in tool && typeof tool.function === \"object\" && tool.function && \"name\" in tool.function && \"parameters\" in tool.function) {\n        return true;\n    }\n    return false;\n}\nconst calculateMaxTokens = async ({ prompt, modelName })=>{\n    let numTokens;\n    try {\n        numTokens = (await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(getModelNameForTiktoken(modelName))).encode(prompt).length;\n    } catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = getModelContextSize(modelName);\n    return maxTokens - numTokens;\n};\nconst getVerbosity = ()=>false;\n/**\n * Base class for language models, chains, tools.\n */ class BaseLangChain extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined\n        };\n    }\n    constructor(params){\n        super(params);\n        /**\n         * Whether to print out response text.\n         */ Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\n/**\n * Base class for language models.\n */ class BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */ get callKeys() {\n        return [\n            \"stop\",\n            \"timeout\",\n            \"signal\",\n            \"tags\",\n            \"metadata\",\n            \"callbacks\"\n        ];\n    }\n    constructor({ callbacks, callbackManager, ...params }){\n        const { cache, ...rest } = params;\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...rest\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof cache === \"object\") {\n            this.cache = cache;\n        } else if (cache) {\n            this.cache = _caches_base_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache.global();\n        } else {\n            this.cache = undefined;\n        }\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__.AsyncCaller(params ?? {});\n    }\n    /**\n     * Get the number of tokens in the content.\n     * @param content The content to get the number of tokens for.\n     * @returns The number of tokens in the content.\n     */ async getNumTokens(content) {\n        // Extract text content from MessageContent\n        let textContent;\n        if (typeof content === \"string\") {\n            textContent = content;\n        } else {\n            /**\n             * Content is an array of MessageContentComplex\n             *\n             * ToDo(@christian-bromann): This is a temporary fix to get the number of tokens for the content.\n             * We need to find a better way to do this.\n             * @see https://github.com/langchain-ai/langchainjs/pull/8341#pullrequestreview-2933713116\n             */ textContent = content.map((item)=>{\n                if (typeof item === \"string\") return item;\n                if (item.type === \"text\" && \"text\" in item) return item.text;\n                return \"\";\n            }).join(\"\");\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(textContent.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(\"modelName\" in this ? getModelNameForTiktoken(this.modelName) : \"gpt2\");\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(textContent).length;\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.StringPromptValue(input);\n        } else if (Array.isArray(input)) {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptValue(input.map(_messages_utils_js__WEBPACK_IMPORTED_MODULE_2__.coerceMessageLikeToMessage));\n        } else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */ _getSerializedCacheKeyParametersForCall(// TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\n    { config, ...callOptions }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value])=>value !== undefined);\n        const serializedEntries = filteredEntries.map(([key, value])=>`${key}:${JSON.stringify(value)}`).sort().join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */ static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/chat_models.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* binding */ BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* binding */ SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* binding */ createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _runnables_passthrough_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../runnables/passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n/* harmony import */ var _utils_types_zod_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/types/zod.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\");\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _utils_json_schema_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/json_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a transform stream for encoding chat message chunks.\n * @deprecated Use {@link BytesOutputParser} instead\n * @returns A TransformStream instance that encodes chat message chunks.\n */ function createChatMessageChunkEncoderStream() {\n    const textEncoder = new TextEncoder();\n    return new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(textEncoder.encode(typeof chunk.content === \"string\" ? chunk.content : JSON.stringify(chunk.content)));\n        }\n    });\n}\nfunction _formatForTracing(messages) {\n    const messagesToTrace = [];\n    for (const message of messages){\n        let messageToTrace = message;\n        if (Array.isArray(message.content)) {\n            for(let idx = 0; idx < message.content.length; idx++){\n                const block = message.content[idx];\n                if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isURLContentBlock)(block) || (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBase64ContentBlock)(block)) {\n                    if (messageToTrace === message) {\n                        // Also shallow-copy content\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        messageToTrace = new message.constructor({\n                            ...messageToTrace,\n                            content: [\n                                ...message.content.slice(0, idx),\n                                (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAIImageBlock)(block),\n                                ...message.content.slice(idx + 1)\n                            ]\n                        });\n                    }\n                }\n            }\n        }\n        messagesToTrace.push(messageToTrace);\n    }\n    return messagesToTrace;\n}\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */ class BaseChatModel extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseLanguageModel {\n    constructor(fields){\n        super(fields);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"chat_models\",\n                this._llmType()\n            ]\n        });\n        Object.defineProperty(this, \"disableStreaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    _separateRunnableConfigFromCallOptionsCompat(options) {\n        // For backwards compat, keep `signal` in both runnableConfig and callOptions\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        callOptions.signal = runnableConfig.signal;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */ async invoke(input, options) {\n        const promptValue = BaseChatModel._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([\n            promptValue\n        ], options, options?.callbacks);\n        const chatGeneration = result.generations[0][0];\n        // TODO: Remove cast after figuring out inheritance\n        return chatGeneration.message;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_messages, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseChatModel.prototype._streamResponseChunks || this.disableStreaming) {\n            yield this.invoke(input, options);\n        } else {\n            const prompt = BaseChatModel._convertInputToPromptValue(input);\n            const messages = prompt.toChatMessages();\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(options);\n            const inheritableMetadata = {\n                ...runnableConfig.metadata,\n                ...this.getLsParams(callOptions)\n            };\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, inheritableMetadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1\n            };\n            const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), [\n                _formatForTracing(messages)\n            ], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generationChunk;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let llmOutput;\n            try {\n                for await (const chunk of this._streamResponseChunks(messages, callOptions, runManagers?.[0])){\n                    if (chunk.message.id == null) {\n                        const runId = runManagers?.at(0)?.runId;\n                        if (runId != null) chunk.message._updateId(`run-${runId}`);\n                    }\n                    chunk.message.response_metadata = {\n                        ...chunk.generationInfo,\n                        ...chunk.message.response_metadata\n                    };\n                    yield chunk.message;\n                    if (!generationChunk) {\n                        generationChunk = chunk;\n                    } else {\n                        generationChunk = generationChunk.concat(chunk);\n                    }\n                    if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessageChunk)(chunk.message) && chunk.message.usage_metadata !== undefined) {\n                        llmOutput = {\n                            tokenUsage: {\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\n                                totalTokens: chunk.message.usage_metadata.total_tokens\n                            }\n                        };\n                    }\n                }\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMEnd({\n                    // TODO: Remove cast after figuring out inheritance\n                    generations: [\n                        [\n                            generationChunk\n                        ]\n                    ],\n                    llmOutput\n                })));\n        }\n    }\n    getLsParams(options) {\n        const providerName = this.getName().startsWith(\"Chat\") ? this.getName().replace(\"Chat\", \"\") : this.getName();\n        return {\n            ls_model_type: \"chat\",\n            ls_stop: options.stop,\n            ls_provider: providerName\n        };\n    }\n    /** @ignore */ async _generateUncached(messages, parsedOptions, handledOptions, startedRunManagers) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        let runManagers;\n        if (startedRunManagers !== undefined && startedRunManagers.length === baseMessages.length) {\n            runManagers = startedRunManagers;\n        } else {\n            const inheritableMetadata = {\n                ...handledOptions.metadata,\n                ...this.getLsParams(parsedOptions)\n            };\n            // create callback manager and start run\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: parsedOptions,\n                invocation_params: this?.invocationParams(parsedOptions),\n                batch_size: 1\n            };\n            runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages.map(_formatForTracing), handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        }\n        const generations = [];\n        const llmOutputs = [];\n        // Even if stream is not explicitly called, check if model is implicitly\n        // called from streamEvents() or streamLog() to get all streamed events.\n        // Bail out if _streamResponseChunks not overridden\n        const hasStreamingHandler = !!runManagers?.[0].handlers.find(_callbacks_base_js__WEBPACK_IMPORTED_MODULE_8__.callbackHandlerPrefersStreaming);\n        if (hasStreamingHandler && !this.disableStreaming && baseMessages.length === 1 && this._streamResponseChunks !== BaseChatModel.prototype._streamResponseChunks) {\n            try {\n                const stream = await this._streamResponseChunks(baseMessages[0], parsedOptions, runManagers?.[0]);\n                let aggregated;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let llmOutput;\n                for await (const chunk of stream){\n                    if (chunk.message.id == null) {\n                        const runId = runManagers?.at(0)?.runId;\n                        if (runId != null) chunk.message._updateId(`run-${runId}`);\n                    }\n                    if (aggregated === undefined) {\n                        aggregated = chunk;\n                    } else {\n                        aggregated = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(aggregated, chunk);\n                    }\n                    if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessageChunk)(chunk.message) && chunk.message.usage_metadata !== undefined) {\n                        llmOutput = {\n                            tokenUsage: {\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\n                                totalTokens: chunk.message.usage_metadata.total_tokens\n                            }\n                        };\n                    }\n                }\n                if (aggregated === undefined) {\n                    throw new Error(\"Received empty response from chat model call.\");\n                }\n                generations.push([\n                    aggregated\n                ]);\n                await runManagers?.[0].handleLLMEnd({\n                    generations,\n                    llmOutput\n                });\n            } catch (e) {\n                await runManagers?.[0].handleLLMError(e);\n                throw e;\n            }\n        } else {\n            // generate results\n            const results = await Promise.allSettled(baseMessages.map((messageList, i)=>this._generate(messageList, {\n                    ...parsedOptions,\n                    promptIndex: i\n                }, runManagers?.[i])));\n            // handle results\n            await Promise.all(results.map(async (pResult, i)=>{\n                if (pResult.status === \"fulfilled\") {\n                    const result = pResult.value;\n                    for (const generation of result.generations){\n                        if (generation.message.id == null) {\n                            const runId = runManagers?.at(0)?.runId;\n                            if (runId != null) generation.message._updateId(`run-${runId}`);\n                        }\n                        generation.message.response_metadata = {\n                            ...generation.generationInfo,\n                            ...generation.message.response_metadata\n                        };\n                    }\n                    if (result.generations.length === 1) {\n                        result.generations[0].message.response_metadata = {\n                            ...result.llmOutput,\n                            ...result.generations[0].message.response_metadata\n                        };\n                    }\n                    generations[i] = result.generations;\n                    llmOutputs[i] = result.llmOutput;\n                    return runManagers?.[i]?.handleLLMEnd({\n                        generations: [\n                            result.generations\n                        ],\n                        llmOutput: result.llmOutput\n                    });\n                } else {\n                    // status === \"rejected\"\n                    await runManagers?.[i]?.handleLLMError(pResult.reason);\n                    return Promise.reject(pResult.reason);\n                }\n            }));\n        }\n        // create combined output\n        const output = {\n            generations,\n            llmOutput: llmOutputs.length ? this._combineLLMOutput?.(...llmOutputs) : undefined\n        };\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    async _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions }) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        const inheritableMetadata = {\n            ...handledOptions.metadata,\n            ...this.getLsParams(parsedOptions)\n        };\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages.map(_formatForTracing), handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(baseMessages.map(async (baseMessage, index)=>{\n            // Join all content into one string for the prompt index\n            const prompt = BaseChatModel._convertInputToPromptValue(baseMessage).toString();\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results.map((result, index)=>({\n                result,\n                runManager: runManagers?.[index]\n            })).filter(({ result })=>result.status === \"fulfilled\" && result.value != null || result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i)=>{\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result.map((result)=>{\n                    if (\"message\" in result && (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(result.message) && (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage)(result.message)) {\n                        // eslint-disable-next-line no-param-reassign\n                        result.message.usage_metadata = {\n                            input_tokens: 0,\n                            output_tokens: 0,\n                            total_tokens: 0\n                        };\n                    }\n                    // eslint-disable-next-line no-param-reassign\n                    result.generationInfo = {\n                        ...result.generationInfo,\n                        tokenUsage: {}\n                    };\n                    return result;\n                });\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [\n                        result\n                    ]\n                }, undefined, undefined, undefined, {\n                    cached: true\n                });\n            } else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason, undefined, undefined, undefined, {\n                    cached: true\n                });\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices,\n            startedRunManagers: runManagers\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generate(messages, options, callbacks) {\n        // parse call options\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else {\n            parsedOptions = options;\n        }\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(baseMessages, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices, startedRunManagers } = await this._generateCached({\n            messages: baseMessages,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i)=>baseMessages[i]), callOptions, runnableConfig, startedRunManagers !== undefined ? missingPromptIndices.map((i)=>startedRunManagers?.[i]) : undefined);\n            await Promise.all(results.generations.map(async (generation, index)=>{\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                // Join all content into one string for the prompt index\n                const prompt = BaseChatModel._convertInputToPromptValue(baseMessages[promptIndex]).toString();\n                return cache.update(prompt, llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return {\n            generations,\n            llmOutput\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _modelType() {\n        return \"base_chat_model\";\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this.invocationParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generatePrompt(promptValues, options, callbacks) {\n        const promptMessages = promptValues.map((promptValue)=>promptValue.toChatMessages());\n        return this.generate(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async call(messages, options, callbacks) {\n        const result = await this.generate([\n            messages.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage)\n        ], options, callbacks);\n        const generations = result.generations;\n        return generations[0][0].message;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model with a prompt value.\n     * @param promptValue The value of the prompt.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async callPrompt(promptValue, options, callbacks) {\n        const promptMessages = promptValue.toChatMessages();\n        return this.call(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on the input messages.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async predictMessages(messages, options, callbacks) {\n        return this.call(messages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on a text input.\n     * @param text The text input.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a string.\n     */ async predict(text, options, callbacks) {\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(text);\n        const result = await this.call([\n            message\n        ], options, callbacks);\n        if (typeof result.content !== \"string\") {\n            throw new Error(\"Cannot use predict when output is not a string.\");\n        }\n        return result.content;\n    }\n    withStructuredOutput(outputSchema, config) {\n        if (typeof this.bindTools !== \"function\") {\n            throw new Error(`Chat model must implement \".bindTools()\" to use withStructuredOutput.`);\n        }\n        if (config?.strict) {\n            throw new Error(`\"strict\" mode is not supported for this model by default.`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const description = (0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_7__.getSchemaDescription)(schema) ?? \"A function available to call.\";\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        if (method === \"jsonMode\") {\n            throw new Error(`Base withStructuredOutput implementation only supports \"functionCalling\" as a method.`);\n        }\n        let functionName = name ?? \"extract\";\n        let tools;\n        if ((0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_7__.isInteropZodSchema)(schema)) {\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: (0,_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_9__.toJsonSchema)(schema)\n                    }\n                }\n            ];\n        } else {\n            if (\"name\" in schema) {\n                functionName = schema.name;\n            }\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: schema\n                    }\n                }\n            ];\n        }\n        const llm = this.bindTools(tools);\n        const outputParser = _runnables_base_js__WEBPACK_IMPORTED_MODULE_4__.RunnableLambda.from((input)=>{\n            if (!input.tool_calls || input.tool_calls.length === 0) {\n                throw new Error(\"No tool calls found in the response.\");\n            }\n            const toolCall = input.tool_calls.find((tc)=>tc.name === functionName);\n            if (!toolCall) {\n                throw new Error(`No tool call found with name ${functionName}.`);\n            }\n            return toolCall.args;\n        });\n        if (!includeRaw) {\n            return llm.pipe(outputParser).withConfig({\n                runName: \"StructuredOutput\"\n            });\n        }\n        const parserAssign = _runnables_passthrough_js__WEBPACK_IMPORTED_MODULE_6__.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config)=>outputParser.invoke(input.raw, config)\n        });\n        const parserNone = _runnables_passthrough_js__WEBPACK_IMPORTED_MODULE_6__.RunnablePassthrough.assign({\n            parsed: ()=>null\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [\n                parserNone\n            ]\n        });\n        return _runnables_base_js__WEBPACK_IMPORTED_MODULE_4__.RunnableSequence.from([\n            {\n                raw: llm\n            },\n            parsedWithFallback\n        ]).withConfig({\n            runName: \"StructuredOutputRunnable\"\n        });\n    }\n}\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */ class SimpleChatModel extends BaseChatModel {\n    async _generate(messages, options, runManager) {\n        const text = await this._call(messages, options, runManager);\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(text);\n        if (typeof message.content !== \"string\") {\n            throw new Error(\"Cannot generate with a simple chat model when output is not a string.\");\n        }\n        return {\n            generations: [\n                {\n                    text: message.content,\n                    message\n                }\n            ]\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/map_keys.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9tYXBfa2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUNEO0FBQzNCLFNBQVNFLFVBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUM5QixPQUFPQSxLQUFLLENBQUNELElBQUksSUFBSUgsdUNBQVNBLENBQUNHO0FBQ25DO0FBQ08sU0FBU0UsWUFBWUYsR0FBRyxFQUFFQyxHQUFHO0lBQ2hDLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxJQUFJRixzQ0FBU0EsQ0FBQ0U7QUFDbkM7QUFDTyxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUosR0FBRztJQUN2QyxNQUFNSyxTQUFTLENBQUM7SUFDaEIsSUFBSyxNQUFNTixPQUFPSSxPQUFRO1FBQ3RCLElBQUlHLE9BQU9DLE1BQU0sQ0FBQ0osUUFBUUosTUFBTTtZQUM1Qk0sTUFBTSxDQUFDRCxPQUFPTCxLQUFLQyxLQUFLLEdBQUdHLE1BQU0sQ0FBQ0osSUFBSTtRQUMxQztJQUNKO0lBQ0EsT0FBT007QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9sb2FkL21hcF9rZXlzLmpzPzBmNDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNuYWtlQ2FzZSBmcm9tIFwiZGVjYW1lbGl6ZVwiO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tIFwiY2FtZWxjYXNlXCI7XG5leHBvcnQgZnVuY3Rpb24ga2V5VG9Kc29uKGtleSwgbWFwKSB7XG4gICAgcmV0dXJuIG1hcD8uW2tleV0gfHwgc25ha2VDYXNlKGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5RnJvbUpzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCBjYW1lbENhc2Uoa2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBLZXlzKGZpZWxkcywgbWFwcGVyLCBtYXApIHtcbiAgICBjb25zdCBtYXBwZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZmllbGRzLCBrZXkpKSB7XG4gICAgICAgICAgICBtYXBwZWRbbWFwcGVyKGtleSwgbWFwKV0gPSBmaWVsZHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkO1xufVxuIl0sIm5hbWVzIjpbInNuYWtlQ2FzZSIsImNhbWVsQ2FzZSIsImtleVRvSnNvbiIsImtleSIsIm1hcCIsImtleUZyb21Kc29uIiwibWFwS2V5cyIsImZpZWxkcyIsIm1hcHBlciIsIm1hcHBlZCIsIk9iamVjdCIsImhhc093biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/serializable.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/serializable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * A manual list of keys that should be serialized.\n     * If not overridden, all fields passed into the constructor will be serialized.\n     */ get lc_serializable_keys() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (this.lc_serializable_keys !== undefined) {\n            this.lc_kwargs = Object.fromEntries(Object.entries(kwargs || {}).filter(([key])=>this.lc_serializable_keys?.includes(key)));\n        } else {\n            this.lc_kwargs = kwargs ?? {};\n        }\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/ai.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/ai.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* binding */ AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* binding */ AIMessageChunk),\n/* harmony export */   isAIMessage: () => (/* binding */ isAIMessage),\n/* harmony export */   isAIMessageChunk: () => (/* binding */ isAIMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/json.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n/**\n * Represents an AI message in a conversation.\n */ class AIMessage extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\"\n        };\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                additional_kwargs: kwargs ?? {}\n            };\n        } else {\n            initParams = fields;\n            const rawToolCalls = initParams.additional_kwargs?.tool_calls;\n            const toolCalls = initParams.tool_calls;\n            if (!(rawToolCalls == null) && rawToolCalls.length > 0 && (toolCalls === undefined || toolCalls.length === 0)) {\n                console.warn([\n                    \"New LangChain packages are available that more efficiently handle\",\n                    \"tool calling.\\n\\nPlease upgrade your packages to versions that set\",\n                    \"message tool calls. e.g., `yarn add @langchain/anthropic`,\",\n                    \"yarn add @langchain/openai`, etc.\"\n                ].join(\" \"));\n            }\n            try {\n                if (!(rawToolCalls == null) && toolCalls === undefined) {\n                    const [toolCalls, invalidToolCalls] = (0,_tool_js__WEBPACK_IMPORTED_MODULE_2__.defaultToolCallParser)(rawToolCalls);\n                    initParams.tool_calls = toolCalls ?? [];\n                    initParams.invalid_tool_calls = invalidToolCalls ?? [];\n                } else {\n                    initParams.tool_calls = initParams.tool_calls ?? [];\n                    initParams.invalid_tool_calls = initParams.invalid_tool_calls ?? [];\n                }\n            } catch (e) {\n                // Do nothing if parsing fails\n                initParams.tool_calls = [];\n                initParams.invalid_tool_calls = [];\n            }\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */ Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof initParams !== \"string\") {\n            this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n            this.invalid_tool_calls = initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        }\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_calls: this.tool_calls,\n            invalid_tool_calls: this.invalid_tool_calls,\n            usage_metadata: this.usage_metadata\n        };\n    }\n}\nfunction isAIMessage(x) {\n    return x._getType() === \"ai\";\n}\nfunction isAIMessageChunk(x) {\n    return x._getType() === \"ai\";\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */ class AIMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk {\n    constructor(fields){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: []\n            };\n        } else if (fields.tool_call_chunks === undefined) {\n            initParams = {\n                ...fields,\n                tool_calls: fields.tool_calls ?? [],\n                invalid_tool_calls: [],\n                tool_call_chunks: [],\n                usage_metadata: fields.usage_metadata !== undefined ? fields.usage_metadata : undefined\n            };\n        } else {\n            const groupedToolCallChunk = fields.tool_call_chunks.reduce((acc, chunk)=>{\n                // Assign a fallback ID if the chunk doesn't have one\n                // This can happen with tools that have empty schemas\n                const chunkId = chunk.id || `fallback-${chunk.index || 0}`;\n                acc[chunkId] = acc[chunkId] ?? [];\n                acc[chunkId].push(chunk);\n                return acc;\n            }, {});\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const [id, chunks] of Object.entries(groupedToolCallChunk)){\n                let parsedArgs = {};\n                const name = chunks[0]?.name ?? \"\";\n                const joinedArgs = chunks.map((c)=>c.args || \"\").join(\"\");\n                const argsStr = joinedArgs.length ? joinedArgs : \"{}\";\n                // Use the original ID from the first chunk if it exists, otherwise use the grouped ID\n                const originalId = chunks[0]?.id || id;\n                try {\n                    parsedArgs = (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(argsStr);\n                    if (parsedArgs === null || typeof parsedArgs !== \"object\" || Array.isArray(parsedArgs)) {\n                        throw new Error(\"Malformed tool call chunk args.\");\n                    }\n                    toolCalls.push({\n                        name,\n                        args: parsedArgs,\n                        id: originalId,\n                        type: \"tool_call\"\n                    });\n                } catch (e) {\n                    invalidToolCalls.push({\n                        name,\n                        args: argsStr,\n                        id: originalId,\n                        error: \"Malformed args.\",\n                        type: \"invalid_tool_call\"\n                    });\n                }\n            }\n            initParams = {\n                ...fields,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls,\n                usage_metadata: fields.usage_metadata !== undefined ? fields.usage_metadata : undefined\n            };\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // Must redeclare tool call fields since there is no multiple inheritance in JS.\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tool_call_chunks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */ Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_chunks = initParams.tool_call_chunks ?? this.tool_call_chunks;\n        this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n        this.invalid_tool_calls = initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n            tool_call_chunks: \"tool_call_chunks\"\n        };\n    }\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_calls: this.tool_calls,\n            tool_call_chunks: this.tool_call_chunks,\n            invalid_tool_calls: this.invalid_tool_calls,\n            usage_metadata: this.usage_metadata\n        };\n    }\n    concat(chunk) {\n        const combinedFields = {\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_chunks: [],\n            id: this.id ?? chunk.id\n        };\n        if (this.tool_call_chunks !== undefined || chunk.tool_call_chunks !== undefined) {\n            const rawToolCalls = (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists)(this.tool_call_chunks, chunk.tool_call_chunks);\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0) {\n                combinedFields.tool_call_chunks = rawToolCalls;\n            }\n        }\n        if (this.usage_metadata !== undefined || chunk.usage_metadata !== undefined) {\n            const inputTokenDetails = {\n                ...(this.usage_metadata?.input_token_details?.audio !== undefined || chunk.usage_metadata?.input_token_details?.audio !== undefined) && {\n                    audio: (this.usage_metadata?.input_token_details?.audio ?? 0) + (chunk.usage_metadata?.input_token_details?.audio ?? 0)\n                },\n                ...(this.usage_metadata?.input_token_details?.cache_read !== undefined || chunk.usage_metadata?.input_token_details?.cache_read !== undefined) && {\n                    cache_read: (this.usage_metadata?.input_token_details?.cache_read ?? 0) + (chunk.usage_metadata?.input_token_details?.cache_read ?? 0)\n                },\n                ...(this.usage_metadata?.input_token_details?.cache_creation !== undefined || chunk.usage_metadata?.input_token_details?.cache_creation !== undefined) && {\n                    cache_creation: (this.usage_metadata?.input_token_details?.cache_creation ?? 0) + (chunk.usage_metadata?.input_token_details?.cache_creation ?? 0)\n                }\n            };\n            const outputTokenDetails = {\n                ...(this.usage_metadata?.output_token_details?.audio !== undefined || chunk.usage_metadata?.output_token_details?.audio !== undefined) && {\n                    audio: (this.usage_metadata?.output_token_details?.audio ?? 0) + (chunk.usage_metadata?.output_token_details?.audio ?? 0)\n                },\n                ...(this.usage_metadata?.output_token_details?.reasoning !== undefined || chunk.usage_metadata?.output_token_details?.reasoning !== undefined) && {\n                    reasoning: (this.usage_metadata?.output_token_details?.reasoning ?? 0) + (chunk.usage_metadata?.output_token_details?.reasoning ?? 0)\n                }\n            };\n            const left = this.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0\n            };\n            const right = chunk.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0\n            };\n            const usage_metadata = {\n                input_tokens: left.input_tokens + right.input_tokens,\n                output_tokens: left.output_tokens + right.output_tokens,\n                total_tokens: left.total_tokens + right.total_tokens,\n                // Do not include `input_token_details` / `output_token_details` keys in combined fields\n                // unless their values are defined.\n                ...Object.keys(inputTokenDetails).length > 0 && {\n                    input_token_details: inputTokenDetails\n                },\n                ...Object.keys(outputTokenDetails).length > 0 && {\n                    output_token_details: outputTokenDetails\n                }\n            };\n            combinedFields.usage_metadata = usage_metadata;\n        }\n        return new AIMessageChunk(combinedFields);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvYWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvRDtBQUMrQztBQUNoRDtBQUNuRDs7Q0FFQyxHQUNNLE1BQU1PLGtCQUFrQk4saURBQVdBO0lBQ3RDLElBQUlPLGFBQWE7UUFDYiwrQ0FBK0M7UUFDL0MsT0FBTztZQUNILEdBQUcsS0FBSyxDQUFDQSxVQUFVO1lBQ25CQyxZQUFZO1lBQ1pDLG9CQUFvQjtRQUN4QjtJQUNKO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxNQUFNLENBQUU7UUFDSixJQUFJQztRQUNKLElBQUksT0FBT0YsV0FBVyxVQUFVO1lBQzVCRSxhQUFhO2dCQUNUQyxTQUFTSDtnQkFDVEgsWUFBWSxFQUFFO2dCQUNkQyxvQkFBb0IsRUFBRTtnQkFDdEJNLG1CQUFtQkgsVUFBVSxDQUFDO1lBQ2xDO1FBQ0osT0FDSztZQUNEQyxhQUFhRjtZQUNiLE1BQU1LLGVBQWVILFdBQVdFLGlCQUFpQixFQUFFUDtZQUNuRCxNQUFNUyxZQUFZSixXQUFXTCxVQUFVO1lBQ3ZDLElBQUksQ0FBRVEsQ0FBQUEsZ0JBQWdCLElBQUcsS0FDckJBLGFBQWFFLE1BQU0sR0FBRyxLQUNyQkQsQ0FBQUEsY0FBY0UsYUFBYUYsVUFBVUMsTUFBTSxLQUFLLElBQUk7Z0JBQ3JERSxRQUFRQyxJQUFJLENBQUM7b0JBQ1Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0gsQ0FBQ0MsSUFBSSxDQUFDO1lBQ1g7WUFDQSxJQUFJO2dCQUNBLElBQUksQ0FBRU4sQ0FBQUEsZ0JBQWdCLElBQUcsS0FBTUMsY0FBY0UsV0FBVztvQkFDcEQsTUFBTSxDQUFDRixXQUFXTSxpQkFBaUIsR0FBR2xCLCtEQUFxQkEsQ0FBQ1c7b0JBQzVESCxXQUFXTCxVQUFVLEdBQUdTLGFBQWEsRUFBRTtvQkFDdkNKLFdBQVdKLGtCQUFrQixHQUFHYyxvQkFBb0IsRUFBRTtnQkFDMUQsT0FDSztvQkFDRFYsV0FBV0wsVUFBVSxHQUFHSyxXQUFXTCxVQUFVLElBQUksRUFBRTtvQkFDbkRLLFdBQVdKLGtCQUFrQixHQUFHSSxXQUFXSixrQkFBa0IsSUFBSSxFQUFFO2dCQUN2RTtZQUNKLEVBQ0EsT0FBT2UsR0FBRztnQkFDTiw4QkFBOEI7Z0JBQzlCWCxXQUFXTCxVQUFVLEdBQUcsRUFBRTtnQkFDMUJLLFdBQVdKLGtCQUFrQixHQUFHLEVBQUU7WUFDdEM7UUFDSjtRQUNBLHVFQUF1RTtRQUN2RSxpRUFBaUU7UUFDakUsS0FBSyxDQUFDSTtRQUNOLDhFQUE4RTtRQUM5RSxvQkFBb0I7UUFDcEJZLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxFQUFFO1FBQ2I7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxzQkFBc0I7WUFDOUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sRUFBRTtRQUNiO1FBQ0E7O1NBRUMsR0FDREwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0I7WUFDMUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksT0FBT2pCLGVBQWUsVUFBVTtZQUNoQyxJQUFJLENBQUNMLFVBQVUsR0FBR0ssV0FBV0wsVUFBVSxJQUFJLElBQUksQ0FBQ0EsVUFBVTtZQUMxRCxJQUFJLENBQUNDLGtCQUFrQixHQUNuQkksV0FBV0osa0JBQWtCLElBQUksSUFBSSxDQUFDQSxrQkFBa0I7UUFDaEU7UUFDQSxJQUFJLENBQUNzQixjQUFjLEdBQUdsQixXQUFXa0IsY0FBYztJQUNuRDtJQUNBLE9BQU9DLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUMsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBLElBQUlDLG1CQUFtQjtRQUNuQixPQUFPO1lBQ0gsR0FBRyxLQUFLLENBQUNBLGdCQUFnQjtZQUN6QjFCLFlBQVksSUFBSSxDQUFDQSxVQUFVO1lBQzNCQyxvQkFBb0IsSUFBSSxDQUFDQSxrQkFBa0I7WUFDM0NzQixnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1FBQ3ZDO0lBQ0o7QUFDSjtBQUNPLFNBQVNJLFlBQVlDLENBQUM7SUFDekIsT0FBT0EsRUFBRUgsUUFBUSxPQUFPO0FBQzVCO0FBQ08sU0FBU0ksaUJBQWlCRCxDQUFDO0lBQzlCLE9BQU9BLEVBQUVILFFBQVEsT0FBTztBQUM1QjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1LLHVCQUF1QnJDLHNEQUFnQkE7SUFDaERTLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJRTtRQUNKLElBQUksT0FBT0YsV0FBVyxVQUFVO1lBQzVCRSxhQUFhO2dCQUNUQyxTQUFTSDtnQkFDVEgsWUFBWSxFQUFFO2dCQUNkQyxvQkFBb0IsRUFBRTtnQkFDdEI4QixrQkFBa0IsRUFBRTtZQUN4QjtRQUNKLE9BQ0ssSUFBSTVCLE9BQU80QixnQkFBZ0IsS0FBS3BCLFdBQVc7WUFDNUNOLGFBQWE7Z0JBQ1QsR0FBR0YsTUFBTTtnQkFDVEgsWUFBWUcsT0FBT0gsVUFBVSxJQUFJLEVBQUU7Z0JBQ25DQyxvQkFBb0IsRUFBRTtnQkFDdEI4QixrQkFBa0IsRUFBRTtnQkFDcEJSLGdCQUFnQnBCLE9BQU9vQixjQUFjLEtBQUtaLFlBQ3BDUixPQUFPb0IsY0FBYyxHQUNyQlo7WUFDVjtRQUNKLE9BQ0s7WUFDRCxNQUFNcUIsdUJBQXVCN0IsT0FBTzRCLGdCQUFnQixDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0M7Z0JBQzlELHFEQUFxRDtnQkFDckQscURBQXFEO2dCQUNyRCxNQUFNQyxVQUFVRCxNQUFNRSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUVGLE1BQU1HLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQzFESixHQUFHLENBQUNFLFFBQVEsR0FBR0YsR0FBRyxDQUFDRSxRQUFRLElBQUksRUFBRTtnQkFDakNGLEdBQUcsQ0FBQ0UsUUFBUSxDQUFDRyxJQUFJLENBQUNKO2dCQUNsQixPQUFPRDtZQUNYLEdBQUcsQ0FBQztZQUNKLE1BQU16QixZQUFZLEVBQUU7WUFDcEIsTUFBTU0sbUJBQW1CLEVBQUU7WUFDM0IsS0FBSyxNQUFNLENBQUNzQixJQUFJRyxPQUFPLElBQUl2QixPQUFPd0IsT0FBTyxDQUFDVCxzQkFBdUI7Z0JBQzdELElBQUlVLGFBQWEsQ0FBQztnQkFDbEIsTUFBTUMsT0FBT0gsTUFBTSxDQUFDLEVBQUUsRUFBRUcsUUFBUTtnQkFDaEMsTUFBTUMsYUFBYUosT0FBT0ssR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVDLElBQUksSUFBSSxJQUFJakMsSUFBSSxDQUFDO2dCQUN4RCxNQUFNa0MsVUFBVUosV0FBV2xDLE1BQU0sR0FBR2tDLGFBQWE7Z0JBQ2pELHNGQUFzRjtnQkFDdEYsTUFBTUssYUFBYVQsTUFBTSxDQUFDLEVBQUUsRUFBRUgsTUFBTUE7Z0JBQ3BDLElBQUk7b0JBQ0FLLGFBQWFuRCxnRUFBZ0JBLENBQUN5RDtvQkFDOUIsSUFBSU4sZUFBZSxRQUNmLE9BQU9BLGVBQWUsWUFDdEJRLE1BQU1DLE9BQU8sQ0FBQ1QsYUFBYTt3QkFDM0IsTUFBTSxJQUFJVSxNQUFNO29CQUNwQjtvQkFDQTNDLFVBQVU4QixJQUFJLENBQUM7d0JBQ1hJO3dCQUNBSSxNQUFNTDt3QkFDTkwsSUFBSVk7d0JBQ0pJLE1BQU07b0JBQ1Y7Z0JBQ0osRUFDQSxPQUFPckMsR0FBRztvQkFDTkQsaUJBQWlCd0IsSUFBSSxDQUFDO3dCQUNsQkk7d0JBQ0FJLE1BQU1DO3dCQUNOWCxJQUFJWTt3QkFDSkssT0FBTzt3QkFDUEQsTUFBTTtvQkFDVjtnQkFDSjtZQUNKO1lBQ0FoRCxhQUFhO2dCQUNULEdBQUdGLE1BQU07Z0JBQ1RILFlBQVlTO2dCQUNaUixvQkFBb0JjO2dCQUNwQlEsZ0JBQWdCcEIsT0FBT29CLGNBQWMsS0FBS1osWUFDcENSLE9BQU9vQixjQUFjLEdBQ3JCWjtZQUNWO1FBQ0o7UUFDQSx1RUFBdUU7UUFDdkUsaUVBQWlFO1FBQ2pFLEtBQUssQ0FBQ047UUFDTixnRkFBZ0Y7UUFDaEYsOEVBQThFO1FBQzlFLG9CQUFvQjtRQUNwQlksT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjO1lBQ3RDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEVBQUU7UUFDYjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHNCQUFzQjtZQUM5Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxFQUFFO1FBQ2I7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxvQkFBb0I7WUFDNUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sRUFBRTtRQUNiO1FBQ0E7O1NBRUMsR0FDREwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0I7WUFDMUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1MsZ0JBQWdCLEdBQ2pCMUIsV0FBVzBCLGdCQUFnQixJQUFJLElBQUksQ0FBQ0EsZ0JBQWdCO1FBQ3hELElBQUksQ0FBQy9CLFVBQVUsR0FBR0ssV0FBV0wsVUFBVSxJQUFJLElBQUksQ0FBQ0EsVUFBVTtRQUMxRCxJQUFJLENBQUNDLGtCQUFrQixHQUNuQkksV0FBV0osa0JBQWtCLElBQUksSUFBSSxDQUFDQSxrQkFBa0I7UUFDNUQsSUFBSSxDQUFDc0IsY0FBYyxHQUFHbEIsV0FBV2tCLGNBQWM7SUFDbkQ7SUFDQSxJQUFJeEIsYUFBYTtRQUNiLCtDQUErQztRQUMvQyxPQUFPO1lBQ0gsR0FBRyxLQUFLLENBQUNBLFVBQVU7WUFDbkJDLFlBQVk7WUFDWkMsb0JBQW9CO1lBQ3BCOEIsa0JBQWtCO1FBQ3RCO0lBQ0o7SUFDQSxPQUFPUCxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQSxJQUFJQyxtQkFBbUI7UUFDbkIsT0FBTztZQUNILEdBQUcsS0FBSyxDQUFDQSxnQkFBZ0I7WUFDekIxQixZQUFZLElBQUksQ0FBQ0EsVUFBVTtZQUMzQitCLGtCQUFrQixJQUFJLENBQUNBLGdCQUFnQjtZQUN2QzlCLG9CQUFvQixJQUFJLENBQUNBLGtCQUFrQjtZQUMzQ3NCLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7UUFDdkM7SUFDSjtJQUNBZ0MsT0FBT3BCLEtBQUssRUFBRTtRQUNWLE1BQU1xQixpQkFBaUI7WUFDbkJsRCxTQUFTWixzREFBWUEsQ0FBQyxJQUFJLENBQUNZLE9BQU8sRUFBRTZCLE1BQU03QixPQUFPO1lBQ2pEQyxtQkFBbUJaLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1ksaUJBQWlCLEVBQUU0QixNQUFNNUIsaUJBQWlCO1lBQzlFa0QsbUJBQW1COUQscURBQVdBLENBQUMsSUFBSSxDQUFDOEQsaUJBQWlCLEVBQUV0QixNQUFNc0IsaUJBQWlCO1lBQzlFMUIsa0JBQWtCLEVBQUU7WUFDcEJNLElBQUksSUFBSSxDQUFDQSxFQUFFLElBQUlGLE1BQU1FLEVBQUU7UUFDM0I7UUFDQSxJQUFJLElBQUksQ0FBQ04sZ0JBQWdCLEtBQUtwQixhQUMxQndCLE1BQU1KLGdCQUFnQixLQUFLcEIsV0FBVztZQUN0QyxNQUFNSCxlQUFlWixxREFBV0EsQ0FBQyxJQUFJLENBQUNtQyxnQkFBZ0IsRUFBRUksTUFBTUosZ0JBQWdCO1lBQzlFLElBQUl2QixpQkFBaUJHLGFBQWFILGFBQWFFLE1BQU0sR0FBRyxHQUFHO2dCQUN2RDhDLGVBQWV6QixnQkFBZ0IsR0FBR3ZCO1lBQ3RDO1FBQ0o7UUFDQSxJQUFJLElBQUksQ0FBQ2UsY0FBYyxLQUFLWixhQUN4QndCLE1BQU1aLGNBQWMsS0FBS1osV0FBVztZQUNwQyxNQUFNK0Msb0JBQW9CO2dCQUN0QixHQUFJLENBQUMsSUFBSSxDQUFDbkMsY0FBYyxFQUFFb0MscUJBQXFCQyxVQUFVakQsYUFDckR3QixNQUFNWixjQUFjLEVBQUVvQyxxQkFBcUJDLFVBQVVqRCxTQUFRLEtBQU07b0JBQ25FaUQsT0FBTyxDQUFDLElBQUksQ0FBQ3JDLGNBQWMsRUFBRW9DLHFCQUFxQkMsU0FBUyxLQUN0RHpCLENBQUFBLE1BQU1aLGNBQWMsRUFBRW9DLHFCQUFxQkMsU0FBUztnQkFDN0QsQ0FBQztnQkFDRCxHQUFJLENBQUMsSUFBSSxDQUFDckMsY0FBYyxFQUFFb0MscUJBQXFCRSxlQUMzQ2xELGFBQ0F3QixNQUFNWixjQUFjLEVBQUVvQyxxQkFBcUJFLGVBQ3ZDbEQsU0FBUSxLQUFNO29CQUNsQmtELFlBQVksQ0FBQyxJQUFJLENBQUN0QyxjQUFjLEVBQUVvQyxxQkFBcUJFLGNBQWMsS0FDaEUxQixDQUFBQSxNQUFNWixjQUFjLEVBQUVvQyxxQkFBcUJFLGNBQWM7Z0JBQ2xFLENBQUM7Z0JBQ0QsR0FBSSxDQUFDLElBQUksQ0FBQ3RDLGNBQWMsRUFBRW9DLHFCQUFxQkcsbUJBQzNDbkQsYUFDQXdCLE1BQU1aLGNBQWMsRUFBRW9DLHFCQUFxQkcsbUJBQ3ZDbkQsU0FBUSxLQUFNO29CQUNsQm1ELGdCQUFnQixDQUFDLElBQUksQ0FBQ3ZDLGNBQWMsRUFBRW9DLHFCQUFxQkcsa0JBQWtCLEtBQ3hFM0IsQ0FBQUEsTUFBTVosY0FBYyxFQUFFb0MscUJBQXFCRyxrQkFBa0I7Z0JBQ3RFLENBQUM7WUFDTDtZQUNBLE1BQU1DLHFCQUFxQjtnQkFDdkIsR0FBSSxDQUFDLElBQUksQ0FBQ3hDLGNBQWMsRUFBRXlDLHNCQUFzQkosVUFBVWpELGFBQ3REd0IsTUFBTVosY0FBYyxFQUFFeUMsc0JBQXNCSixVQUFVakQsU0FBUSxLQUFNO29CQUNwRWlELE9BQU8sQ0FBQyxJQUFJLENBQUNyQyxjQUFjLEVBQUV5QyxzQkFBc0JKLFNBQVMsS0FDdkR6QixDQUFBQSxNQUFNWixjQUFjLEVBQUV5QyxzQkFBc0JKLFNBQVM7Z0JBQzlELENBQUM7Z0JBQ0QsR0FBSSxDQUFDLElBQUksQ0FBQ3JDLGNBQWMsRUFBRXlDLHNCQUFzQkMsY0FDNUN0RCxhQUNBd0IsTUFBTVosY0FBYyxFQUFFeUMsc0JBQXNCQyxjQUN4Q3RELFNBQVEsS0FBTTtvQkFDbEJzRCxXQUFXLENBQUMsSUFBSSxDQUFDMUMsY0FBYyxFQUFFeUMsc0JBQXNCQyxhQUFhLEtBQy9EOUIsQ0FBQUEsTUFBTVosY0FBYyxFQUFFeUMsc0JBQXNCQyxhQUFhO2dCQUNsRSxDQUFDO1lBQ0w7WUFDQSxNQUFNQyxPQUFPLElBQUksQ0FBQzNDLGNBQWMsSUFBSTtnQkFDaEM0QyxjQUFjO2dCQUNkQyxlQUFlO2dCQUNmQyxjQUFjO1lBQ2xCO1lBQ0EsTUFBTUMsUUFBUW5DLE1BQU1aLGNBQWMsSUFBSTtnQkFDbEM0QyxjQUFjO2dCQUNkQyxlQUFlO2dCQUNmQyxjQUFjO1lBQ2xCO1lBQ0EsTUFBTTlDLGlCQUFpQjtnQkFDbkI0QyxjQUFjRCxLQUFLQyxZQUFZLEdBQUdHLE1BQU1ILFlBQVk7Z0JBQ3BEQyxlQUFlRixLQUFLRSxhQUFhLEdBQUdFLE1BQU1GLGFBQWE7Z0JBQ3ZEQyxjQUFjSCxLQUFLRyxZQUFZLEdBQUdDLE1BQU1ELFlBQVk7Z0JBQ3BELHdGQUF3RjtnQkFDeEYsbUNBQW1DO2dCQUNuQyxHQUFJcEQsT0FBT3NELElBQUksQ0FBQ2IsbUJBQW1CaEQsTUFBTSxHQUFHLEtBQUs7b0JBQzdDaUQscUJBQXFCRDtnQkFDekIsQ0FBQztnQkFDRCxHQUFJekMsT0FBT3NELElBQUksQ0FBQ1Isb0JBQW9CckQsTUFBTSxHQUFHLEtBQUs7b0JBQzlDc0Qsc0JBQXNCRDtnQkFDMUIsQ0FBQztZQUNMO1lBQ0FQLGVBQWVqQyxjQUFjLEdBQUdBO1FBQ3BDO1FBQ0EsT0FBTyxJQUFJTyxlQUFlMEI7SUFDOUI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9haS5qcz85Y2FlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlUGFydGlhbEpzb24gfSBmcm9tIFwiLi4vdXRpbHMvanNvbi5qc1wiO1xuaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlQ2h1bmssIG1lcmdlQ29udGVudCwgX21lcmdlRGljdHMsIF9tZXJnZUxpc3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRUb29sQ2FsbFBhcnNlciwgfSBmcm9tIFwiLi90b29sLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gQUkgbWVzc2FnZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEFJTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgICBnZXQgbGNfYWxpYXNlcygpIHtcbiAgICAgICAgLy8gZXhjbHVkZSBzbmFrZSBjYXNlIGNvbnZlcnNpb24gdG8gcGFzY2FsIGNhc2VcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLmxjX2FsaWFzZXMsXG4gICAgICAgICAgICB0b29sX2NhbGxzOiBcInRvb2xfY2FsbHNcIixcbiAgICAgICAgICAgIGludmFsaWRfdG9vbF9jYWxsczogXCJpbnZhbGlkX3Rvb2xfY2FsbHNcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCBcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBrd2FyZ3MpIHtcbiAgICAgICAgbGV0IGluaXRQYXJhbXM7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpbml0UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGZpZWxkcyxcbiAgICAgICAgICAgICAgICB0b29sX2NhbGxzOiBbXSxcbiAgICAgICAgICAgICAgICBpbnZhbGlkX3Rvb2xfY2FsbHM6IFtdLFxuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiBrd2FyZ3MgPz8ge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5pdFBhcmFtcyA9IGZpZWxkcztcbiAgICAgICAgICAgIGNvbnN0IHJhd1Rvb2xDYWxscyA9IGluaXRQYXJhbXMuYWRkaXRpb25hbF9rd2FyZ3M/LnRvb2xfY2FsbHM7XG4gICAgICAgICAgICBjb25zdCB0b29sQ2FsbHMgPSBpbml0UGFyYW1zLnRvb2xfY2FsbHM7XG4gICAgICAgICAgICBpZiAoIShyYXdUb29sQ2FsbHMgPT0gbnVsbCkgJiZcbiAgICAgICAgICAgICAgICByYXdUb29sQ2FsbHMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICh0b29sQ2FsbHMgPT09IHVuZGVmaW5lZCB8fCB0b29sQ2FsbHMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihbXG4gICAgICAgICAgICAgICAgICAgIFwiTmV3IExhbmdDaGFpbiBwYWNrYWdlcyBhcmUgYXZhaWxhYmxlIHRoYXQgbW9yZSBlZmZpY2llbnRseSBoYW5kbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0b29sIGNhbGxpbmcuXFxuXFxuUGxlYXNlIHVwZ3JhZGUgeW91ciBwYWNrYWdlcyB0byB2ZXJzaW9ucyB0aGF0IHNldFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm1lc3NhZ2UgdG9vbCBjYWxscy4gZS5nLiwgYHlhcm4gYWRkIEBsYW5nY2hhaW4vYW50aHJvcGljYCxcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ5YXJuIGFkZCBAbGFuZ2NoYWluL29wZW5haWAsIGV0Yy5cIixcbiAgICAgICAgICAgICAgICBdLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmF3VG9vbENhbGxzID09IG51bGwpICYmIHRvb2xDYWxscyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0b29sQ2FsbHMsIGludmFsaWRUb29sQ2FsbHNdID0gZGVmYXVsdFRvb2xDYWxsUGFyc2VyKHJhd1Rvb2xDYWxscyk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRQYXJhbXMudG9vbF9jYWxscyA9IHRvb2xDYWxscyA/PyBbXTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFBhcmFtcy5pbnZhbGlkX3Rvb2xfY2FsbHMgPSBpbnZhbGlkVG9vbENhbGxzID8/IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFBhcmFtcy50b29sX2NhbGxzID0gaW5pdFBhcmFtcy50b29sX2NhbGxzID8/IFtdO1xuICAgICAgICAgICAgICAgICAgICBpbml0UGFyYW1zLmludmFsaWRfdG9vbF9jYWxscyA9IGluaXRQYXJhbXMuaW52YWxpZF90b29sX2NhbGxzID8/IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiBwYXJzaW5nIGZhaWxzXG4gICAgICAgICAgICAgICAgaW5pdFBhcmFtcy50b29sX2NhbGxzID0gW107XG4gICAgICAgICAgICAgICAgaW5pdFBhcmFtcy5pbnZhbGlkX3Rvb2xfY2FsbHMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTYWRseSwgVHlwZVNjcmlwdCBvbmx5IGFsbG93cyBzdXBlcigpIGNhbGxzIGF0IHJvb3QgaWYgdGhlIGNsYXNzIGhhc1xuICAgICAgICAvLyBwcm9wZXJ0aWVzIHdpdGggaW5pdGlhbGl6ZXJzLCBzbyB3ZSBoYXZlIHRvIGNoZWNrIHR5cGVzIHR3aWNlLlxuICAgICAgICBzdXBlcihpbml0UGFyYW1zKTtcbiAgICAgICAgLy8gVGhlc2UgYXJlIHR5cGVkIGFzIG9wdGlvbmFsIHRvIGF2b2lkIGJyZWFraW5nIGNoYW5nZXMgYW5kIGFsbG93IGZvciBjYXN0aW5nXG4gICAgICAgIC8vIGZyb20gQmFzZU1lc3NhZ2UuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvb2xfY2FsbHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnZhbGlkX3Rvb2xfY2FsbHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgcHJvdmlkZWQsIHRva2VuIHVzYWdlIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInVzYWdlX21ldGFkYXRhXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5pdFBhcmFtcyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy50b29sX2NhbGxzID0gaW5pdFBhcmFtcy50b29sX2NhbGxzID8/IHRoaXMudG9vbF9jYWxscztcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZF90b29sX2NhbGxzID1cbiAgICAgICAgICAgICAgICBpbml0UGFyYW1zLmludmFsaWRfdG9vbF9jYWxscyA/PyB0aGlzLmludmFsaWRfdG9vbF9jYWxscztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzYWdlX21ldGFkYXRhID0gaW5pdFBhcmFtcy51c2FnZV9tZXRhZGF0YTtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkFJTWVzc2FnZVwiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiYWlcIjtcbiAgICB9XG4gICAgZ2V0IF9wcmludGFibGVGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci5fcHJpbnRhYmxlRmllbGRzLFxuICAgICAgICAgICAgdG9vbF9jYWxsczogdGhpcy50b29sX2NhbGxzLFxuICAgICAgICAgICAgaW52YWxpZF90b29sX2NhbGxzOiB0aGlzLmludmFsaWRfdG9vbF9jYWxscyxcbiAgICAgICAgICAgIHVzYWdlX21ldGFkYXRhOiB0aGlzLnVzYWdlX21ldGFkYXRhLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FJTWVzc2FnZSh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJhaVwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQUlNZXNzYWdlQ2h1bmsoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiYWlcIjtcbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGFuIEFJIG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aFxuICogb3RoZXIgQUkgbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBBSU1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBsZXQgaW5pdFBhcmFtcztcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGluaXRQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogZmllbGRzLFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IFtdLFxuICAgICAgICAgICAgICAgIGludmFsaWRfdG9vbF9jYWxsczogW10sXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsX2NodW5rczogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZpZWxkcy50b29sX2NhbGxfY2h1bmtzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluaXRQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLi4uZmllbGRzLFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IGZpZWxkcy50b29sX2NhbGxzID8/IFtdLFxuICAgICAgICAgICAgICAgIGludmFsaWRfdG9vbF9jYWxsczogW10sXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsX2NodW5rczogW10sXG4gICAgICAgICAgICAgICAgdXNhZ2VfbWV0YWRhdGE6IGZpZWxkcy51c2FnZV9tZXRhZGF0YSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gZmllbGRzLnVzYWdlX21ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwZWRUb29sQ2FsbENodW5rID0gZmllbGRzLnRvb2xfY2FsbF9jaHVua3MucmVkdWNlKChhY2MsIGNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQXNzaWduIGEgZmFsbGJhY2sgSUQgaWYgdGhlIGNodW5rIGRvZXNuJ3QgaGF2ZSBvbmVcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2l0aCB0b29scyB0aGF0IGhhdmUgZW1wdHkgc2NoZW1hc1xuICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rSWQgPSBjaHVuay5pZCB8fCBgZmFsbGJhY2stJHtjaHVuay5pbmRleCB8fCAwfWA7XG4gICAgICAgICAgICAgICAgYWNjW2NodW5rSWRdID0gYWNjW2NodW5rSWRdID8/IFtdO1xuICAgICAgICAgICAgICAgIGFjY1tjaHVua0lkXS5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgICAgY29uc3QgdG9vbENhbGxzID0gW107XG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkVG9vbENhbGxzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpZCwgY2h1bmtzXSBvZiBPYmplY3QuZW50cmllcyhncm91cGVkVG9vbENhbGxDaHVuaykpIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyc2VkQXJncyA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjaHVua3NbMF0/Lm5hbWUgPz8gXCJcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBqb2luZWRBcmdzID0gY2h1bmtzLm1hcCgoYykgPT4gYy5hcmdzIHx8IFwiXCIpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJnc1N0ciA9IGpvaW5lZEFyZ3MubGVuZ3RoID8gam9pbmVkQXJncyA6IFwie31cIjtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIG9yaWdpbmFsIElEIGZyb20gdGhlIGZpcnN0IGNodW5rIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHVzZSB0aGUgZ3JvdXBlZCBJRFxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsSWQgPSBjaHVua3NbMF0/LmlkIHx8IGlkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSBwYXJzZVBhcnRpYWxKc29uKGFyZ3NTdHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkQXJncyA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHBhcnNlZEFyZ3MgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocGFyc2VkQXJncykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCB0b29sIGNhbGwgY2h1bmsgYXJncy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IHBhcnNlZEFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogb3JpZ2luYWxJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbF9jYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkVG9vbENhbGxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3NTdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogb3JpZ2luYWxJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBcIk1hbGZvcm1lZCBhcmdzLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnZhbGlkX3Rvb2xfY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbml0UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIC4uLmZpZWxkcyxcbiAgICAgICAgICAgICAgICB0b29sX2NhbGxzOiB0b29sQ2FsbHMsXG4gICAgICAgICAgICAgICAgaW52YWxpZF90b29sX2NhbGxzOiBpbnZhbGlkVG9vbENhbGxzLFxuICAgICAgICAgICAgICAgIHVzYWdlX21ldGFkYXRhOiBmaWVsZHMudXNhZ2VfbWV0YWRhdGEgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IGZpZWxkcy51c2FnZV9tZXRhZGF0YVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2FkbHksIFR5cGVTY3JpcHQgb25seSBhbGxvd3Mgc3VwZXIoKSBjYWxscyBhdCByb290IGlmIHRoZSBjbGFzcyBoYXNcbiAgICAgICAgLy8gcHJvcGVydGllcyB3aXRoIGluaXRpYWxpemVycywgc28gd2UgaGF2ZSB0byBjaGVjayB0eXBlcyB0d2ljZS5cbiAgICAgICAgc3VwZXIoaW5pdFBhcmFtcyk7XG4gICAgICAgIC8vIE11c3QgcmVkZWNsYXJlIHRvb2wgY2FsbCBmaWVsZHMgc2luY2UgdGhlcmUgaXMgbm8gbXVsdGlwbGUgaW5oZXJpdGFuY2UgaW4gSlMuXG4gICAgICAgIC8vIFRoZXNlIGFyZSB0eXBlZCBhcyBvcHRpb25hbCB0byBhdm9pZCBicmVha2luZyBjaGFuZ2VzIGFuZCBhbGxvdyBmb3IgY2FzdGluZ1xuICAgICAgICAvLyBmcm9tIEJhc2VNZXNzYWdlLlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b29sX2NhbGxzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW52YWxpZF90b29sX2NhbGxzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidG9vbF9jYWxsX2NodW5rc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBwcm92aWRlZCwgdG9rZW4gdXNhZ2UgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXNzYWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidXNhZ2VfbWV0YWRhdGFcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b29sX2NhbGxfY2h1bmtzID1cbiAgICAgICAgICAgIGluaXRQYXJhbXMudG9vbF9jYWxsX2NodW5rcyA/PyB0aGlzLnRvb2xfY2FsbF9jaHVua3M7XG4gICAgICAgIHRoaXMudG9vbF9jYWxscyA9IGluaXRQYXJhbXMudG9vbF9jYWxscyA/PyB0aGlzLnRvb2xfY2FsbHM7XG4gICAgICAgIHRoaXMuaW52YWxpZF90b29sX2NhbGxzID1cbiAgICAgICAgICAgIGluaXRQYXJhbXMuaW52YWxpZF90b29sX2NhbGxzID8/IHRoaXMuaW52YWxpZF90b29sX2NhbGxzO1xuICAgICAgICB0aGlzLnVzYWdlX21ldGFkYXRhID0gaW5pdFBhcmFtcy51c2FnZV9tZXRhZGF0YTtcbiAgICB9XG4gICAgZ2V0IGxjX2FsaWFzZXMoKSB7XG4gICAgICAgIC8vIGV4Y2x1ZGUgc25ha2UgY2FzZSBjb252ZXJzaW9uIHRvIHBhc2NhbCBjYXNlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci5sY19hbGlhc2VzLFxuICAgICAgICAgICAgdG9vbF9jYWxsczogXCJ0b29sX2NhbGxzXCIsXG4gICAgICAgICAgICBpbnZhbGlkX3Rvb2xfY2FsbHM6IFwiaW52YWxpZF90b29sX2NhbGxzXCIsXG4gICAgICAgICAgICB0b29sX2NhbGxfY2h1bmtzOiBcInRvb2xfY2FsbF9jaHVua3NcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkFJTWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJhaVwiO1xuICAgIH1cbiAgICBnZXQgX3ByaW50YWJsZUZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLl9wcmludGFibGVGaWVsZHMsXG4gICAgICAgICAgICB0b29sX2NhbGxzOiB0aGlzLnRvb2xfY2FsbHMsXG4gICAgICAgICAgICB0b29sX2NhbGxfY2h1bmtzOiB0aGlzLnRvb2xfY2FsbF9jaHVua3MsXG4gICAgICAgICAgICBpbnZhbGlkX3Rvb2xfY2FsbHM6IHRoaXMuaW52YWxpZF90b29sX2NhbGxzLFxuICAgICAgICAgICAgdXNhZ2VfbWV0YWRhdGE6IHRoaXMudXNhZ2VfbWV0YWRhdGEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICBjb25zdCBjb21iaW5lZEZpZWxkcyA9IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgICAgICB0b29sX2NhbGxfY2h1bmtzOiBbXSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkID8/IGNodW5rLmlkLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy50b29sX2NhbGxfY2h1bmtzICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGNodW5rLnRvb2xfY2FsbF9jaHVua3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmF3VG9vbENhbGxzID0gX21lcmdlTGlzdHModGhpcy50b29sX2NhbGxfY2h1bmtzLCBjaHVuay50b29sX2NhbGxfY2h1bmtzKTtcbiAgICAgICAgICAgIGlmIChyYXdUb29sQ2FsbHMgIT09IHVuZGVmaW5lZCAmJiByYXdUb29sQ2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbWJpbmVkRmllbGRzLnRvb2xfY2FsbF9jaHVua3MgPSByYXdUb29sQ2FsbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudXNhZ2VfbWV0YWRhdGEgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgY2h1bmsudXNhZ2VfbWV0YWRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRUb2tlbkRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgLi4uKCh0aGlzLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5hdWRpbyAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIGNodW5rLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5hdWRpbyAhPT0gdW5kZWZpbmVkKSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiAodGhpcy51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uYXVkaW8gPz8gMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNodW5rLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5hdWRpbyA/PyAwKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4oKHRoaXMudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmNhY2hlX3JlYWQgIT09XG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICBjaHVuay51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uY2FjaGVfcmVhZCAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCkgJiYge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZV9yZWFkOiAodGhpcy51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uY2FjaGVfcmVhZCA/PyAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2h1bmsudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmNhY2hlX3JlYWQgPz8gMCksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uKCh0aGlzLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5jYWNoZV9jcmVhdGlvbiAhPT1cbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIGNodW5rLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5jYWNoZV9jcmVhdGlvbiAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCkgJiYge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZV9jcmVhdGlvbjogKHRoaXMudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmNhY2hlX2NyZWF0aW9uID8/IDApICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaHVuay51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uY2FjaGVfY3JlYXRpb24gPz8gMCksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0VG9rZW5EZXRhaWxzID0ge1xuICAgICAgICAgICAgICAgIC4uLigodGhpcy51c2FnZV9tZXRhZGF0YT8ub3V0cHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgY2h1bmsudXNhZ2VfbWV0YWRhdGE/Lm91dHB1dF90b2tlbl9kZXRhaWxzPy5hdWRpbyAhPT0gdW5kZWZpbmVkKSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiAodGhpcy51c2FnZV9tZXRhZGF0YT8ub3V0cHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvID8/IDApICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaHVuay51c2FnZV9tZXRhZGF0YT8ub3V0cHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvID8/IDApLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLigodGhpcy51c2FnZV9tZXRhZGF0YT8ub3V0cHV0X3Rva2VuX2RldGFpbHM/LnJlYXNvbmluZyAhPT1cbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIGNodW5rLnVzYWdlX21ldGFkYXRhPy5vdXRwdXRfdG9rZW5fZGV0YWlscz8ucmVhc29uaW5nICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZzogKHRoaXMudXNhZ2VfbWV0YWRhdGE/Lm91dHB1dF90b2tlbl9kZXRhaWxzPy5yZWFzb25pbmcgPz8gMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNodW5rLnVzYWdlX21ldGFkYXRhPy5vdXRwdXRfdG9rZW5fZGV0YWlscz8ucmVhc29uaW5nID8/IDApLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnVzYWdlX21ldGFkYXRhID8/IHtcbiAgICAgICAgICAgICAgICBpbnB1dF90b2tlbnM6IDAsXG4gICAgICAgICAgICAgICAgb3V0cHV0X3Rva2VuczogMCxcbiAgICAgICAgICAgICAgICB0b3RhbF90b2tlbnM6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBjaHVuay51c2FnZV9tZXRhZGF0YSA/PyB7XG4gICAgICAgICAgICAgICAgaW5wdXRfdG9rZW5zOiAwLFxuICAgICAgICAgICAgICAgIG91dHB1dF90b2tlbnM6IDAsXG4gICAgICAgICAgICAgICAgdG90YWxfdG9rZW5zOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHVzYWdlX21ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgIGlucHV0X3Rva2VuczogbGVmdC5pbnB1dF90b2tlbnMgKyByaWdodC5pbnB1dF90b2tlbnMsXG4gICAgICAgICAgICAgICAgb3V0cHV0X3Rva2VuczogbGVmdC5vdXRwdXRfdG9rZW5zICsgcmlnaHQub3V0cHV0X3Rva2VucyxcbiAgICAgICAgICAgICAgICB0b3RhbF90b2tlbnM6IGxlZnQudG90YWxfdG9rZW5zICsgcmlnaHQudG90YWxfdG9rZW5zLFxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBpbmNsdWRlIGBpbnB1dF90b2tlbl9kZXRhaWxzYCAvIGBvdXRwdXRfdG9rZW5fZGV0YWlsc2Aga2V5cyBpbiBjb21iaW5lZCBmaWVsZHNcbiAgICAgICAgICAgICAgICAvLyB1bmxlc3MgdGhlaXIgdmFsdWVzIGFyZSBkZWZpbmVkLlxuICAgICAgICAgICAgICAgIC4uLihPYmplY3Qua2V5cyhpbnB1dFRva2VuRGV0YWlscykubGVuZ3RoID4gMCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0X3Rva2VuX2RldGFpbHM6IGlucHV0VG9rZW5EZXRhaWxzLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLihPYmplY3Qua2V5cyhvdXRwdXRUb2tlbkRldGFpbHMpLmxlbmd0aCA+IDAgJiYge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRfdG9rZW5fZGV0YWlsczogb3V0cHV0VG9rZW5EZXRhaWxzLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbWJpbmVkRmllbGRzLnVzYWdlX21ldGFkYXRhID0gdXNhZ2VfbWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBSU1lc3NhZ2VDaHVuayhjb21iaW5lZEZpZWxkcyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbInBhcnNlUGFydGlhbEpzb24iLCJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIl9tZXJnZUxpc3RzIiwiZGVmYXVsdFRvb2xDYWxsUGFyc2VyIiwiQUlNZXNzYWdlIiwibGNfYWxpYXNlcyIsInRvb2xfY2FsbHMiLCJpbnZhbGlkX3Rvb2xfY2FsbHMiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsImt3YXJncyIsImluaXRQYXJhbXMiLCJjb250ZW50IiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJyYXdUb29sQ2FsbHMiLCJ0b29sQ2FsbHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwid2FybiIsImpvaW4iLCJpbnZhbGlkVG9vbENhbGxzIiwiZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJ1c2FnZV9tZXRhZGF0YSIsImxjX25hbWUiLCJfZ2V0VHlwZSIsIl9wcmludGFibGVGaWVsZHMiLCJpc0FJTWVzc2FnZSIsIngiLCJpc0FJTWVzc2FnZUNodW5rIiwiQUlNZXNzYWdlQ2h1bmsiLCJ0b29sX2NhbGxfY2h1bmtzIiwiZ3JvdXBlZFRvb2xDYWxsQ2h1bmsiLCJyZWR1Y2UiLCJhY2MiLCJjaHVuayIsImNodW5rSWQiLCJpZCIsImluZGV4IiwicHVzaCIsImNodW5rcyIsImVudHJpZXMiLCJwYXJzZWRBcmdzIiwibmFtZSIsImpvaW5lZEFyZ3MiLCJtYXAiLCJjIiwiYXJncyIsImFyZ3NTdHIiLCJvcmlnaW5hbElkIiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3IiLCJ0eXBlIiwiZXJyb3IiLCJjb25jYXQiLCJjb21iaW5lZEZpZWxkcyIsInJlc3BvbnNlX21ldGFkYXRhIiwiaW5wdXRUb2tlbkRldGFpbHMiLCJpbnB1dF90b2tlbl9kZXRhaWxzIiwiYXVkaW8iLCJjYWNoZV9yZWFkIiwiY2FjaGVfY3JlYXRpb24iLCJvdXRwdXRUb2tlbkRldGFpbHMiLCJvdXRwdXRfdG9rZW5fZGV0YWlscyIsInJlYXNvbmluZyIsImxlZnQiLCJpbnB1dF90b2tlbnMiLCJvdXRwdXRfdG9rZW5zIiwidG90YWxfdG9rZW5zIiwicmlnaHQiLCJrZXlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/base.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/base.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMessage: () => (/* binding */ BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* binding */ BaseMessageChunk),\n/* harmony export */   _isMessageFieldWithRole: () => (/* binding */ _isMessageFieldWithRole),\n/* harmony export */   _mergeDicts: () => (/* binding */ _mergeDicts),\n/* harmony export */   _mergeLists: () => (/* binding */ _mergeLists),\n/* harmony export */   _mergeObj: () => (/* binding */ _mergeObj),\n/* harmony export */   _mergeStatus: () => (/* binding */ _mergeStatus),\n/* harmony export */   isBaseMessage: () => (/* binding */ isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* binding */ isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* binding */ isOpenAIToolCallArray),\n/* harmony export */   mergeContent: () => (/* binding */ mergeContent)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _content_blocks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content_blocks.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.js\");\n\n\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (firstContent === \"\") {\n            return secondContent;\n        }\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        } else if (Array.isArray(secondContent) && secondContent.some((c)=>(0,_content_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isDataContentBlock)(c))) {\n            return [\n                {\n                    type: \"text\",\n                    source_type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        } else {\n            return [\n                {\n                    type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        }\n    // If both are arrays\n    } else if (Array.isArray(secondContent)) {\n        return _mergeLists(firstContent, secondContent) ?? [\n            ...firstContent,\n            ...secondContent\n        ];\n    } else {\n        if (secondContent === \"\") {\n            return firstContent;\n        } else if (Array.isArray(firstContent) && firstContent.some((c)=>(0,_content_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isDataContentBlock)(c))) {\n            return [\n                ...firstContent,\n                {\n                    type: \"file\",\n                    source_type: \"text\",\n                    text: secondContent\n                }\n            ];\n        } else {\n            return [\n                ...firstContent,\n                {\n                    type: \"text\",\n                    text: secondContent\n                }\n            ];\n        }\n    }\n}\n/**\n * 'Merge' two statuses. If either value passed is 'error', it will return 'error'. Else\n * it will return 'success'.\n *\n * @param {\"success\" | \"error\" | undefined} left The existing value to 'merge' with the new value.\n * @param {\"success\" | \"error\" | undefined} right The new value to 'merge' with the existing value\n * @returns {\"success\" | \"error\"} The 'merged' value.\n */ function _mergeStatus(left, right) {\n    if (left === \"error\" || right === \"error\") {\n        return \"error\";\n    }\n    return \"success\";\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stringifyWithDepthLimit(obj, depthLimit) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function helper(obj, currentDepth) {\n        if (typeof obj !== \"object\" || obj === null || obj === undefined) {\n            return obj;\n        }\n        if (currentDepth >= depthLimit) {\n            if (Array.isArray(obj)) {\n                return \"[Array]\";\n            }\n            return \"[Object]\";\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((item)=>helper(item, currentDepth + 1));\n        }\n        const result = {};\n        for (const key of Object.keys(obj)){\n            result[key] = helper(obj[key], currentDepth + 1);\n        }\n        return result;\n    }\n    return JSON.stringify(helper(obj, 0), null, 2);\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */ class BaseMessage extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\"\n        };\n    }\n    /**\n     * Get text content of the message.\n     */ get text() {\n        if (typeof this.content === \"string\") {\n            return this.content;\n        }\n        if (!Array.isArray(this.content)) return \"\";\n        return this.content.map((c)=>{\n            if (typeof c === \"string\") return c;\n            if (c.type === \"text\") return c.text;\n            return \"\";\n        }).join(\"\");\n    }\n    /** The type of the message. */ getType() {\n        return this._getType();\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {}\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"messages\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */ Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */ Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts, model name. */ Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * An optional unique identifier for the message. This should ideally be\n         * provided by the provider/model which created the message.\n         */ Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n        this.id = fields.id;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON().kwargs\n        };\n    }\n    static lc_name() {\n        return \"BaseMessage\";\n    }\n    // Can't be protected for silly reasons\n    get _printableFields() {\n        return {\n            id: this.id,\n            content: this.content,\n            name: this.name,\n            additional_kwargs: this.additional_kwargs,\n            response_metadata: this.response_metadata\n        };\n    }\n    // this private method is used to update the ID for the runtime\n    // value as well as in lc_kwargs for serialisation\n    _updateId(value) {\n        this.id = value;\n        // lc_attributes wouldn't work here, because jest compares the\n        // whole object\n        this.lc_kwargs.id = value;\n    }\n    get [Symbol.toStringTag]() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.constructor.lc_name();\n    }\n    // Override the default behavior of console.log\n    [Symbol.for(\"nodejs.util.inspect.custom\")](depth) {\n        if (depth === null) {\n            return this;\n        }\n        const printable = stringifyWithDepthLimit(this._printableFields, Math.max(4, depth));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return `${this.constructor.lc_name()} ${printable}`;\n    }\n}\nfunction isOpenAIToolCallArray(value) {\n    return Array.isArray(value) && value.every((v)=>typeof v.index === \"number\");\n}\nfunction _mergeDicts(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nright) {\n    const merged = {\n        ...left\n    };\n    for (const [key, value] of Object.entries(right)){\n        if (merged[key] == null) {\n            merged[key] = value;\n        } else if (value == null) {\n            continue;\n        } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        } else if (typeof merged[key] === \"string\") {\n            if (key === \"type\") {\n                continue;\n            }\n            merged[key] += value;\n        } else if (typeof merged[key] === \"object\" && !Array.isArray(merged[key])) {\n            merged[key] = _mergeDicts(merged[key], value);\n        } else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        } else if (merged[key] === value) {\n            continue;\n        } else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    } else if (left === undefined || right === undefined) {\n        return left || right;\n    } else {\n        const merged = [\n            ...left\n        ];\n        for (const item of right){\n            if (typeof item === \"object\" && \"index\" in item && typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem)=>leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                } else {\n                    merged.push(item);\n                }\n            } else if (typeof item === \"object\" && \"text\" in item && item.text === \"\") {\n                continue;\n            } else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeObj(left, right) {\n    if (!left && !right) {\n        throw new Error(\"Cannot merge two undefined objects.\");\n    }\n    if (!left || !right) {\n        return left || right;\n    } else if (typeof left !== typeof right) {\n        throw new Error(`Cannot merge objects of different types.\\nLeft ${typeof left}\\nRight ${typeof right}`);\n    } else if (typeof left === \"string\" && typeof right === \"string\") {\n        return left + right;\n    } else if (Array.isArray(left) && Array.isArray(right)) {\n        return _mergeLists(left, right);\n    } else if (typeof left === \"object\" && typeof right === \"object\") {\n        return _mergeDicts(left, right);\n    } else if (left === right) {\n        return left;\n    } else {\n        throw new Error(`Can not merge objects of different types.\\nLeft ${left}\\nRight ${right}`);\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */ class BaseMessageChunk extends BaseMessage {\n}\nfunction _isMessageFieldWithRole(x) {\n    return typeof x.role === \"string\";\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/chat.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/chat.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatMessage: () => (/* binding */ ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* binding */ ChatMessageChunk),\n/* harmony export */   isChatMessage: () => (/* binding */ isChatMessage),\n/* harmony export */   isChatMessageChunk: () => (/* binding */ isChatMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a chat message in a conversation.\n */ class ChatMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            role: this.role\n        };\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */ class ChatMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            role: this.role,\n            id: this.id ?? chunk.id\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            role: this.role\n        };\n    }\n}\nfunction isChatMessage(x) {\n    return x._getType() === \"generic\";\n}\nfunction isChatMessageChunk(x) {\n    return x._getType() === \"generic\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvY2hhdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLE1BQU1JLG9CQUFvQkosaURBQVdBO0lBQ3hDLE9BQU9LLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQSxPQUFPQyxvQkFBb0I7UUFDdkIsT0FBT0Y7SUFDWDtJQUNBRyxZQUFZQyxNQUFNLEVBQUVDLElBQUksQ0FBRTtRQUN0QixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtRQUNORyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1AsSUFBSSxHQUFHRCxPQUFPQyxJQUFJO0lBQzNCO0lBQ0FRLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQSxPQUFPQyxXQUFXQyxPQUFPLEVBQUU7UUFDdkIsT0FBT0EsUUFBUUYsUUFBUSxPQUFPO0lBQ2xDO0lBQ0EsSUFBSUcsbUJBQW1CO1FBQ25CLE9BQU87WUFDSCxHQUFHLEtBQUssQ0FBQ0EsZ0JBQWdCO1lBQ3pCWCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNuQjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNWSx5QkFBeUJwQixzREFBZ0JBO0lBQ2xELE9BQU9JLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUUsWUFBWUMsTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFDdEIsSUFBSSxPQUFPRCxXQUFXLFVBQVU7WUFDNUIsdUZBQXVGO1lBQ3ZGQSxTQUFTO2dCQUFFRSxTQUFTRjtnQkFBUUMsTUFBTUE7WUFBSztRQUMzQztRQUNBLEtBQUssQ0FBQ0Q7UUFDTkcsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNQLElBQUksR0FBR0QsT0FBT0MsSUFBSTtJQUMzQjtJQUNBUSxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FLLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsaUJBQWlCO1lBQ3hCWCxTQUFTUixzREFBWUEsQ0FBQyxJQUFJLENBQUNRLE9BQU8sRUFBRWEsTUFBTWIsT0FBTztZQUNqRGMsbUJBQW1CckIscURBQVdBLENBQUMsSUFBSSxDQUFDcUIsaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CdEIscURBQVdBLENBQUMsSUFBSSxDQUFDc0IsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RWhCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZpQixJQUFJLElBQUksQ0FBQ0EsRUFBRSxJQUFJSCxNQUFNRyxFQUFFO1FBQzNCO0lBQ0o7SUFDQSxJQUFJTixtQkFBbUI7UUFDbkIsT0FBTztZQUNILEdBQUcsS0FBSyxDQUFDQSxnQkFBZ0I7WUFDekJYLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQ25CO0lBQ0o7QUFDSjtBQUNPLFNBQVNrQixjQUFjQyxDQUFDO0lBQzNCLE9BQU9BLEVBQUVYLFFBQVEsT0FBTztBQUM1QjtBQUNPLFNBQVNZLG1CQUFtQkQsQ0FBQztJQUNoQyxPQUFPQSxFQUFFWCxRQUFRLE9BQU87QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvY2hhdC5qcz9jMTc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNoYXQgbWVzc2FnZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXRNZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDaGF0TWVzc2FnZVwiO1xuICAgIH1cbiAgICBzdGF0aWMgX2NoYXRNZXNzYWdlQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiBDaGF0TWVzc2FnZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCByb2xlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCByb2xlOiByb2xlIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9sZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvbGUgPSBmaWVsZHMucm9sZTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgc3RhdGljIGlzSW5zdGFuY2UobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgZ2V0IF9wcmludGFibGVGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci5fcHJpbnRhYmxlRmllbGRzLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGEgY2hhdCBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIGNoYXQgbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGF0TWVzc2FnZUNodW5rIGV4dGVuZHMgQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkNoYXRNZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCByb2xlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCByb2xlOiByb2xlIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9sZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvbGUgPSBmaWVsZHMucm9sZTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhdE1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50OiBtZXJnZUNvbnRlbnQodGhpcy5jb250ZW50LCBjaHVuay5jb250ZW50KSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiBfbWVyZ2VEaWN0cyh0aGlzLmFkZGl0aW9uYWxfa3dhcmdzLCBjaHVuay5hZGRpdGlvbmFsX2t3YXJncyksXG4gICAgICAgICAgICByZXNwb25zZV9tZXRhZGF0YTogX21lcmdlRGljdHModGhpcy5yZXNwb25zZV9tZXRhZGF0YSwgY2h1bmsucmVzcG9uc2VfbWV0YWRhdGEpLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQgPz8gY2h1bmsuaWQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgX3ByaW50YWJsZUZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLl9wcmludGFibGVGaWVsZHMsXG4gICAgICAgICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hhdE1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiZ2VuZXJpY1wiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hhdE1lc3NhZ2VDaHVuayh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJnZW5lcmljXCI7XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lc3NhZ2UiLCJCYXNlTWVzc2FnZUNodW5rIiwibWVyZ2VDb250ZW50IiwiX21lcmdlRGljdHMiLCJDaGF0TWVzc2FnZSIsImxjX25hbWUiLCJfY2hhdE1lc3NhZ2VDbGFzcyIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwicm9sZSIsImNvbnRlbnQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiX2dldFR5cGUiLCJpc0luc3RhbmNlIiwibWVzc2FnZSIsIl9wcmludGFibGVGaWVsZHMiLCJDaGF0TWVzc2FnZUNodW5rIiwiY29uY2F0IiwiY2h1bmsiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIiwiaWQiLCJpc0NoYXRNZXNzYWdlIiwieCIsImlzQ2hhdE1lc3NhZ2VDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/content_blocks.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIImageBlock: () => (/* binding */ convertToOpenAIImageBlock),\n/* harmony export */   convertToProviderContentBlock: () => (/* binding */ convertToProviderContentBlock),\n/* harmony export */   isBase64ContentBlock: () => (/* binding */ isBase64ContentBlock),\n/* harmony export */   isDataContentBlock: () => (/* binding */ isDataContentBlock),\n/* harmony export */   isIDContentBlock: () => (/* binding */ isIDContentBlock),\n/* harmony export */   isPlainTextContentBlock: () => (/* binding */ isPlainTextContentBlock),\n/* harmony export */   isURLContentBlock: () => (/* binding */ isURLContentBlock),\n/* harmony export */   parseBase64DataUrl: () => (/* binding */ parseBase64DataUrl),\n/* harmony export */   parseMimeType: () => (/* binding */ parseMimeType)\n/* harmony export */ });\nfunction isDataContentBlock(content_block) {\n    return typeof content_block === \"object\" && content_block !== null && \"type\" in content_block && typeof content_block.type === \"string\" && \"source_type\" in content_block && (content_block.source_type === \"url\" || content_block.source_type === \"base64\" || content_block.source_type === \"text\" || content_block.source_type === \"id\");\n}\nfunction isURLContentBlock(content_block) {\n    return isDataContentBlock(content_block) && content_block.source_type === \"url\" && \"url\" in content_block && typeof content_block.url === \"string\";\n}\nfunction isBase64ContentBlock(content_block) {\n    return isDataContentBlock(content_block) && content_block.source_type === \"base64\" && \"data\" in content_block && typeof content_block.data === \"string\";\n}\nfunction isPlainTextContentBlock(content_block) {\n    return isDataContentBlock(content_block) && content_block.source_type === \"text\" && \"text\" in content_block && typeof content_block.text === \"string\";\n}\nfunction isIDContentBlock(content_block) {\n    return isDataContentBlock(content_block) && content_block.source_type === \"id\" && \"id\" in content_block && typeof content_block.id === \"string\";\n}\nfunction convertToOpenAIImageBlock(content_block) {\n    if (isDataContentBlock(content_block)) {\n        if (content_block.source_type === \"url\") {\n            return {\n                type: \"image_url\",\n                image_url: {\n                    url: content_block.url\n                }\n            };\n        }\n        if (content_block.source_type === \"base64\") {\n            if (!content_block.mime_type) {\n                throw new Error(\"mime_type key is required for base64 data.\");\n            }\n            const mime_type = content_block.mime_type;\n            return {\n                type: \"image_url\",\n                image_url: {\n                    url: `data:${mime_type};base64,${content_block.data}`\n                }\n            };\n        }\n    }\n    throw new Error(\"Unsupported source type. Only 'url' and 'base64' are supported.\");\n}\n/**\n * Utility function for ChatModelProviders. Parses a mime type into a type, subtype, and parameters.\n *\n * @param mime_type - The mime type to parse.\n * @returns An object containing the type, subtype, and parameters.\n */ function parseMimeType(mime_type) {\n    const parts = mime_type.split(\";\")[0].split(\"/\");\n    if (parts.length !== 2) {\n        throw new Error(`Invalid mime type: \"${mime_type}\" - does not match type/subtype format.`);\n    }\n    const type = parts[0].trim();\n    const subtype = parts[1].trim();\n    if (type === \"\" || subtype === \"\") {\n        throw new Error(`Invalid mime type: \"${mime_type}\" - type or subtype is empty.`);\n    }\n    const parameters = {};\n    for (const parameterKvp of mime_type.split(\";\").slice(1)){\n        const parameterParts = parameterKvp.split(\"=\");\n        if (parameterParts.length !== 2) {\n            throw new Error(`Invalid parameter syntax in mime type: \"${mime_type}\".`);\n        }\n        const key = parameterParts[0].trim();\n        const value = parameterParts[1].trim();\n        if (key === \"\") {\n            throw new Error(`Invalid parameter syntax in mime type: \"${mime_type}\".`);\n        }\n        parameters[key] = value;\n    }\n    return {\n        type,\n        subtype,\n        parameters\n    };\n}\n/**\n * Utility function for ChatModelProviders. Parses a base64 data URL into a typed array or string.\n *\n * @param dataUrl - The base64 data URL to parse.\n * @param asTypedArray - Whether to return the data as a typed array.\n * @returns The parsed data and mime type, or undefined if the data URL is invalid.\n */ function parseBase64DataUrl({ dataUrl: data_url, asTypedArray = false }) {\n    const formatMatch = data_url.match(/^data:(\\w+\\/\\w+);base64,([A-Za-z0-9+/]+=*)$/);\n    let mime_type;\n    if (formatMatch) {\n        mime_type = formatMatch[1].toLowerCase();\n        const data = asTypedArray ? Uint8Array.from(atob(formatMatch[2]), (c)=>c.charCodeAt(0)) : formatMatch[2];\n        return {\n            mime_type,\n            data\n        };\n    }\n    return undefined;\n}\n/**\n * Convert from a standard data content block to a provider's proprietary data content block format.\n *\n * Don't override this method. Instead, override the more specific conversion methods and use this\n * method unmodified.\n *\n * @param block - The standard data content block to convert.\n * @returns The provider data content block.\n * @throws An error if the standard data content block type is not supported.\n */ function convertToProviderContentBlock(block, converter) {\n    if (block.type === \"text\") {\n        if (!converter.fromStandardTextBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardTextBlock\\` method.`);\n        }\n        return converter.fromStandardTextBlock(block);\n    }\n    if (block.type === \"image\") {\n        if (!converter.fromStandardImageBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardImageBlock\\` method.`);\n        }\n        return converter.fromStandardImageBlock(block);\n    }\n    if (block.type === \"audio\") {\n        if (!converter.fromStandardAudioBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardAudioBlock\\` method.`);\n        }\n        return converter.fromStandardAudioBlock(block);\n    }\n    if (block.type === \"file\") {\n        if (!converter.fromStandardFileBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardFileBlock\\` method.`);\n        }\n        return converter.fromStandardFileBlock(block);\n    }\n    throw new Error(`Unable to convert content block type '${block.type}' to provider-specific format: not recognized.`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/function.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/function.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionMessage: () => (/* binding */ FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* binding */ FunctionMessageChunk),\n/* harmony export */   isFunctionMessage: () => (/* binding */ isFunctionMessage),\n/* harmony export */   isFunctionMessageChunk: () => (/* binding */ isFunctionMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a function message in a conversation.\n */ class FunctionMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, /** @deprecated */ name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name: name\n            };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */ class FunctionMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\",\n            id: this.id ?? chunk.id\n        });\n    }\n}\nfunction isFunctionMessage(x) {\n    return x._getType() === \"function\";\n}\nfunction isFunctionMessageChunk(x) {\n    return x._getType() === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSx3QkFBd0JKLGlEQUFXQTtJQUM1QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxJQUFJLENBQUU7UUFDRixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtJQUNWO0lBQ0FHLFdBQVc7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDZCQUE2QlYsc0RBQWdCQTtJQUN0RCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FLLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixxQkFBcUI7WUFDNUJGLFNBQVNQLHNEQUFZQSxDQUFDLElBQUksQ0FBQ08sT0FBTyxFQUFFSSxNQUFNSixPQUFPO1lBQ2pESyxtQkFBbUJYLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1csaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CWixxREFBV0EsQ0FBQyxJQUFJLENBQUNZLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVQLE1BQU0sSUFBSSxDQUFDQSxJQUFJLElBQUk7WUFDbkJRLElBQUksSUFBSSxDQUFDQSxFQUFFLElBQUlILE1BQU1HLEVBQUU7UUFDM0I7SUFDSjtBQUNKO0FBQ08sU0FBU0Msa0JBQWtCQyxDQUFDO0lBQy9CLE9BQU9BLEVBQUVSLFFBQVEsT0FBTztBQUM1QjtBQUNPLFNBQVNTLHVCQUF1QkQsQ0FBQztJQUNwQyxPQUFPQSxFQUFFUixRQUFRLE9BQU87QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvZnVuY3Rpb24uanM/ODlhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTWVzc2FnZSwgQmFzZU1lc3NhZ2VDaHVuaywgbWVyZ2VDb250ZW50LCBfbWVyZ2VEaWN0cywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBmdW5jdGlvbiBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25NZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJGdW5jdGlvbk1lc3NhZ2VcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCBcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCBuYW1lOiBuYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBmdW5jdGlvbiBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkXG4gKiB3aXRoIG90aGVyIGZ1bmN0aW9uIG1lc3NhZ2UgY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiRnVuY3Rpb25NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgPz8gXCJcIixcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkID8/IGNodW5rLmlkLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbk1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uTWVzc2FnZUNodW5rKHgpIHtcbiAgICByZXR1cm4geC5fZ2V0VHlwZSgpID09PSBcImZ1bmN0aW9uXCI7XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lc3NhZ2UiLCJCYXNlTWVzc2FnZUNodW5rIiwibWVyZ2VDb250ZW50IiwiX21lcmdlRGljdHMiLCJGdW5jdGlvbk1lc3NhZ2UiLCJsY19uYW1lIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJuYW1lIiwiY29udGVudCIsIl9nZXRUeXBlIiwiRnVuY3Rpb25NZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiLCJpZCIsImlzRnVuY3Rpb25NZXNzYWdlIiwieCIsImlzRnVuY3Rpb25NZXNzYWdlQ2h1bmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/function.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/human.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/human.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HumanMessage: () => (/* binding */ HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* binding */ HumanMessageChunk),\n/* harmony export */   isHumanMessage: () => (/* binding */ isHumanMessage),\n/* harmony export */   isHumanMessageChunk: () => (/* binding */ isHumanMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a human message in a conversation.\n */ class HumanMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        super(fields, kwargs);\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */ class HumanMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        super(fields, kwargs);\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            id: this.id ?? chunk.id\n        });\n    }\n}\nfunction isHumanMessage(x) {\n    return x.getType() === \"human\";\n}\nfunction isHumanMessageChunk(x) {\n    return x.getType() === \"human\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaHVtYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSxxQkFBcUJKLGlEQUFXQTtJQUN6QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUMsWUFBWUMsTUFBTSxFQUNsQixnQkFBZ0IsR0FDaEJDLE1BQU0sQ0FBRTtRQUNKLEtBQUssQ0FBQ0QsUUFBUUM7SUFDbEI7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDBCQUEwQlQsc0RBQWdCQTtJQUNuRCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUMsWUFBWUMsTUFBTSxFQUNsQixnQkFBZ0IsR0FDaEJDLE1BQU0sQ0FBRTtRQUNKLEtBQUssQ0FBQ0QsUUFBUUM7SUFDbEI7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixrQkFBa0I7WUFDekJHLFNBQVNYLHNEQUFZQSxDQUFDLElBQUksQ0FBQ1csT0FBTyxFQUFFRCxNQUFNQyxPQUFPO1lBQ2pEQyxtQkFBbUJYLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1csaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RUMsbUJBQW1CWixxREFBV0EsQ0FBQyxJQUFJLENBQUNZLGlCQUFpQixFQUFFSCxNQUFNRyxpQkFBaUI7WUFDOUVDLElBQUksSUFBSSxDQUFDQSxFQUFFLElBQUlKLE1BQU1JLEVBQUU7UUFDM0I7SUFDSjtBQUNKO0FBQ08sU0FBU0MsZUFBZUMsQ0FBQztJQUM1QixPQUFPQSxFQUFFQyxPQUFPLE9BQU87QUFDM0I7QUFDTyxTQUFTQyxvQkFBb0JGLENBQUM7SUFDakMsT0FBT0EsRUFBRUMsT0FBTyxPQUFPO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2h1bWFuLmpzPzcyMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlQ2h1bmssIG1lcmdlQ29udGVudCwgX21lcmdlRGljdHMsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgaHVtYW4gbWVzc2FnZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEh1bWFuTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSHVtYW5NZXNzYWdlXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJodW1hblwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIGt3YXJncykge1xuICAgICAgICBzdXBlcihmaWVsZHMsIGt3YXJncyk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBodW1hbiBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIGh1bWFuIG1lc3NhZ2UgY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgSHVtYW5NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSHVtYW5NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImh1bWFuXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAga3dhcmdzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcywga3dhcmdzKTtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHVtYW5NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkID8/IGNodW5rLmlkLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIdW1hbk1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4LmdldFR5cGUoKSA9PT0gXCJodW1hblwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSHVtYW5NZXNzYWdlQ2h1bmsoeCkge1xuICAgIHJldHVybiB4LmdldFR5cGUoKSA9PT0gXCJodW1hblwiO1xufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiSHVtYW5NZXNzYWdlIiwibGNfbmFtZSIsIl9nZXRUeXBlIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJrd2FyZ3MiLCJIdW1hbk1lc3NhZ2VDaHVuayIsImNvbmNhdCIsImNodW5rIiwiY29udGVudCIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiLCJpZCIsImlzSHVtYW5NZXNzYWdlIiwieCIsImdldFR5cGUiLCJpc0h1bWFuTWVzc2FnZUNodW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/human.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessageChunk),\n/* harmony export */   RemoveMessage: () => (/* reexport safe */ _modifier_js__WEBPACK_IMPORTED_MODULE_8__.RemoveMessage),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_10__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_10__.ToolMessageChunk),\n/* harmony export */   _isMessageFieldWithRole: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._isMessageFieldWithRole),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists),\n/* harmony export */   _mergeObj: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeObj),\n/* harmony export */   _mergeStatus: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeStatus),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.convertToChunk),\n/* harmony export */   convertToOpenAIImageBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.convertToOpenAIImageBlock),\n/* harmony export */   convertToProviderContentBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.convertToProviderContentBlock),\n/* harmony export */   defaultTextSplitter: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.defaultTextSplitter),\n/* harmony export */   filterMessages: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.filterMessages),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isAIMessageChunk: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessageChunk),\n/* harmony export */   isBase64ContentBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.isBase64ContentBlock),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessageChunk),\n/* harmony export */   isChatMessage: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.isChatMessage),\n/* harmony export */   isChatMessageChunk: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.isChatMessageChunk),\n/* harmony export */   isDataContentBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.isDataContentBlock),\n/* harmony export */   isFunctionMessage: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.isFunctionMessage),\n/* harmony export */   isFunctionMessageChunk: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.isFunctionMessageChunk),\n/* harmony export */   isHumanMessage: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.isHumanMessage),\n/* harmony export */   isHumanMessageChunk: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.isHumanMessageChunk),\n/* harmony export */   isIDContentBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.isIDContentBlock),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isOpenAIToolCallArray),\n/* harmony export */   isPlainTextContentBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.isPlainTextContentBlock),\n/* harmony export */   isSystemMessage: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.isSystemMessage),\n/* harmony export */   isSystemMessageChunk: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.isSystemMessageChunk),\n/* harmony export */   isToolMessage: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_10__.isToolMessage),\n/* harmony export */   isToolMessageChunk: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_10__.isToolMessageChunk),\n/* harmony export */   isURLContentBlock: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.isURLContentBlock),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent),\n/* harmony export */   mergeMessageRuns: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.mergeMessageRuns),\n/* harmony export */   parseBase64DataUrl: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.parseBase64DataUrl),\n/* harmony export */   parseMimeType: () => (/* reexport safe */ _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__.parseMimeType),\n/* harmony export */   trimMessages: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.trimMessages)\n/* harmony export */ });\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _transformers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transformers.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/transformers.js\");\n/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifier.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js\");\n/* harmony import */ var _content_blocks_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./content_blocks.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\n\n\n\n// TODO: Use a star export when we deprecate the\n// existing \"ToolCall\" type in \"base.js\".\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdCO0FBQ0U7QUFDQTtBQUNJO0FBQ0g7QUFDQztBQUNEO0FBQ087QUFDSjtBQUNNO0FBQ3BDLGdEQUFnRDtBQUNoRCx5Q0FBeUM7QUFDcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaW5kZXguanM/YjFjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9haS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2hhdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZnVuY3Rpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h1bWFuLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zeXN0ZW0uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90cmFuc2Zvcm1lcnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb250ZW50X2Jsb2Nrcy5qc1wiO1xuLy8gVE9ETzogVXNlIGEgc3RhciBleHBvcnQgd2hlbiB3ZSBkZXByZWNhdGUgdGhlXG4vLyBleGlzdGluZyBcIlRvb2xDYWxsXCIgdHlwZSBpbiBcImJhc2UuanNcIi5cbmV4cG9ydCB7IFRvb2xNZXNzYWdlLCBUb29sTWVzc2FnZUNodW5rLCBpc1Rvb2xNZXNzYWdlLCBpc1Rvb2xNZXNzYWdlQ2h1bmssIH0gZnJvbSBcIi4vdG9vbC5qc1wiO1xuIl0sIm5hbWVzIjpbIlRvb2xNZXNzYWdlIiwiVG9vbE1lc3NhZ2VDaHVuayIsImlzVG9vbE1lc3NhZ2UiLCJpc1Rvb2xNZXNzYWdlQ2h1bmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/modifier.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoveMessage: () => (/* binding */ RemoveMessage)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Message responsible for deleting other messages.\n */ class RemoveMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    constructor(fields){\n        super({\n            ...fields,\n            content: \"\"\n        });\n        /**\n         * The ID of the message to remove.\n         */ Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.id = fields.id;\n    }\n    _getType() {\n        return \"remove\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            id: this.id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvbW9kaWZpZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7O0NBRUMsR0FDTSxNQUFNQyxzQkFBc0JELGlEQUFXQTtJQUMxQ0UsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUNGLEdBQUdBLE1BQU07WUFDVEMsU0FBUztRQUNiO1FBQ0E7O1NBRUMsR0FDREMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNO1lBQzlCQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLEVBQUUsR0FBR1IsT0FBT1EsRUFBRTtJQUN2QjtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0EsSUFBSUMsbUJBQW1CO1FBQ25CLE9BQU87WUFDSCxHQUFHLEtBQUssQ0FBQ0EsZ0JBQWdCO1lBQ3pCRixJQUFJLElBQUksQ0FBQ0EsRUFBRTtRQUNmO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9tb2RpZmllci5qcz8xZTg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBNZXNzYWdlIHJlc3BvbnNpYmxlIGZvciBkZWxldGluZyBvdGhlciBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlbW92ZU1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIC4uLmZpZWxkcyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIElEIG9mIHRoZSBtZXNzYWdlIHRvIHJlbW92ZS5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaWQgPSBmaWVsZHMuaWQ7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJyZW1vdmVcIjtcbiAgICB9XG4gICAgZ2V0IF9wcmludGFibGVGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci5fcHJpbnRhYmxlRmllbGRzLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiUmVtb3ZlTWVzc2FnZSIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiY29udGVudCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJpZCIsIl9nZXRUeXBlIiwiX3ByaW50YWJsZUZpZWxkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/system.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/system.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SystemMessage: () => (/* binding */ SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* binding */ SystemMessageChunk),\n/* harmony export */   isSystemMessage: () => (/* binding */ isSystemMessage),\n/* harmony export */   isSystemMessageChunk: () => (/* binding */ isSystemMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a system message in a conversation.\n */ class SystemMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        super(fields, kwargs);\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */ class SystemMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        super(fields, kwargs);\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            id: this.id ?? chunk.id\n        });\n    }\n}\nfunction isSystemMessage(x) {\n    return x._getType() === \"system\";\n}\nfunction isSystemMessageChunk(x) {\n    return x._getType() === \"system\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvc3lzdGVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNGO0FBQ3RGOztDQUVDLEdBQ00sTUFBTUksc0JBQXNCSixpREFBV0E7SUFDMUMsT0FBT0ssVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxNQUFNLENBQUU7UUFDSixLQUFLLENBQUNELFFBQVFDO0lBQ2xCO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNQywyQkFBMkJULHNEQUFnQkE7SUFDcEQsT0FBT0ksVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxNQUFNLENBQUU7UUFDSixLQUFLLENBQUNELFFBQVFDO0lBQ2xCO0lBQ0FFLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsbUJBQW1CO1lBQzFCRyxTQUFTWCxzREFBWUEsQ0FBQyxJQUFJLENBQUNXLE9BQU8sRUFBRUQsTUFBTUMsT0FBTztZQUNqREMsbUJBQW1CWCxxREFBV0EsQ0FBQyxJQUFJLENBQUNXLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVDLG1CQUFtQloscURBQVdBLENBQUMsSUFBSSxDQUFDWSxpQkFBaUIsRUFBRUgsTUFBTUcsaUJBQWlCO1lBQzlFQyxJQUFJLElBQUksQ0FBQ0EsRUFBRSxJQUFJSixNQUFNSSxFQUFFO1FBQzNCO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLGdCQUFnQkMsQ0FBQztJQUM3QixPQUFPQSxFQUFFWixRQUFRLE9BQU87QUFDNUI7QUFDTyxTQUFTYSxxQkFBcUJELENBQUM7SUFDbEMsT0FBT0EsRUFBRVosUUFBUSxPQUFPO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL3N5c3RlbS5qcz9lNWI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIHN5c3RlbSBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU3lzdGVtTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3lzdGVtTWVzc2FnZVwiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAga3dhcmdzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcywga3dhcmdzKTtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIHN5c3RlbSBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIHN5c3RlbSBtZXNzYWdlIGNodW5rcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN5c3RlbU1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTeXN0ZW1NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInN5c3RlbVwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIGt3YXJncykge1xuICAgICAgICBzdXBlcihmaWVsZHMsIGt3YXJncyk7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IFN5c3RlbU1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50OiBtZXJnZUNvbnRlbnQodGhpcy5jb250ZW50LCBjaHVuay5jb250ZW50KSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiBfbWVyZ2VEaWN0cyh0aGlzLmFkZGl0aW9uYWxfa3dhcmdzLCBjaHVuay5hZGRpdGlvbmFsX2t3YXJncyksXG4gICAgICAgICAgICByZXNwb25zZV9tZXRhZGF0YTogX21lcmdlRGljdHModGhpcy5yZXNwb25zZV9tZXRhZGF0YSwgY2h1bmsucmVzcG9uc2VfbWV0YWRhdGEpLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQgPz8gY2h1bmsuaWQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N5c3RlbU1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwic3lzdGVtXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTeXN0ZW1NZXNzYWdlQ2h1bmsoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwic3lzdGVtXCI7XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lc3NhZ2UiLCJCYXNlTWVzc2FnZUNodW5rIiwibWVyZ2VDb250ZW50IiwiX21lcmdlRGljdHMiLCJTeXN0ZW1NZXNzYWdlIiwibGNfbmFtZSIsIl9nZXRUeXBlIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJrd2FyZ3MiLCJTeXN0ZW1NZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImNvbnRlbnQiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIiwiaWQiLCJpc1N5c3RlbU1lc3NhZ2UiLCJ4IiwiaXNTeXN0ZW1NZXNzYWdlQ2h1bmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/system.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/tool.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/tool.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolMessage: () => (/* binding */ ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* binding */ ToolMessageChunk),\n/* harmony export */   defaultToolCallParser: () => (/* binding */ defaultToolCallParser),\n/* harmony export */   isDirectToolOutput: () => (/* binding */ isDirectToolOutput),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage),\n/* harmony export */   isToolMessageChunk: () => (/* binding */ isToolMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\nfunction isDirectToolOutput(x) {\n    return x != null && typeof x === \"object\" && \"lc_direct_tool_output\" in x && x.lc_direct_tool_output === true;\n}\n/**\n * Represents a tool message in a conversation.\n */ class ToolMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            tool_call_id: \"tool_call_id\"\n        };\n    }\n    constructor(fields, tool_call_id, name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name,\n                tool_call_id: tool_call_id\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_direct_tool_output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */ Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n        this.metadata = fields.metadata;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact\n        };\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */ class ToolMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */ Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            artifact: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeObj)(this.artifact, chunk.artifact),\n            tool_call_id: this.tool_call_id,\n            id: this.id ?? chunk.id,\n            status: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeStatus)(this.status, chunk.status)\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact\n        };\n    }\n}\nfunction defaultToolCallParser(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls){\n        if (!toolCall.function) {\n            continue;\n        } else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id\n                };\n                toolCalls.push(parsed);\n            } catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\"\n                });\n            }\n        }\n    }\n    return [\n        toolCalls,\n        invalidToolCalls\n    ];\n}\nfunction isToolMessage(x) {\n    return x._getType() === \"tool\";\n}\nfunction isToolMessageChunk(x) {\n    return x._getType() === \"tool\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/transformers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/transformers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultTextSplitter: () => (/* binding */ defaultTextSplitter),\n/* harmony export */   filterMessages: () => (/* binding */ filterMessages),\n/* harmony export */   mergeMessageRuns: () => (/* binding */ mergeMessageRuns),\n/* harmony export */   trimMessages: () => (/* binding */ trimMessages)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifier.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n\n\n\n\n\n\n\n\n\n\nconst _isMessageType = (msg, types)=>{\n    const typesAsStrings = [\n        ...new Set(types?.map((t)=>{\n            if (typeof t === \"string\") {\n                return t;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const instantiatedMsgClass = new t({});\n            if (!(\"getType\" in instantiatedMsgClass) || typeof instantiatedMsgClass.getType !== \"function\") {\n                throw new Error(\"Invalid type provided.\");\n            }\n            return instantiatedMsgClass.getType();\n        }))\n    ];\n    const msgType = msg.getType();\n    return typesAsStrings.some((t)=>t === msgType);\n};\nfunction filterMessages(messagesOrOptions, options) {\n    if (Array.isArray(messagesOrOptions)) {\n        return _filterMessages(messagesOrOptions, options);\n    }\n    return _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda.from((input)=>{\n        return _filterMessages(input, messagesOrOptions);\n    });\n}\nfunction _filterMessages(messages, options = {}) {\n    const { includeNames, excludeNames, includeTypes, excludeTypes, includeIds, excludeIds } = options;\n    const filtered = [];\n    for (const msg of messages){\n        if (excludeNames && msg.name && excludeNames.includes(msg.name)) {\n            continue;\n        } else if (excludeTypes && _isMessageType(msg, excludeTypes)) {\n            continue;\n        } else if (excludeIds && msg.id && excludeIds.includes(msg.id)) {\n            continue;\n        }\n        // default to inclusion when no inclusion criteria given.\n        if (!(includeTypes || includeIds || includeNames)) {\n            filtered.push(msg);\n        } else if (includeNames && msg.name && includeNames.some((iName)=>iName === msg.name)) {\n            filtered.push(msg);\n        } else if (includeTypes && _isMessageType(msg, includeTypes)) {\n            filtered.push(msg);\n        } else if (includeIds && msg.id && includeIds.some((id)=>id === msg.id)) {\n            filtered.push(msg);\n        }\n    }\n    return filtered;\n}\nfunction mergeMessageRuns(messages) {\n    if (Array.isArray(messages)) {\n        return _mergeMessageRuns(messages);\n    }\n    return _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda.from(_mergeMessageRuns);\n}\nfunction _mergeMessageRuns(messages) {\n    if (!messages.length) {\n        return [];\n    }\n    const merged = [];\n    for (const msg of messages){\n        const curr = msg;\n        const last = merged.pop();\n        if (!last) {\n            merged.push(curr);\n        } else if (curr.getType() === \"tool\" || !(curr.getType() === last.getType())) {\n            merged.push(last, curr);\n        } else {\n            const lastChunk = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.convertToChunk)(last);\n            const currChunk = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.convertToChunk)(curr);\n            const mergedChunks = lastChunk.concat(currChunk);\n            if (typeof lastChunk.content === \"string\" && typeof currChunk.content === \"string\") {\n                mergedChunks.content = `${lastChunk.content}\\n${currChunk.content}`;\n            }\n            merged.push(_chunkToMsg(mergedChunks));\n        }\n    }\n    return merged;\n}\nfunction trimMessages(messagesOrOptions, options) {\n    if (Array.isArray(messagesOrOptions)) {\n        const messages = messagesOrOptions;\n        if (!options) {\n            throw new Error(\"Options parameter is required when providing messages.\");\n        }\n        return _trimMessagesHelper(messages, options);\n    } else {\n        const trimmerOptions = messagesOrOptions;\n        return _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda.from((input)=>_trimMessagesHelper(input, trimmerOptions)).withConfig({\n            runName: \"trim_messages\"\n        });\n    }\n}\nasync function _trimMessagesHelper(messages, options) {\n    const { maxTokens, tokenCounter, strategy = \"last\", allowPartial = false, endOn, startOn, includeSystem = false, textSplitter } = options;\n    if (startOn && strategy === \"first\") {\n        throw new Error(\"`startOn` should only be specified if `strategy` is 'last'.\");\n    }\n    if (includeSystem && strategy === \"first\") {\n        throw new Error(\"`includeSystem` should only be specified if `strategy` is 'last'.\");\n    }\n    let listTokenCounter;\n    if (\"getNumTokens\" in tokenCounter) {\n        listTokenCounter = async (msgs)=>{\n            const tokenCounts = await Promise.all(msgs.map((msg)=>tokenCounter.getNumTokens(msg.content)));\n            return tokenCounts.reduce((sum, count)=>sum + count, 0);\n        };\n    } else {\n        listTokenCounter = async (msgs)=>tokenCounter(msgs);\n    }\n    let textSplitterFunc = defaultTextSplitter;\n    if (textSplitter) {\n        if (\"splitText\" in textSplitter) {\n            textSplitterFunc = textSplitter.splitText;\n        } else {\n            textSplitterFunc = async (text)=>textSplitter(text);\n        }\n    }\n    if (strategy === \"first\") {\n        return _firstMaxTokens(messages, {\n            maxTokens,\n            tokenCounter: listTokenCounter,\n            textSplitter: textSplitterFunc,\n            partialStrategy: allowPartial ? \"first\" : undefined,\n            endOn\n        });\n    } else if (strategy === \"last\") {\n        return _lastMaxTokens(messages, {\n            maxTokens,\n            tokenCounter: listTokenCounter,\n            textSplitter: textSplitterFunc,\n            allowPartial,\n            includeSystem,\n            startOn,\n            endOn\n        });\n    } else {\n        throw new Error(`Unrecognized strategy: '${strategy}'. Must be one of 'first' or 'last'.`);\n    }\n}\nasync function _firstMaxTokens(messages, options) {\n    const { maxTokens, tokenCounter, textSplitter, partialStrategy, endOn } = options;\n    let messagesCopy = [\n        ...messages\n    ];\n    let idx = 0;\n    for(let i = 0; i < messagesCopy.length; i += 1){\n        const remainingMessages = i > 0 ? messagesCopy.slice(0, -i) : messagesCopy;\n        if (await tokenCounter(remainingMessages) <= maxTokens) {\n            idx = messagesCopy.length - i;\n            break;\n        }\n    }\n    if (idx < messagesCopy.length - 1 && partialStrategy) {\n        let includedPartial = false;\n        if (Array.isArray(messagesCopy[idx].content)) {\n            const excluded = messagesCopy[idx];\n            if (typeof excluded.content === \"string\") {\n                throw new Error(\"Expected content to be an array.\");\n            }\n            const numBlock = excluded.content.length;\n            const reversedContent = partialStrategy === \"last\" ? [\n                ...excluded.content\n            ].reverse() : excluded.content;\n            for(let i = 1; i <= numBlock; i += 1){\n                const partialContent = partialStrategy === \"first\" ? reversedContent.slice(0, i) : reversedContent.slice(-i);\n                const fields = Object.fromEntries(Object.entries(excluded).filter(([k])=>k !== \"type\" && !k.startsWith(\"lc_\")));\n                const updatedMessage = _switchTypeToMessage(excluded.getType(), {\n                    ...fields,\n                    content: partialContent\n                });\n                const slicedMessages = [\n                    ...messagesCopy.slice(0, idx),\n                    updatedMessage\n                ];\n                if (await tokenCounter(slicedMessages) <= maxTokens) {\n                    messagesCopy = slicedMessages;\n                    idx += 1;\n                    includedPartial = true;\n                } else {\n                    break;\n                }\n            }\n            if (includedPartial && partialStrategy === \"last\") {\n                excluded.content = [\n                    ...reversedContent\n                ].reverse();\n            }\n        }\n        if (!includedPartial) {\n            const excluded = messagesCopy[idx];\n            let text;\n            if (Array.isArray(excluded.content) && excluded.content.some((block)=>typeof block === \"string\" || block.type === \"text\")) {\n                const textBlock = excluded.content.find((block)=>block.type === \"text\" && block.text);\n                text = textBlock?.text;\n            } else if (typeof excluded.content === \"string\") {\n                text = excluded.content;\n            }\n            if (text) {\n                const splitTexts = await textSplitter(text);\n                const numSplits = splitTexts.length;\n                if (partialStrategy === \"last\") {\n                    splitTexts.reverse();\n                }\n                for(let _ = 0; _ < numSplits - 1; _ += 1){\n                    splitTexts.pop();\n                    excluded.content = splitTexts.join(\"\");\n                    if (await tokenCounter([\n                        ...messagesCopy.slice(0, idx),\n                        excluded\n                    ]) <= maxTokens) {\n                        if (partialStrategy === \"last\") {\n                            excluded.content = [\n                                ...splitTexts\n                            ].reverse().join(\"\");\n                        }\n                        messagesCopy = [\n                            ...messagesCopy.slice(0, idx),\n                            excluded\n                        ];\n                        idx += 1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (endOn) {\n        const endOnArr = Array.isArray(endOn) ? endOn : [\n            endOn\n        ];\n        while(idx > 0 && !_isMessageType(messagesCopy[idx - 1], endOnArr)){\n            idx -= 1;\n        }\n    }\n    return messagesCopy.slice(0, idx);\n}\nasync function _lastMaxTokens(messages, options) {\n    const { allowPartial = false, includeSystem = false, endOn, startOn, ...rest } = options;\n    // Create a copy of messages to avoid mutation\n    let messagesCopy = messages.map((message)=>{\n        const fields = Object.fromEntries(Object.entries(message).filter(([k])=>k !== \"type\" && !k.startsWith(\"lc_\")));\n        return _switchTypeToMessage(message.getType(), fields, (0,_base_js__WEBPACK_IMPORTED_MODULE_2__.isBaseMessageChunk)(message));\n    });\n    if (endOn) {\n        const endOnArr = Array.isArray(endOn) ? endOn : [\n            endOn\n        ];\n        while(messagesCopy.length > 0 && !_isMessageType(messagesCopy[messagesCopy.length - 1], endOnArr)){\n            messagesCopy = messagesCopy.slice(0, -1);\n        }\n    }\n    const swappedSystem = includeSystem && messagesCopy[0]?.getType() === \"system\";\n    let reversed_ = swappedSystem ? messagesCopy.slice(0, 1).concat(messagesCopy.slice(1).reverse()) : messagesCopy.reverse();\n    reversed_ = await _firstMaxTokens(reversed_, {\n        ...rest,\n        partialStrategy: allowPartial ? \"last\" : undefined,\n        endOn: startOn\n    });\n    if (swappedSystem) {\n        return [\n            reversed_[0],\n            ...reversed_.slice(1).reverse()\n        ];\n    } else {\n        return reversed_.reverse();\n    }\n}\nconst _MSG_CHUNK_MAP = {\n    human: {\n        message: _human_js__WEBPACK_IMPORTED_MODULE_5__.HumanMessage,\n        messageChunk: _human_js__WEBPACK_IMPORTED_MODULE_5__.HumanMessageChunk\n    },\n    ai: {\n        message: _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage,\n        messageChunk: _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessageChunk\n    },\n    system: {\n        message: _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage,\n        messageChunk: _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk\n    },\n    developer: {\n        message: _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage,\n        messageChunk: _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk\n    },\n    tool: {\n        message: _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessage,\n        messageChunk: _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessageChunk\n    },\n    function: {\n        message: _function_js__WEBPACK_IMPORTED_MODULE_4__.FunctionMessage,\n        messageChunk: _function_js__WEBPACK_IMPORTED_MODULE_4__.FunctionMessageChunk\n    },\n    generic: {\n        message: _chat_js__WEBPACK_IMPORTED_MODULE_3__.ChatMessage,\n        messageChunk: _chat_js__WEBPACK_IMPORTED_MODULE_3__.ChatMessageChunk\n    },\n    remove: {\n        message: _modifier_js__WEBPACK_IMPORTED_MODULE_6__.RemoveMessage,\n        messageChunk: _modifier_js__WEBPACK_IMPORTED_MODULE_6__.RemoveMessage\n    }\n};\nfunction _switchTypeToMessage(messageType, fields, returnChunk) {\n    let chunk;\n    let msg;\n    switch(messageType){\n        case \"human\":\n            if (returnChunk) {\n                chunk = new _human_js__WEBPACK_IMPORTED_MODULE_5__.HumanMessageChunk(fields);\n            } else {\n                msg = new _human_js__WEBPACK_IMPORTED_MODULE_5__.HumanMessage(fields);\n            }\n            break;\n        case \"ai\":\n            if (returnChunk) {\n                let aiChunkFields = {\n                    ...fields\n                };\n                if (\"tool_calls\" in aiChunkFields) {\n                    aiChunkFields = {\n                        ...aiChunkFields,\n                        tool_call_chunks: aiChunkFields.tool_calls?.map((tc)=>({\n                                ...tc,\n                                type: \"tool_call_chunk\",\n                                index: undefined,\n                                args: JSON.stringify(tc.args)\n                            }))\n                    };\n                }\n                chunk = new _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessageChunk(aiChunkFields);\n            } else {\n                msg = new _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage(fields);\n            }\n            break;\n        case \"system\":\n            if (returnChunk) {\n                chunk = new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk(fields);\n            } else {\n                msg = new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage(fields);\n            }\n            break;\n        case \"developer\":\n            if (returnChunk) {\n                chunk = new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk({\n                    ...fields,\n                    additional_kwargs: {\n                        ...fields.additional_kwargs,\n                        __openai_role__: \"developer\"\n                    }\n                });\n            } else {\n                msg = new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage({\n                    ...fields,\n                    additional_kwargs: {\n                        ...fields.additional_kwargs,\n                        __openai_role__: \"developer\"\n                    }\n                });\n            }\n            break;\n        case \"tool\":\n            if (\"tool_call_id\" in fields) {\n                if (returnChunk) {\n                    chunk = new _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessageChunk(fields);\n                } else {\n                    msg = new _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessage(fields);\n                }\n            } else {\n                throw new Error(\"Can not convert ToolMessage to ToolMessageChunk if 'tool_call_id' field is not defined.\");\n            }\n            break;\n        case \"function\":\n            if (returnChunk) {\n                chunk = new _function_js__WEBPACK_IMPORTED_MODULE_4__.FunctionMessageChunk(fields);\n            } else {\n                if (!fields.name) {\n                    throw new Error(\"FunctionMessage must have a 'name' field\");\n                }\n                msg = new _function_js__WEBPACK_IMPORTED_MODULE_4__.FunctionMessage(fields);\n            }\n            break;\n        case \"generic\":\n            if (\"role\" in fields) {\n                if (returnChunk) {\n                    chunk = new _chat_js__WEBPACK_IMPORTED_MODULE_3__.ChatMessageChunk(fields);\n                } else {\n                    msg = new _chat_js__WEBPACK_IMPORTED_MODULE_3__.ChatMessage(fields);\n                }\n            } else {\n                throw new Error(\"Can not convert ChatMessage to ChatMessageChunk if 'role' field is not defined.\");\n            }\n            break;\n        default:\n            throw new Error(`Unrecognized message type ${messageType}`);\n    }\n    if (returnChunk && chunk) {\n        return chunk;\n    }\n    if (msg) {\n        return msg;\n    }\n    throw new Error(`Unrecognized message type ${messageType}`);\n}\nfunction _chunkToMsg(chunk) {\n    const chunkType = chunk.getType();\n    let msg;\n    const fields = Object.fromEntries(Object.entries(chunk).filter(([k])=>![\n            \"type\",\n            \"tool_call_chunks\"\n        ].includes(k) && !k.startsWith(\"lc_\")));\n    if (chunkType in _MSG_CHUNK_MAP) {\n        msg = _switchTypeToMessage(chunkType, fields);\n    }\n    if (!msg) {\n        throw new Error(`Unrecognized message chunk class ${chunkType}. Supported classes are ${Object.keys(_MSG_CHUNK_MAP)}`);\n    }\n    return msg;\n}\n/**\n * The default text splitter function that splits text by newlines.\n *\n * @param {string} text\n * @returns A promise that resolves to an array of strings split by newlines.\n */ function defaultTextSplitter(text) {\n    const splits = text.split(\"\\n\");\n    return Promise.resolve([\n        ...splits.slice(0, -1).map((s)=>`${s}\\n`),\n        splits[splits.length - 1]\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvdHJhbnNmb3JtZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNEO0FBQ0Y7QUFDSjtBQUNXO0FBQ1k7QUFDVjtBQUNmO0FBQ2tCO0FBQ0w7QUFDZjtBQUM1QyxNQUFNZ0IsaUJBQWlCLENBQUNDLEtBQUtDO0lBQ3pCLE1BQU1DLGlCQUFpQjtXQUNoQixJQUFJQyxJQUFJRixPQUFPRyxJQUFJLENBQUNDO1lBQ25CLElBQUksT0FBT0EsTUFBTSxVQUFVO2dCQUN2QixPQUFPQTtZQUNYO1lBQ0EsOERBQThEO1lBQzlELE1BQU1DLHVCQUF1QixJQUFJRCxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFFLGNBQWFDLG9CQUFtQixLQUNsQyxPQUFPQSxxQkFBcUJDLE9BQU8sS0FBSyxZQUFZO2dCQUNwRCxNQUFNLElBQUlDLE1BQU07WUFDcEI7WUFDQSxPQUFPRixxQkFBcUJDLE9BQU87UUFDdkM7S0FDSDtJQUNELE1BQU1FLFVBQVVULElBQUlPLE9BQU87SUFDM0IsT0FBT0wsZUFBZVEsSUFBSSxDQUFDLENBQUNMLElBQU1BLE1BQU1JO0FBQzVDO0FBQ08sU0FBU0UsZUFBZUMsaUJBQWlCLEVBQUVDLE9BQU87SUFDckQsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxvQkFBb0I7UUFDbEMsT0FBT0ksZ0JBQWdCSixtQkFBbUJDO0lBQzlDO0lBQ0EsT0FBTzlCLDhEQUFjQSxDQUFDa0MsSUFBSSxDQUFDLENBQUNDO1FBQ3hCLE9BQU9GLGdCQUFnQkUsT0FBT047SUFDbEM7QUFDSjtBQUNBLFNBQVNJLGdCQUFnQkcsUUFBUSxFQUFFTixVQUFVLENBQUMsQ0FBQztJQUMzQyxNQUFNLEVBQUVPLFlBQVksRUFBRUMsWUFBWSxFQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUcsR0FBR1o7SUFDNUYsTUFBTWEsV0FBVyxFQUFFO0lBQ25CLEtBQUssTUFBTTFCLE9BQU9tQixTQUFVO1FBQ3hCLElBQUlFLGdCQUFnQnJCLElBQUkyQixJQUFJLElBQUlOLGFBQWFPLFFBQVEsQ0FBQzVCLElBQUkyQixJQUFJLEdBQUc7WUFDN0Q7UUFDSixPQUNLLElBQUlKLGdCQUFnQnhCLGVBQWVDLEtBQUt1QixlQUFlO1lBQ3hEO1FBQ0osT0FDSyxJQUFJRSxjQUFjekIsSUFBSTZCLEVBQUUsSUFBSUosV0FBV0csUUFBUSxDQUFDNUIsSUFBSTZCLEVBQUUsR0FBRztZQUMxRDtRQUNKO1FBQ0EseURBQXlEO1FBQ3pELElBQUksQ0FBRVAsQ0FBQUEsZ0JBQWdCRSxjQUFjSixZQUFXLEdBQUk7WUFDL0NNLFNBQVNJLElBQUksQ0FBQzlCO1FBQ2xCLE9BQ0ssSUFBSW9CLGdCQUNMcEIsSUFBSTJCLElBQUksSUFDUlAsYUFBYVYsSUFBSSxDQUFDLENBQUNxQixRQUFVQSxVQUFVL0IsSUFBSTJCLElBQUksR0FBRztZQUNsREQsU0FBU0ksSUFBSSxDQUFDOUI7UUFDbEIsT0FDSyxJQUFJc0IsZ0JBQWdCdkIsZUFBZUMsS0FBS3NCLGVBQWU7WUFDeERJLFNBQVNJLElBQUksQ0FBQzlCO1FBQ2xCLE9BQ0ssSUFBSXdCLGNBQWN4QixJQUFJNkIsRUFBRSxJQUFJTCxXQUFXZCxJQUFJLENBQUMsQ0FBQ21CLEtBQU9BLE9BQU83QixJQUFJNkIsRUFBRSxHQUFHO1lBQ3JFSCxTQUFTSSxJQUFJLENBQUM5QjtRQUNsQjtJQUNKO0lBQ0EsT0FBTzBCO0FBQ1g7QUFDTyxTQUFTTSxpQkFBaUJiLFFBQVE7SUFDckMsSUFBSUwsTUFBTUMsT0FBTyxDQUFDSSxXQUFXO1FBQ3pCLE9BQU9jLGtCQUFrQmQ7SUFDN0I7SUFDQSxPQUFPcEMsOERBQWNBLENBQUNrQyxJQUFJLENBQUNnQjtBQUMvQjtBQUNBLFNBQVNBLGtCQUFrQmQsUUFBUTtJQUMvQixJQUFJLENBQUNBLFNBQVNlLE1BQU0sRUFBRTtRQUNsQixPQUFPLEVBQUU7SUFDYjtJQUNBLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1uQyxPQUFPbUIsU0FBVTtRQUN4QixNQUFNaUIsT0FBT3BDO1FBQ2IsTUFBTXFDLE9BQU9GLE9BQU9HLEdBQUc7UUFDdkIsSUFBSSxDQUFDRCxNQUFNO1lBQ1BGLE9BQU9MLElBQUksQ0FBQ007UUFDaEIsT0FDSyxJQUFJQSxLQUFLN0IsT0FBTyxPQUFPLFVBQ3hCLENBQUU2QixDQUFBQSxLQUFLN0IsT0FBTyxPQUFPOEIsS0FBSzlCLE9BQU8sRUFBQyxHQUFJO1lBQ3RDNEIsT0FBT0wsSUFBSSxDQUFDTyxNQUFNRDtRQUN0QixPQUNLO1lBQ0QsTUFBTUcsWUFBWXpDLHlEQUFjQSxDQUFDdUM7WUFDakMsTUFBTUcsWUFBWTFDLHlEQUFjQSxDQUFDc0M7WUFDakMsTUFBTUssZUFBZUYsVUFBVUcsTUFBTSxDQUFDRjtZQUN0QyxJQUFJLE9BQU9ELFVBQVVJLE9BQU8sS0FBSyxZQUM3QixPQUFPSCxVQUFVRyxPQUFPLEtBQUssVUFBVTtnQkFDdkNGLGFBQWFFLE9BQU8sR0FBRyxDQUFDLEVBQUVKLFVBQVVJLE9BQU8sQ0FBQyxFQUFFLEVBQUVILFVBQVVHLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZFO1lBQ0FSLE9BQU9MLElBQUksQ0FBQ2MsWUFBWUg7UUFDNUI7SUFDSjtJQUNBLE9BQU9OO0FBQ1g7QUFDTyxTQUFTVSxhQUFhakMsaUJBQWlCLEVBQUVDLE9BQU87SUFDbkQsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxvQkFBb0I7UUFDbEMsTUFBTU8sV0FBV1A7UUFDakIsSUFBSSxDQUFDQyxTQUFTO1lBQ1YsTUFBTSxJQUFJTCxNQUFNO1FBQ3BCO1FBQ0EsT0FBT3NDLG9CQUFvQjNCLFVBQVVOO0lBQ3pDLE9BQ0s7UUFDRCxNQUFNa0MsaUJBQWlCbkM7UUFDdkIsT0FBTzdCLDhEQUFjQSxDQUFDa0MsSUFBSSxDQUFDLENBQUNDLFFBQVU0QixvQkFBb0I1QixPQUFPNkIsaUJBQWlCQyxVQUFVLENBQUM7WUFDekZDLFNBQVM7UUFDYjtJQUNKO0FBQ0o7QUFDQSxlQUFlSCxvQkFBb0IzQixRQUFRLEVBQUVOLE9BQU87SUFDaEQsTUFBTSxFQUFFcUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLFdBQVcsTUFBTSxFQUFFQyxlQUFlLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLGdCQUFnQixLQUFLLEVBQUVDLFlBQVksRUFBRyxHQUFHNUM7SUFDbkksSUFBSTBDLFdBQVdILGFBQWEsU0FBUztRQUNqQyxNQUFNLElBQUk1QyxNQUFNO0lBQ3BCO0lBQ0EsSUFBSWdELGlCQUFpQkosYUFBYSxTQUFTO1FBQ3ZDLE1BQU0sSUFBSTVDLE1BQU07SUFDcEI7SUFDQSxJQUFJa0Q7SUFDSixJQUFJLGtCQUFrQlAsY0FBYztRQUNoQ08sbUJBQW1CLE9BQU9DO1lBQ3RCLE1BQU1DLGNBQWMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDSCxLQUFLdkQsR0FBRyxDQUFDLENBQUNKLE1BQVFtRCxhQUFhWSxZQUFZLENBQUMvRCxJQUFJMkMsT0FBTztZQUM3RixPQUFPaUIsWUFBWUksTUFBTSxDQUFDLENBQUNDLEtBQUtDLFFBQVVELE1BQU1DLE9BQU87UUFDM0Q7SUFDSixPQUNLO1FBQ0RSLG1CQUFtQixPQUFPQyxPQUFTUixhQUFhUTtJQUNwRDtJQUNBLElBQUlRLG1CQUFtQkM7SUFDdkIsSUFBSVgsY0FBYztRQUNkLElBQUksZUFBZUEsY0FBYztZQUM3QlUsbUJBQW1CVixhQUFhWSxTQUFTO1FBQzdDLE9BQ0s7WUFDREYsbUJBQW1CLE9BQU9HLE9BQVNiLGFBQWFhO1FBQ3BEO0lBQ0o7SUFDQSxJQUFJbEIsYUFBYSxTQUFTO1FBQ3RCLE9BQU9tQixnQkFBZ0JwRCxVQUFVO1lBQzdCK0I7WUFDQUMsY0FBY087WUFDZEQsY0FBY1U7WUFDZEssaUJBQWlCbkIsZUFBZSxVQUFVb0I7WUFDMUNuQjtRQUNKO0lBQ0osT0FDSyxJQUFJRixhQUFhLFFBQVE7UUFDMUIsT0FBT3NCLGVBQWV2RCxVQUFVO1lBQzVCK0I7WUFDQUMsY0FBY087WUFDZEQsY0FBY1U7WUFDZGQ7WUFDQUc7WUFDQUQ7WUFDQUQ7UUFDSjtJQUNKLE9BQ0s7UUFDRCxNQUFNLElBQUk5QyxNQUFNLENBQUMsd0JBQXdCLEVBQUU0QyxTQUFTLG9DQUFvQyxDQUFDO0lBQzdGO0FBQ0o7QUFDQSxlQUFlbUIsZ0JBQWdCcEQsUUFBUSxFQUFFTixPQUFPO0lBQzVDLE1BQU0sRUFBRXFDLFNBQVMsRUFBRUMsWUFBWSxFQUFFTSxZQUFZLEVBQUVlLGVBQWUsRUFBRWxCLEtBQUssRUFBRSxHQUFHekM7SUFDMUUsSUFBSThELGVBQWU7V0FBSXhEO0tBQVM7SUFDaEMsSUFBSXlELE1BQU07SUFDVixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsYUFBYXpDLE1BQU0sRUFBRTJDLEtBQUssRUFBRztRQUM3QyxNQUFNQyxvQkFBb0JELElBQUksSUFBSUYsYUFBYUksS0FBSyxDQUFDLEdBQUcsQ0FBQ0YsS0FBS0Y7UUFDOUQsSUFBSSxNQUFPeEIsYUFBYTJCLHNCQUF1QjVCLFdBQVc7WUFDdEQwQixNQUFNRCxhQUFhekMsTUFBTSxHQUFHMkM7WUFDNUI7UUFDSjtJQUNKO0lBQ0EsSUFBSUQsTUFBTUQsYUFBYXpDLE1BQU0sR0FBRyxLQUFLc0MsaUJBQWlCO1FBQ2xELElBQUlRLGtCQUFrQjtRQUN0QixJQUFJbEUsTUFBTUMsT0FBTyxDQUFDNEQsWUFBWSxDQUFDQyxJQUFJLENBQUNqQyxPQUFPLEdBQUc7WUFDMUMsTUFBTXNDLFdBQVdOLFlBQVksQ0FBQ0MsSUFBSTtZQUNsQyxJQUFJLE9BQU9LLFNBQVN0QyxPQUFPLEtBQUssVUFBVTtnQkFDdEMsTUFBTSxJQUFJbkMsTUFBTTtZQUNwQjtZQUNBLE1BQU0wRSxXQUFXRCxTQUFTdEMsT0FBTyxDQUFDVCxNQUFNO1lBQ3hDLE1BQU1pRCxrQkFBa0JYLG9CQUFvQixTQUN0QzttQkFBSVMsU0FBU3RDLE9BQU87YUFBQyxDQUFDeUMsT0FBTyxLQUM3QkgsU0FBU3RDLE9BQU87WUFDdEIsSUFBSyxJQUFJa0MsSUFBSSxHQUFHQSxLQUFLSyxVQUFVTCxLQUFLLEVBQUc7Z0JBQ25DLE1BQU1RLGlCQUFpQmIsb0JBQW9CLFVBQ3JDVyxnQkFBZ0JKLEtBQUssQ0FBQyxHQUFHRixLQUN6Qk0sZ0JBQWdCSixLQUFLLENBQUMsQ0FBQ0Y7Z0JBQzdCLE1BQU1TLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0QsT0FBT0UsT0FBTyxDQUFDUixVQUFVUyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxFQUFFLEdBQUtBLE1BQU0sVUFBVSxDQUFDQSxFQUFFQyxVQUFVLENBQUM7Z0JBQ3pHLE1BQU1DLGlCQUFpQkMscUJBQXFCYixTQUFTMUUsT0FBTyxJQUFJO29CQUM1RCxHQUFHK0UsTUFBTTtvQkFDVDNDLFNBQVMwQztnQkFDYjtnQkFDQSxNQUFNVSxpQkFBaUI7dUJBQUlwQixhQUFhSSxLQUFLLENBQUMsR0FBR0g7b0JBQU1pQjtpQkFBZTtnQkFDdEUsSUFBSSxNQUFPMUMsYUFBYTRDLG1CQUFvQjdDLFdBQVc7b0JBQ25EeUIsZUFBZW9CO29CQUNmbkIsT0FBTztvQkFDUEksa0JBQWtCO2dCQUN0QixPQUNLO29CQUNEO2dCQUNKO1lBQ0o7WUFDQSxJQUFJQSxtQkFBbUJSLG9CQUFvQixRQUFRO2dCQUMvQ1MsU0FBU3RDLE9BQU8sR0FBRzt1QkFBSXdDO2lCQUFnQixDQUFDQyxPQUFPO1lBQ25EO1FBQ0o7UUFDQSxJQUFJLENBQUNKLGlCQUFpQjtZQUNsQixNQUFNQyxXQUFXTixZQUFZLENBQUNDLElBQUk7WUFDbEMsSUFBSU47WUFDSixJQUFJeEQsTUFBTUMsT0FBTyxDQUFDa0UsU0FBU3RDLE9BQU8sS0FDOUJzQyxTQUFTdEMsT0FBTyxDQUFDakMsSUFBSSxDQUFDLENBQUNzRixRQUFVLE9BQU9BLFVBQVUsWUFBWUEsTUFBTUMsSUFBSSxLQUFLLFNBQVM7Z0JBQ3RGLE1BQU1DLFlBQVlqQixTQUFTdEMsT0FBTyxDQUFDd0QsSUFBSSxDQUFDLENBQUNILFFBQVVBLE1BQU1DLElBQUksS0FBSyxVQUFVRCxNQUFNMUIsSUFBSTtnQkFDdEZBLE9BQU80QixXQUFXNUI7WUFDdEIsT0FDSyxJQUFJLE9BQU9XLFNBQVN0QyxPQUFPLEtBQUssVUFBVTtnQkFDM0MyQixPQUFPVyxTQUFTdEMsT0FBTztZQUMzQjtZQUNBLElBQUkyQixNQUFNO2dCQUNOLE1BQU04QixhQUFhLE1BQU0zQyxhQUFhYTtnQkFDdEMsTUFBTStCLFlBQVlELFdBQVdsRSxNQUFNO2dCQUNuQyxJQUFJc0Msb0JBQW9CLFFBQVE7b0JBQzVCNEIsV0FBV2hCLE9BQU87Z0JBQ3RCO2dCQUNBLElBQUssSUFBSWtCLElBQUksR0FBR0EsSUFBSUQsWUFBWSxHQUFHQyxLQUFLLEVBQUc7b0JBQ3ZDRixXQUFXOUQsR0FBRztvQkFDZDJDLFNBQVN0QyxPQUFPLEdBQUd5RCxXQUFXRyxJQUFJLENBQUM7b0JBQ25DLElBQUksTUFBT3BELGFBQWE7MkJBQUl3QixhQUFhSSxLQUFLLENBQUMsR0FBR0g7d0JBQU1LO3FCQUFTLEtBQzdEL0IsV0FBVzt3QkFDWCxJQUFJc0Isb0JBQW9CLFFBQVE7NEJBQzVCUyxTQUFTdEMsT0FBTyxHQUFHO21DQUFJeUQ7NkJBQVcsQ0FBQ2hCLE9BQU8sR0FBR21CLElBQUksQ0FBQzt3QkFDdEQ7d0JBQ0E1QixlQUFlOytCQUFJQSxhQUFhSSxLQUFLLENBQUMsR0FBR0g7NEJBQU1LO3lCQUFTO3dCQUN4REwsT0FBTzt3QkFDUDtvQkFDSjtnQkFDSjtZQUNKO1FBQ0o7SUFDSjtJQUNBLElBQUl0QixPQUFPO1FBQ1AsTUFBTWtELFdBQVcxRixNQUFNQyxPQUFPLENBQUN1QyxTQUFTQSxRQUFRO1lBQUNBO1NBQU07UUFDdkQsTUFBT3NCLE1BQU0sS0FBSyxDQUFDN0UsZUFBZTRFLFlBQVksQ0FBQ0MsTUFBTSxFQUFFLEVBQUU0QixVQUFXO1lBQ2hFNUIsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPRCxhQUFhSSxLQUFLLENBQUMsR0FBR0g7QUFDakM7QUFDQSxlQUFlRixlQUFldkQsUUFBUSxFQUFFTixPQUFPO0lBQzNDLE1BQU0sRUFBRXdDLGVBQWUsS0FBSyxFQUFFRyxnQkFBZ0IsS0FBSyxFQUFFRixLQUFLLEVBQUVDLE9BQU8sRUFBRSxHQUFHa0QsTUFBTSxHQUFHNUY7SUFDakYsOENBQThDO0lBQzlDLElBQUk4RCxlQUFleEQsU0FBU2YsR0FBRyxDQUFDLENBQUNzRztRQUM3QixNQUFNcEIsU0FBU0MsT0FBT0MsV0FBVyxDQUFDRCxPQUFPRSxPQUFPLENBQUNpQixTQUFTaEIsTUFBTSxDQUFDLENBQUMsQ0FBQ0MsRUFBRSxHQUFLQSxNQUFNLFVBQVUsQ0FBQ0EsRUFBRUMsVUFBVSxDQUFDO1FBQ3hHLE9BQU9FLHFCQUFxQlksUUFBUW5HLE9BQU8sSUFBSStFLFFBQVFwRyw0REFBa0JBLENBQUN3SDtJQUM5RTtJQUNBLElBQUlwRCxPQUFPO1FBQ1AsTUFBTWtELFdBQVcxRixNQUFNQyxPQUFPLENBQUN1QyxTQUFTQSxRQUFRO1lBQUNBO1NBQU07UUFDdkQsTUFBT3FCLGFBQWF6QyxNQUFNLEdBQUcsS0FDekIsQ0FBQ25DLGVBQWU0RSxZQUFZLENBQUNBLGFBQWF6QyxNQUFNLEdBQUcsRUFBRSxFQUFFc0UsVUFBVztZQUNsRTdCLGVBQWVBLGFBQWFJLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDMUM7SUFDSjtJQUNBLE1BQU00QixnQkFBZ0JuRCxpQkFBaUJtQixZQUFZLENBQUMsRUFBRSxFQUFFcEUsY0FBYztJQUN0RSxJQUFJcUcsWUFBWUQsZ0JBQ1ZoQyxhQUFhSSxLQUFLLENBQUMsR0FBRyxHQUFHckMsTUFBTSxDQUFDaUMsYUFBYUksS0FBSyxDQUFDLEdBQUdLLE9BQU8sTUFDN0RULGFBQWFTLE9BQU87SUFDMUJ3QixZQUFZLE1BQU1yQyxnQkFBZ0JxQyxXQUFXO1FBQ3pDLEdBQUdILElBQUk7UUFDUGpDLGlCQUFpQm5CLGVBQWUsU0FBU29CO1FBQ3pDbkIsT0FBT0M7SUFDWDtJQUNBLElBQUlvRCxlQUFlO1FBQ2YsT0FBTztZQUFDQyxTQUFTLENBQUMsRUFBRTtlQUFLQSxVQUFVN0IsS0FBSyxDQUFDLEdBQUdLLE9BQU87U0FBRztJQUMxRCxPQUNLO1FBQ0QsT0FBT3dCLFVBQVV4QixPQUFPO0lBQzVCO0FBQ0o7QUFDQSxNQUFNeUIsaUJBQWlCO0lBQ25CQyxPQUFPO1FBQ0hKLFNBQVNuSCxtREFBWUE7UUFDckJ3SCxjQUFjdkgsd0RBQWlCQTtJQUNuQztJQUNBd0gsSUFBSTtRQUNBTixTQUFTMUgsNkNBQVNBO1FBQ2xCK0gsY0FBYzlILGtEQUFjQTtJQUNoQztJQUNBZ0ksUUFBUTtRQUNKUCxTQUFTaEgscURBQWFBO1FBQ3RCcUgsY0FBY3BILDBEQUFrQkE7SUFDcEM7SUFDQXVILFdBQVc7UUFDUFIsU0FBU2hILHFEQUFhQTtRQUN0QnFILGNBQWNwSCwwREFBa0JBO0lBQ3BDO0lBQ0F3SCxNQUFNO1FBQ0ZULFNBQVM5RyxpREFBV0E7UUFDcEJtSCxjQUFjbEgsc0RBQWdCQTtJQUNsQztJQUNBdUgsVUFBVTtRQUNOVixTQUFTckgseURBQWVBO1FBQ3hCMEgsY0FBY3pILDhEQUFvQkE7SUFDdEM7SUFDQStILFNBQVM7UUFDTFgsU0FBU3ZILGlEQUFXQTtRQUNwQjRILGNBQWMzSCxzREFBZ0JBO0lBQ2xDO0lBQ0FrSSxRQUFRO1FBQ0paLFNBQVNqSCx1REFBYUE7UUFDdEJzSCxjQUFjdEgsdURBQWFBO0lBQy9CO0FBQ0o7QUFDQSxTQUFTcUcscUJBQXFCeUIsV0FBVyxFQUFFakMsTUFBTSxFQUFFa0MsV0FBVztJQUMxRCxJQUFJQztJQUNKLElBQUl6SDtJQUNKLE9BQVF1SDtRQUNKLEtBQUs7WUFDRCxJQUFJQyxhQUFhO2dCQUNiQyxRQUFRLElBQUlqSSx3REFBaUJBLENBQUM4RjtZQUNsQyxPQUNLO2dCQUNEdEYsTUFBTSxJQUFJVCxtREFBWUEsQ0FBQytGO1lBQzNCO1lBQ0E7UUFDSixLQUFLO1lBQ0QsSUFBSWtDLGFBQWE7Z0JBQ2IsSUFBSUUsZ0JBQWdCO29CQUNoQixHQUFHcEMsTUFBTTtnQkFDYjtnQkFDQSxJQUFJLGdCQUFnQm9DLGVBQWU7b0JBQy9CQSxnQkFBZ0I7d0JBQ1osR0FBR0EsYUFBYTt3QkFDaEJDLGtCQUFrQkQsY0FBY0UsVUFBVSxFQUFFeEgsSUFBSSxDQUFDeUgsS0FBUTtnQ0FDckQsR0FBR0EsRUFBRTtnQ0FDTDVCLE1BQU07Z0NBQ042QixPQUFPckQ7Z0NBQ1BzRCxNQUFNQyxLQUFLQyxTQUFTLENBQUNKLEdBQUdFLElBQUk7NEJBQ2hDO29CQUNKO2dCQUNKO2dCQUNBTixRQUFRLElBQUl4SSxrREFBY0EsQ0FBQ3lJO1lBQy9CLE9BQ0s7Z0JBQ0QxSCxNQUFNLElBQUloQiw2Q0FBU0EsQ0FBQ3NHO1lBQ3hCO1lBQ0E7UUFDSixLQUFLO1lBQ0QsSUFBSWtDLGFBQWE7Z0JBQ2JDLFFBQVEsSUFBSTlILDBEQUFrQkEsQ0FBQzJGO1lBQ25DLE9BQ0s7Z0JBQ0R0RixNQUFNLElBQUlOLHFEQUFhQSxDQUFDNEY7WUFDNUI7WUFDQTtRQUNKLEtBQUs7WUFDRCxJQUFJa0MsYUFBYTtnQkFDYkMsUUFBUSxJQUFJOUgsMERBQWtCQSxDQUFDO29CQUMzQixHQUFHMkYsTUFBTTtvQkFDVDRDLG1CQUFtQjt3QkFDZixHQUFHNUMsT0FBTzRDLGlCQUFpQjt3QkFDM0JDLGlCQUFpQjtvQkFDckI7Z0JBQ0o7WUFDSixPQUNLO2dCQUNEbkksTUFBTSxJQUFJTixxREFBYUEsQ0FBQztvQkFDcEIsR0FBRzRGLE1BQU07b0JBQ1Q0QyxtQkFBbUI7d0JBQ2YsR0FBRzVDLE9BQU80QyxpQkFBaUI7d0JBQzNCQyxpQkFBaUI7b0JBQ3JCO2dCQUNKO1lBQ0o7WUFDQTtRQUNKLEtBQUs7WUFDRCxJQUFJLGtCQUFrQjdDLFFBQVE7Z0JBQzFCLElBQUlrQyxhQUFhO29CQUNiQyxRQUFRLElBQUk1SCxzREFBZ0JBLENBQUN5RjtnQkFDakMsT0FDSztvQkFDRHRGLE1BQU0sSUFBSUosaURBQVdBLENBQUMwRjtnQkFDMUI7WUFDSixPQUNLO2dCQUNELE1BQU0sSUFBSTlFLE1BQU07WUFDcEI7WUFDQTtRQUNKLEtBQUs7WUFDRCxJQUFJZ0gsYUFBYTtnQkFDYkMsUUFBUSxJQUFJbkksOERBQW9CQSxDQUFDZ0c7WUFDckMsT0FDSztnQkFDRCxJQUFJLENBQUNBLE9BQU8zRCxJQUFJLEVBQUU7b0JBQ2QsTUFBTSxJQUFJbkIsTUFBTTtnQkFDcEI7Z0JBQ0FSLE1BQU0sSUFBSVgseURBQWVBLENBQUNpRztZQUM5QjtZQUNBO1FBQ0osS0FBSztZQUNELElBQUksVUFBVUEsUUFBUTtnQkFDbEIsSUFBSWtDLGFBQWE7b0JBQ2JDLFFBQVEsSUFBSXJJLHNEQUFnQkEsQ0FBQ2tHO2dCQUNqQyxPQUNLO29CQUNEdEYsTUFBTSxJQUFJYixpREFBV0EsQ0FBQ21HO2dCQUMxQjtZQUNKLE9BQ0s7Z0JBQ0QsTUFBTSxJQUFJOUUsTUFBTTtZQUNwQjtZQUNBO1FBQ0o7WUFDSSxNQUFNLElBQUlBLE1BQU0sQ0FBQywwQkFBMEIsRUFBRStHLFlBQVksQ0FBQztJQUNsRTtJQUNBLElBQUlDLGVBQWVDLE9BQU87UUFDdEIsT0FBT0E7SUFDWDtJQUNBLElBQUl6SCxLQUFLO1FBQ0wsT0FBT0E7SUFDWDtJQUNBLE1BQU0sSUFBSVEsTUFBTSxDQUFDLDBCQUEwQixFQUFFK0csWUFBWSxDQUFDO0FBQzlEO0FBQ0EsU0FBUzNFLFlBQVk2RSxLQUFLO0lBQ3RCLE1BQU1XLFlBQVlYLE1BQU1sSCxPQUFPO0lBQy9CLElBQUlQO0lBQ0osTUFBTXNGLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0QsT0FBT0UsT0FBTyxDQUFDZ0MsT0FBTy9CLE1BQU0sQ0FBQyxDQUFDLENBQUNDLEVBQUUsR0FBSyxDQUFDO1lBQUM7WUFBUTtTQUFtQixDQUFDL0QsUUFBUSxDQUFDK0QsTUFBTSxDQUFDQSxFQUFFQyxVQUFVLENBQUM7SUFDbkksSUFBSXdDLGFBQWF2QixnQkFBZ0I7UUFDN0I3RyxNQUFNOEYscUJBQXFCc0MsV0FBVzlDO0lBQzFDO0lBQ0EsSUFBSSxDQUFDdEYsS0FBSztRQUNOLE1BQU0sSUFBSVEsTUFBTSxDQUFDLGlDQUFpQyxFQUFFNEgsVUFBVSx3QkFBd0IsRUFBRTdDLE9BQU84QyxJQUFJLENBQUN4QixnQkFBZ0IsQ0FBQztJQUN6SDtJQUNBLE9BQU83RztBQUNYO0FBQ0E7Ozs7O0NBS0MsR0FDTSxTQUFTb0Usb0JBQW9CRSxJQUFJO0lBQ3BDLE1BQU1nRSxTQUFTaEUsS0FBS2lFLEtBQUssQ0FBQztJQUMxQixPQUFPMUUsUUFBUTJFLE9BQU8sQ0FBQztXQUNoQkYsT0FBT3ZELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRzNFLEdBQUcsQ0FBQyxDQUFDcUksSUFBTSxDQUFDLEVBQUVBLEVBQUUsRUFBRSxDQUFDO1FBQzFDSCxNQUFNLENBQUNBLE9BQU9wRyxNQUFNLEdBQUcsRUFBRTtLQUM1QjtBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL3RyYW5zZm9ybWVycy5qcz8wNjMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1bm5hYmxlTGFtYmRhIH0gZnJvbSBcIi4uL3J1bm5hYmxlcy9iYXNlLmpzXCI7XG5pbXBvcnQgeyBBSU1lc3NhZ2UsIEFJTWVzc2FnZUNodW5rIH0gZnJvbSBcIi4vYWkuanNcIjtcbmltcG9ydCB7IGlzQmFzZU1lc3NhZ2VDaHVuaywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBDaGF0TWVzc2FnZSwgQ2hhdE1lc3NhZ2VDaHVuaywgfSBmcm9tIFwiLi9jaGF0LmpzXCI7XG5pbXBvcnQgeyBGdW5jdGlvbk1lc3NhZ2UsIEZ1bmN0aW9uTWVzc2FnZUNodW5rLCB9IGZyb20gXCIuL2Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBIdW1hbk1lc3NhZ2UsIEh1bWFuTWVzc2FnZUNodW5rIH0gZnJvbSBcIi4vaHVtYW4uanNcIjtcbmltcG9ydCB7IFJlbW92ZU1lc3NhZ2UgfSBmcm9tIFwiLi9tb2RpZmllci5qc1wiO1xuaW1wb3J0IHsgU3lzdGVtTWVzc2FnZSwgU3lzdGVtTWVzc2FnZUNodW5rIH0gZnJvbSBcIi4vc3lzdGVtLmpzXCI7XG5pbXBvcnQgeyBUb29sTWVzc2FnZSwgVG9vbE1lc3NhZ2VDaHVuaywgfSBmcm9tIFwiLi90b29sLmpzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9DaHVuayB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5jb25zdCBfaXNNZXNzYWdlVHlwZSA9IChtc2csIHR5cGVzKSA9PiB7XG4gICAgY29uc3QgdHlwZXNBc1N0cmluZ3MgPSBbXG4gICAgICAgIC4uLm5ldyBTZXQodHlwZXM/Lm1hcCgodCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgY29uc3QgaW5zdGFudGlhdGVkTXNnQ2xhc3MgPSBuZXcgdCh7fSk7XG4gICAgICAgICAgICBpZiAoIShcImdldFR5cGVcIiBpbiBpbnN0YW50aWF0ZWRNc2dDbGFzcykgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgaW5zdGFudGlhdGVkTXNnQ2xhc3MuZ2V0VHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0eXBlIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnN0YW50aWF0ZWRNc2dDbGFzcy5nZXRUeXBlKCk7XG4gICAgICAgIH0pKSxcbiAgICBdO1xuICAgIGNvbnN0IG1zZ1R5cGUgPSBtc2cuZ2V0VHlwZSgpO1xuICAgIHJldHVybiB0eXBlc0FzU3RyaW5ncy5zb21lKCh0KSA9PiB0ID09PSBtc2dUeXBlKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyTWVzc2FnZXMobWVzc2FnZXNPck9wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlc09yT3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIF9maWx0ZXJNZXNzYWdlcyhtZXNzYWdlc09yT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBSdW5uYWJsZUxhbWJkYS5mcm9tKChpbnB1dCkgPT4ge1xuICAgICAgICByZXR1cm4gX2ZpbHRlck1lc3NhZ2VzKGlucHV0LCBtZXNzYWdlc09yT3B0aW9ucyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfZmlsdGVyTWVzc2FnZXMobWVzc2FnZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgaW5jbHVkZU5hbWVzLCBleGNsdWRlTmFtZXMsIGluY2x1ZGVUeXBlcywgZXhjbHVkZVR5cGVzLCBpbmNsdWRlSWRzLCBleGNsdWRlSWRzLCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBmaWx0ZXJlZCA9IFtdO1xuICAgIGZvciAoY29uc3QgbXNnIG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgIGlmIChleGNsdWRlTmFtZXMgJiYgbXNnLm5hbWUgJiYgZXhjbHVkZU5hbWVzLmluY2x1ZGVzKG1zZy5uYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhjbHVkZVR5cGVzICYmIF9pc01lc3NhZ2VUeXBlKG1zZywgZXhjbHVkZVR5cGVzKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhjbHVkZUlkcyAmJiBtc2cuaWQgJiYgZXhjbHVkZUlkcy5pbmNsdWRlcyhtc2cuaWQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkZWZhdWx0IHRvIGluY2x1c2lvbiB3aGVuIG5vIGluY2x1c2lvbiBjcml0ZXJpYSBnaXZlbi5cbiAgICAgICAgaWYgKCEoaW5jbHVkZVR5cGVzIHx8IGluY2x1ZGVJZHMgfHwgaW5jbHVkZU5hbWVzKSkge1xuICAgICAgICAgICAgZmlsdGVyZWQucHVzaChtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluY2x1ZGVOYW1lcyAmJlxuICAgICAgICAgICAgbXNnLm5hbWUgJiZcbiAgICAgICAgICAgIGluY2x1ZGVOYW1lcy5zb21lKChpTmFtZSkgPT4gaU5hbWUgPT09IG1zZy5uYW1lKSkge1xuICAgICAgICAgICAgZmlsdGVyZWQucHVzaChtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluY2x1ZGVUeXBlcyAmJiBfaXNNZXNzYWdlVHlwZShtc2csIGluY2x1ZGVUeXBlcykpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkLnB1c2gobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbmNsdWRlSWRzICYmIG1zZy5pZCAmJiBpbmNsdWRlSWRzLnNvbWUoKGlkKSA9PiBpZCA9PT0gbXNnLmlkKSkge1xuICAgICAgICAgICAgZmlsdGVyZWQucHVzaChtc2cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1lc3NhZ2VSdW5zKG1lc3NhZ2VzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZXMpKSB7XG4gICAgICAgIHJldHVybiBfbWVyZ2VNZXNzYWdlUnVucyhtZXNzYWdlcyk7XG4gICAgfVxuICAgIHJldHVybiBSdW5uYWJsZUxhbWJkYS5mcm9tKF9tZXJnZU1lc3NhZ2VSdW5zKTtcbn1cbmZ1bmN0aW9uIF9tZXJnZU1lc3NhZ2VSdW5zKG1lc3NhZ2VzKSB7XG4gICAgaWYgKCFtZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG1zZyBvZiBtZXNzYWdlcykge1xuICAgICAgICBjb25zdCBjdXJyID0gbXNnO1xuICAgICAgICBjb25zdCBsYXN0ID0gbWVyZ2VkLnBvcCgpO1xuICAgICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgICAgIG1lcmdlZC5wdXNoKGN1cnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnIuZ2V0VHlwZSgpID09PSBcInRvb2xcIiB8fFxuICAgICAgICAgICAgIShjdXJyLmdldFR5cGUoKSA9PT0gbGFzdC5nZXRUeXBlKCkpKSB7XG4gICAgICAgICAgICBtZXJnZWQucHVzaChsYXN0LCBjdXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RDaHVuayA9IGNvbnZlcnRUb0NodW5rKGxhc3QpO1xuICAgICAgICAgICAgY29uc3QgY3VyckNodW5rID0gY29udmVydFRvQ2h1bmsoY3Vycik7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWRDaHVua3MgPSBsYXN0Q2h1bmsuY29uY2F0KGN1cnJDaHVuayk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RDaHVuay5jb250ZW50ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGN1cnJDaHVuay5jb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkQ2h1bmtzLmNvbnRlbnQgPSBgJHtsYXN0Q2h1bmsuY29udGVudH1cXG4ke2N1cnJDaHVuay5jb250ZW50fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXJnZWQucHVzaChfY2h1bmtUb01zZyhtZXJnZWRDaHVua3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyaW1NZXNzYWdlcyhtZXNzYWdlc09yT3B0aW9ucywgb3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2VzT3JPcHRpb25zKSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IG1lc3NhZ2VzT3JPcHRpb25zO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbnMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gcHJvdmlkaW5nIG1lc3NhZ2VzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RyaW1NZXNzYWdlc0hlbHBlcihtZXNzYWdlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0cmltbWVyT3B0aW9ucyA9IG1lc3NhZ2VzT3JPcHRpb25zO1xuICAgICAgICByZXR1cm4gUnVubmFibGVMYW1iZGEuZnJvbSgoaW5wdXQpID0+IF90cmltTWVzc2FnZXNIZWxwZXIoaW5wdXQsIHRyaW1tZXJPcHRpb25zKSkud2l0aENvbmZpZyh7XG4gICAgICAgICAgICBydW5OYW1lOiBcInRyaW1fbWVzc2FnZXNcIixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gX3RyaW1NZXNzYWdlc0hlbHBlcihtZXNzYWdlcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWF4VG9rZW5zLCB0b2tlbkNvdW50ZXIsIHN0cmF0ZWd5ID0gXCJsYXN0XCIsIGFsbG93UGFydGlhbCA9IGZhbHNlLCBlbmRPbiwgc3RhcnRPbiwgaW5jbHVkZVN5c3RlbSA9IGZhbHNlLCB0ZXh0U3BsaXR0ZXIsIH0gPSBvcHRpb25zO1xuICAgIGlmIChzdGFydE9uICYmIHN0cmF0ZWd5ID09PSBcImZpcnN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYHN0YXJ0T25gIHNob3VsZCBvbmx5IGJlIHNwZWNpZmllZCBpZiBgc3RyYXRlZ3lgIGlzICdsYXN0Jy5cIik7XG4gICAgfVxuICAgIGlmIChpbmNsdWRlU3lzdGVtICYmIHN0cmF0ZWd5ID09PSBcImZpcnN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGluY2x1ZGVTeXN0ZW1gIHNob3VsZCBvbmx5IGJlIHNwZWNpZmllZCBpZiBgc3RyYXRlZ3lgIGlzICdsYXN0Jy5cIik7XG4gICAgfVxuICAgIGxldCBsaXN0VG9rZW5Db3VudGVyO1xuICAgIGlmIChcImdldE51bVRva2Vuc1wiIGluIHRva2VuQ291bnRlcikge1xuICAgICAgICBsaXN0VG9rZW5Db3VudGVyID0gYXN5bmMgKG1zZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuQ291bnRzID0gYXdhaXQgUHJvbWlzZS5hbGwobXNncy5tYXAoKG1zZykgPT4gdG9rZW5Db3VudGVyLmdldE51bVRva2Vucyhtc2cuY29udGVudCkpKTtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbkNvdW50cy5yZWR1Y2UoKHN1bSwgY291bnQpID0+IHN1bSArIGNvdW50LCAwKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxpc3RUb2tlbkNvdW50ZXIgPSBhc3luYyAobXNncykgPT4gdG9rZW5Db3VudGVyKG1zZ3MpO1xuICAgIH1cbiAgICBsZXQgdGV4dFNwbGl0dGVyRnVuYyA9IGRlZmF1bHRUZXh0U3BsaXR0ZXI7XG4gICAgaWYgKHRleHRTcGxpdHRlcikge1xuICAgICAgICBpZiAoXCJzcGxpdFRleHRcIiBpbiB0ZXh0U3BsaXR0ZXIpIHtcbiAgICAgICAgICAgIHRleHRTcGxpdHRlckZ1bmMgPSB0ZXh0U3BsaXR0ZXIuc3BsaXRUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGV4dFNwbGl0dGVyRnVuYyA9IGFzeW5jICh0ZXh0KSA9PiB0ZXh0U3BsaXR0ZXIodGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0cmF0ZWd5ID09PSBcImZpcnN0XCIpIHtcbiAgICAgICAgcmV0dXJuIF9maXJzdE1heFRva2VucyhtZXNzYWdlcywge1xuICAgICAgICAgICAgbWF4VG9rZW5zLFxuICAgICAgICAgICAgdG9rZW5Db3VudGVyOiBsaXN0VG9rZW5Db3VudGVyLFxuICAgICAgICAgICAgdGV4dFNwbGl0dGVyOiB0ZXh0U3BsaXR0ZXJGdW5jLFxuICAgICAgICAgICAgcGFydGlhbFN0cmF0ZWd5OiBhbGxvd1BhcnRpYWwgPyBcImZpcnN0XCIgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBlbmRPbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0cmF0ZWd5ID09PSBcImxhc3RcIikge1xuICAgICAgICByZXR1cm4gX2xhc3RNYXhUb2tlbnMobWVzc2FnZXMsIHtcbiAgICAgICAgICAgIG1heFRva2VucyxcbiAgICAgICAgICAgIHRva2VuQ291bnRlcjogbGlzdFRva2VuQ291bnRlcixcbiAgICAgICAgICAgIHRleHRTcGxpdHRlcjogdGV4dFNwbGl0dGVyRnVuYyxcbiAgICAgICAgICAgIGFsbG93UGFydGlhbCxcbiAgICAgICAgICAgIGluY2x1ZGVTeXN0ZW0sXG4gICAgICAgICAgICBzdGFydE9uLFxuICAgICAgICAgICAgZW5kT24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgc3RyYXRlZ3k6ICcke3N0cmF0ZWd5fScuIE11c3QgYmUgb25lIG9mICdmaXJzdCcgb3IgJ2xhc3QnLmApO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIF9maXJzdE1heFRva2VucyhtZXNzYWdlcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWF4VG9rZW5zLCB0b2tlbkNvdW50ZXIsIHRleHRTcGxpdHRlciwgcGFydGlhbFN0cmF0ZWd5LCBlbmRPbiB9ID0gb3B0aW9ucztcbiAgICBsZXQgbWVzc2FnZXNDb3B5ID0gWy4uLm1lc3NhZ2VzXTtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzQ29weS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCByZW1haW5pbmdNZXNzYWdlcyA9IGkgPiAwID8gbWVzc2FnZXNDb3B5LnNsaWNlKDAsIC1pKSA6IG1lc3NhZ2VzQ29weTtcbiAgICAgICAgaWYgKChhd2FpdCB0b2tlbkNvdW50ZXIocmVtYWluaW5nTWVzc2FnZXMpKSA8PSBtYXhUb2tlbnMpIHtcbiAgICAgICAgICAgIGlkeCA9IG1lc3NhZ2VzQ29weS5sZW5ndGggLSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlkeCA8IG1lc3NhZ2VzQ29weS5sZW5ndGggLSAxICYmIHBhcnRpYWxTdHJhdGVneSkge1xuICAgICAgICBsZXQgaW5jbHVkZWRQYXJ0aWFsID0gZmFsc2U7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2VzQ29weVtpZHhdLmNvbnRlbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBleGNsdWRlZCA9IG1lc3NhZ2VzQ29weVtpZHhdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBleGNsdWRlZC5jb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgY29udGVudCB0byBiZSBhbiBhcnJheS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBudW1CbG9jayA9IGV4Y2x1ZGVkLmNvbnRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgcmV2ZXJzZWRDb250ZW50ID0gcGFydGlhbFN0cmF0ZWd5ID09PSBcImxhc3RcIlxuICAgICAgICAgICAgICAgID8gWy4uLmV4Y2x1ZGVkLmNvbnRlbnRdLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIDogZXhjbHVkZWQuY29udGVudDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG51bUJsb2NrOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWFsQ29udGVudCA9IHBhcnRpYWxTdHJhdGVneSA9PT0gXCJmaXJzdFwiXG4gICAgICAgICAgICAgICAgICAgID8gcmV2ZXJzZWRDb250ZW50LnNsaWNlKDAsIGkpXG4gICAgICAgICAgICAgICAgICAgIDogcmV2ZXJzZWRDb250ZW50LnNsaWNlKC1pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZXhjbHVkZWQpLmZpbHRlcigoW2tdKSA9PiBrICE9PSBcInR5cGVcIiAmJiAhay5zdGFydHNXaXRoKFwibGNfXCIpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE1lc3NhZ2UgPSBfc3dpdGNoVHlwZVRvTWVzc2FnZShleGNsdWRlZC5nZXRUeXBlKCksIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZmllbGRzLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBwYXJ0aWFsQ29udGVudCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzbGljZWRNZXNzYWdlcyA9IFsuLi5tZXNzYWdlc0NvcHkuc2xpY2UoMCwgaWR4KSwgdXBkYXRlZE1lc3NhZ2VdO1xuICAgICAgICAgICAgICAgIGlmICgoYXdhaXQgdG9rZW5Db3VudGVyKHNsaWNlZE1lc3NhZ2VzKSkgPD0gbWF4VG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29weSA9IHNsaWNlZE1lc3NhZ2VzO1xuICAgICAgICAgICAgICAgICAgICBpZHggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWRQYXJ0aWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmNsdWRlZFBhcnRpYWwgJiYgcGFydGlhbFN0cmF0ZWd5ID09PSBcImxhc3RcIikge1xuICAgICAgICAgICAgICAgIGV4Y2x1ZGVkLmNvbnRlbnQgPSBbLi4ucmV2ZXJzZWRDb250ZW50XS5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbmNsdWRlZFBhcnRpYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkID0gbWVzc2FnZXNDb3B5W2lkeF07XG4gICAgICAgICAgICBsZXQgdGV4dDtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4Y2x1ZGVkLmNvbnRlbnQpICYmXG4gICAgICAgICAgICAgICAgZXhjbHVkZWQuY29udGVudC5zb21lKChibG9jaykgPT4gdHlwZW9mIGJsb2NrID09PSBcInN0cmluZ1wiIHx8IGJsb2NrLnR5cGUgPT09IFwidGV4dFwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRCbG9jayA9IGV4Y2x1ZGVkLmNvbnRlbnQuZmluZCgoYmxvY2spID0+IGJsb2NrLnR5cGUgPT09IFwidGV4dFwiICYmIGJsb2NrLnRleHQpO1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0QmxvY2s/LnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZXhjbHVkZWQuY29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHRleHQgPSBleGNsdWRlZC5jb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFRleHRzID0gYXdhaXQgdGV4dFNwbGl0dGVyKHRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bVNwbGl0cyA9IHNwbGl0VGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWFsU3RyYXRlZ3kgPT09IFwibGFzdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0VGV4dHMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBfID0gMDsgXyA8IG51bVNwbGl0cyAtIDE7IF8gKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFRleHRzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBleGNsdWRlZC5jb250ZW50ID0gc3BsaXRUZXh0cy5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGF3YWl0IHRva2VuQ291bnRlcihbLi4ubWVzc2FnZXNDb3B5LnNsaWNlKDAsIGlkeCksIGV4Y2x1ZGVkXSkpIDw9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhUb2tlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0aWFsU3RyYXRlZ3kgPT09IFwibGFzdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZWQuY29udGVudCA9IFsuLi5zcGxpdFRleHRzXS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29weSA9IFsuLi5tZXNzYWdlc0NvcHkuc2xpY2UoMCwgaWR4KSwgZXhjbHVkZWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5kT24pIHtcbiAgICAgICAgY29uc3QgZW5kT25BcnIgPSBBcnJheS5pc0FycmF5KGVuZE9uKSA/IGVuZE9uIDogW2VuZE9uXTtcbiAgICAgICAgd2hpbGUgKGlkeCA+IDAgJiYgIV9pc01lc3NhZ2VUeXBlKG1lc3NhZ2VzQ29weVtpZHggLSAxXSwgZW5kT25BcnIpKSB7XG4gICAgICAgICAgICBpZHggLT0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZXNDb3B5LnNsaWNlKDAsIGlkeCk7XG59XG5hc3luYyBmdW5jdGlvbiBfbGFzdE1heFRva2VucyhtZXNzYWdlcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgYWxsb3dQYXJ0aWFsID0gZmFsc2UsIGluY2x1ZGVTeXN0ZW0gPSBmYWxzZSwgZW5kT24sIHN0YXJ0T24sIC4uLnJlc3QgfSA9IG9wdGlvbnM7XG4gICAgLy8gQ3JlYXRlIGEgY29weSBvZiBtZXNzYWdlcyB0byBhdm9pZCBtdXRhdGlvblxuICAgIGxldCBtZXNzYWdlc0NvcHkgPSBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKG1lc3NhZ2UpLmZpbHRlcigoW2tdKSA9PiBrICE9PSBcInR5cGVcIiAmJiAhay5zdGFydHNXaXRoKFwibGNfXCIpKSk7XG4gICAgICAgIHJldHVybiBfc3dpdGNoVHlwZVRvTWVzc2FnZShtZXNzYWdlLmdldFR5cGUoKSwgZmllbGRzLCBpc0Jhc2VNZXNzYWdlQ2h1bmsobWVzc2FnZSkpO1xuICAgIH0pO1xuICAgIGlmIChlbmRPbikge1xuICAgICAgICBjb25zdCBlbmRPbkFyciA9IEFycmF5LmlzQXJyYXkoZW5kT24pID8gZW5kT24gOiBbZW5kT25dO1xuICAgICAgICB3aGlsZSAobWVzc2FnZXNDb3B5Lmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICFfaXNNZXNzYWdlVHlwZShtZXNzYWdlc0NvcHlbbWVzc2FnZXNDb3B5Lmxlbmd0aCAtIDFdLCBlbmRPbkFycikpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzQ29weSA9IG1lc3NhZ2VzQ29weS5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3dhcHBlZFN5c3RlbSA9IGluY2x1ZGVTeXN0ZW0gJiYgbWVzc2FnZXNDb3B5WzBdPy5nZXRUeXBlKCkgPT09IFwic3lzdGVtXCI7XG4gICAgbGV0IHJldmVyc2VkXyA9IHN3YXBwZWRTeXN0ZW1cbiAgICAgICAgPyBtZXNzYWdlc0NvcHkuc2xpY2UoMCwgMSkuY29uY2F0KG1lc3NhZ2VzQ29weS5zbGljZSgxKS5yZXZlcnNlKCkpXG4gICAgICAgIDogbWVzc2FnZXNDb3B5LnJldmVyc2UoKTtcbiAgICByZXZlcnNlZF8gPSBhd2FpdCBfZmlyc3RNYXhUb2tlbnMocmV2ZXJzZWRfLCB7XG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIHBhcnRpYWxTdHJhdGVneTogYWxsb3dQYXJ0aWFsID8gXCJsYXN0XCIgOiB1bmRlZmluZWQsXG4gICAgICAgIGVuZE9uOiBzdGFydE9uLFxuICAgIH0pO1xuICAgIGlmIChzd2FwcGVkU3lzdGVtKSB7XG4gICAgICAgIHJldHVybiBbcmV2ZXJzZWRfWzBdLCAuLi5yZXZlcnNlZF8uc2xpY2UoMSkucmV2ZXJzZSgpXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXZlcnNlZF8ucmV2ZXJzZSgpO1xuICAgIH1cbn1cbmNvbnN0IF9NU0dfQ0hVTktfTUFQID0ge1xuICAgIGh1bWFuOiB7XG4gICAgICAgIG1lc3NhZ2U6IEh1bWFuTWVzc2FnZSxcbiAgICAgICAgbWVzc2FnZUNodW5rOiBIdW1hbk1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIGFpOiB7XG4gICAgICAgIG1lc3NhZ2U6IEFJTWVzc2FnZSxcbiAgICAgICAgbWVzc2FnZUNodW5rOiBBSU1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIHN5c3RlbToge1xuICAgICAgICBtZXNzYWdlOiBTeXN0ZW1NZXNzYWdlLFxuICAgICAgICBtZXNzYWdlQ2h1bms6IFN5c3RlbU1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIGRldmVsb3Blcjoge1xuICAgICAgICBtZXNzYWdlOiBTeXN0ZW1NZXNzYWdlLFxuICAgICAgICBtZXNzYWdlQ2h1bms6IFN5c3RlbU1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIHRvb2w6IHtcbiAgICAgICAgbWVzc2FnZTogVG9vbE1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2VDaHVuazogVG9vbE1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIG1lc3NhZ2U6IEZ1bmN0aW9uTWVzc2FnZSxcbiAgICAgICAgbWVzc2FnZUNodW5rOiBGdW5jdGlvbk1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIGdlbmVyaWM6IHtcbiAgICAgICAgbWVzc2FnZTogQ2hhdE1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2VDaHVuazogQ2hhdE1lc3NhZ2VDaHVuayxcbiAgICB9LFxuICAgIHJlbW92ZToge1xuICAgICAgICBtZXNzYWdlOiBSZW1vdmVNZXNzYWdlLFxuICAgICAgICBtZXNzYWdlQ2h1bms6IFJlbW92ZU1lc3NhZ2UsIC8vIFJlbW92ZU1lc3NhZ2UgZG9lcyBub3QgaGF2ZSBhIGNodW5rIGNsYXNzLlxuICAgIH0sXG59O1xuZnVuY3Rpb24gX3N3aXRjaFR5cGVUb01lc3NhZ2UobWVzc2FnZVR5cGUsIGZpZWxkcywgcmV0dXJuQ2h1bmspIHtcbiAgICBsZXQgY2h1bms7XG4gICAgbGV0IG1zZztcbiAgICBzd2l0Y2ggKG1lc3NhZ2VUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJodW1hblwiOlxuICAgICAgICAgICAgaWYgKHJldHVybkNodW5rKSB7XG4gICAgICAgICAgICAgICAgY2h1bmsgPSBuZXcgSHVtYW5NZXNzYWdlQ2h1bmsoZmllbGRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1zZyA9IG5ldyBIdW1hbk1lc3NhZ2UoZmllbGRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYWlcIjpcbiAgICAgICAgICAgIGlmIChyZXR1cm5DaHVuaykge1xuICAgICAgICAgICAgICAgIGxldCBhaUNodW5rRmllbGRzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ0b29sX2NhbGxzXCIgaW4gYWlDaHVua0ZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICBhaUNodW5rRmllbGRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uYWlDaHVua0ZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfY2FsbF9jaHVua3M6IGFpQ2h1bmtGaWVsZHMudG9vbF9jYWxscz8ubWFwKCh0YykgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50YyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2xfY2FsbF9jaHVua1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogSlNPTi5zdHJpbmdpZnkodGMuYXJncyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNodW5rID0gbmV3IEFJTWVzc2FnZUNodW5rKGFpQ2h1bmtGaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbXNnID0gbmV3IEFJTWVzc2FnZShmaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzeXN0ZW1cIjpcbiAgICAgICAgICAgIGlmIChyZXR1cm5DaHVuaykge1xuICAgICAgICAgICAgICAgIGNodW5rID0gbmV3IFN5c3RlbU1lc3NhZ2VDaHVuayhmaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbXNnID0gbmV3IFN5c3RlbU1lc3NhZ2UoZmllbGRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGV2ZWxvcGVyXCI6XG4gICAgICAgICAgICBpZiAocmV0dXJuQ2h1bmspIHtcbiAgICAgICAgICAgICAgICBjaHVuayA9IG5ldyBTeXN0ZW1NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5maWVsZHMuYWRkaXRpb25hbF9rd2FyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBfX29wZW5haV9yb2xlX186IFwiZGV2ZWxvcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtc2cgPSBuZXcgU3lzdGVtTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkcy5hZGRpdGlvbmFsX2t3YXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fb3BlbmFpX3JvbGVfXzogXCJkZXZlbG9wZXJcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidG9vbFwiOlxuICAgICAgICAgICAgaWYgKFwidG9vbF9jYWxsX2lkXCIgaW4gZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldHVybkNodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rID0gbmV3IFRvb2xNZXNzYWdlQ2h1bmsoZmllbGRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IG5ldyBUb29sTWVzc2FnZShmaWVsZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgY29udmVydCBUb29sTWVzc2FnZSB0byBUb29sTWVzc2FnZUNodW5rIGlmICd0b29sX2NhbGxfaWQnIGZpZWxkIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIGlmIChyZXR1cm5DaHVuaykge1xuICAgICAgICAgICAgICAgIGNodW5rID0gbmV3IEZ1bmN0aW9uTWVzc2FnZUNodW5rKGZpZWxkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZ1bmN0aW9uTWVzc2FnZSBtdXN0IGhhdmUgYSAnbmFtZScgZmllbGRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1zZyA9IG5ldyBGdW5jdGlvbk1lc3NhZ2UoZmllbGRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZ2VuZXJpY1wiOlxuICAgICAgICAgICAgaWYgKFwicm9sZVwiIGluIGZpZWxkcykge1xuICAgICAgICAgICAgICAgIGlmIChyZXR1cm5DaHVuaykge1xuICAgICAgICAgICAgICAgICAgICBjaHVuayA9IG5ldyBDaGF0TWVzc2FnZUNodW5rKGZpZWxkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtc2cgPSBuZXcgQ2hhdE1lc3NhZ2UoZmllbGRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4gbm90IGNvbnZlcnQgQ2hhdE1lc3NhZ2UgdG8gQ2hhdE1lc3NhZ2VDaHVuayBpZiAncm9sZScgZmllbGQgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBtZXNzYWdlIHR5cGUgJHttZXNzYWdlVHlwZX1gKTtcbiAgICB9XG4gICAgaWYgKHJldHVybkNodW5rICYmIGNodW5rKSB7XG4gICAgICAgIHJldHVybiBjaHVuaztcbiAgICB9XG4gICAgaWYgKG1zZykge1xuICAgICAgICByZXR1cm4gbXNnO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBtZXNzYWdlIHR5cGUgJHttZXNzYWdlVHlwZX1gKTtcbn1cbmZ1bmN0aW9uIF9jaHVua1RvTXNnKGNodW5rKSB7XG4gICAgY29uc3QgY2h1bmtUeXBlID0gY2h1bmsuZ2V0VHlwZSgpO1xuICAgIGxldCBtc2c7XG4gICAgY29uc3QgZmllbGRzID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGNodW5rKS5maWx0ZXIoKFtrXSkgPT4gIVtcInR5cGVcIiwgXCJ0b29sX2NhbGxfY2h1bmtzXCJdLmluY2x1ZGVzKGspICYmICFrLnN0YXJ0c1dpdGgoXCJsY19cIikpKTtcbiAgICBpZiAoY2h1bmtUeXBlIGluIF9NU0dfQ0hVTktfTUFQKSB7XG4gICAgICAgIG1zZyA9IF9zd2l0Y2hUeXBlVG9NZXNzYWdlKGNodW5rVHlwZSwgZmllbGRzKTtcbiAgICB9XG4gICAgaWYgKCFtc2cpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgbWVzc2FnZSBjaHVuayBjbGFzcyAke2NodW5rVHlwZX0uIFN1cHBvcnRlZCBjbGFzc2VzIGFyZSAke09iamVjdC5rZXlzKF9NU0dfQ0hVTktfTUFQKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1zZztcbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgdGV4dCBzcGxpdHRlciBmdW5jdGlvbiB0aGF0IHNwbGl0cyB0ZXh0IGJ5IG5ld2xpbmVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBzdHJpbmdzIHNwbGl0IGJ5IG5ld2xpbmVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFRleHRTcGxpdHRlcih0ZXh0KSB7XG4gICAgY29uc3Qgc3BsaXRzID0gdGV4dC5zcGxpdChcIlxcblwiKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtcbiAgICAgICAgLi4uc3BsaXRzLnNsaWNlKDAsIC0xKS5tYXAoKHMpID0+IGAke3N9XFxuYCksXG4gICAgICAgIHNwbGl0c1tzcGxpdHMubGVuZ3RoIC0gMV0sXG4gICAgXSk7XG59XG4iXSwibmFtZXMiOlsiUnVubmFibGVMYW1iZGEiLCJBSU1lc3NhZ2UiLCJBSU1lc3NhZ2VDaHVuayIsImlzQmFzZU1lc3NhZ2VDaHVuayIsIkNoYXRNZXNzYWdlIiwiQ2hhdE1lc3NhZ2VDaHVuayIsIkZ1bmN0aW9uTWVzc2FnZSIsIkZ1bmN0aW9uTWVzc2FnZUNodW5rIiwiSHVtYW5NZXNzYWdlIiwiSHVtYW5NZXNzYWdlQ2h1bmsiLCJSZW1vdmVNZXNzYWdlIiwiU3lzdGVtTWVzc2FnZSIsIlN5c3RlbU1lc3NhZ2VDaHVuayIsIlRvb2xNZXNzYWdlIiwiVG9vbE1lc3NhZ2VDaHVuayIsImNvbnZlcnRUb0NodW5rIiwiX2lzTWVzc2FnZVR5cGUiLCJtc2ciLCJ0eXBlcyIsInR5cGVzQXNTdHJpbmdzIiwiU2V0IiwibWFwIiwidCIsImluc3RhbnRpYXRlZE1zZ0NsYXNzIiwiZ2V0VHlwZSIsIkVycm9yIiwibXNnVHlwZSIsInNvbWUiLCJmaWx0ZXJNZXNzYWdlcyIsIm1lc3NhZ2VzT3JPcHRpb25zIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsIl9maWx0ZXJNZXNzYWdlcyIsImZyb20iLCJpbnB1dCIsIm1lc3NhZ2VzIiwiaW5jbHVkZU5hbWVzIiwiZXhjbHVkZU5hbWVzIiwiaW5jbHVkZVR5cGVzIiwiZXhjbHVkZVR5cGVzIiwiaW5jbHVkZUlkcyIsImV4Y2x1ZGVJZHMiLCJmaWx0ZXJlZCIsIm5hbWUiLCJpbmNsdWRlcyIsImlkIiwicHVzaCIsImlOYW1lIiwibWVyZ2VNZXNzYWdlUnVucyIsIl9tZXJnZU1lc3NhZ2VSdW5zIiwibGVuZ3RoIiwibWVyZ2VkIiwiY3VyciIsImxhc3QiLCJwb3AiLCJsYXN0Q2h1bmsiLCJjdXJyQ2h1bmsiLCJtZXJnZWRDaHVua3MiLCJjb25jYXQiLCJjb250ZW50IiwiX2NodW5rVG9Nc2ciLCJ0cmltTWVzc2FnZXMiLCJfdHJpbU1lc3NhZ2VzSGVscGVyIiwidHJpbW1lck9wdGlvbnMiLCJ3aXRoQ29uZmlnIiwicnVuTmFtZSIsIm1heFRva2VucyIsInRva2VuQ291bnRlciIsInN0cmF0ZWd5IiwiYWxsb3dQYXJ0aWFsIiwiZW5kT24iLCJzdGFydE9uIiwiaW5jbHVkZVN5c3RlbSIsInRleHRTcGxpdHRlciIsImxpc3RUb2tlbkNvdW50ZXIiLCJtc2dzIiwidG9rZW5Db3VudHMiLCJQcm9taXNlIiwiYWxsIiwiZ2V0TnVtVG9rZW5zIiwicmVkdWNlIiwic3VtIiwiY291bnQiLCJ0ZXh0U3BsaXR0ZXJGdW5jIiwiZGVmYXVsdFRleHRTcGxpdHRlciIsInNwbGl0VGV4dCIsInRleHQiLCJfZmlyc3RNYXhUb2tlbnMiLCJwYXJ0aWFsU3RyYXRlZ3kiLCJ1bmRlZmluZWQiLCJfbGFzdE1heFRva2VucyIsIm1lc3NhZ2VzQ29weSIsImlkeCIsImkiLCJyZW1haW5pbmdNZXNzYWdlcyIsInNsaWNlIiwiaW5jbHVkZWRQYXJ0aWFsIiwiZXhjbHVkZWQiLCJudW1CbG9jayIsInJldmVyc2VkQ29udGVudCIsInJldmVyc2UiLCJwYXJ0aWFsQ29udGVudCIsImZpZWxkcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsImZpbHRlciIsImsiLCJzdGFydHNXaXRoIiwidXBkYXRlZE1lc3NhZ2UiLCJfc3dpdGNoVHlwZVRvTWVzc2FnZSIsInNsaWNlZE1lc3NhZ2VzIiwiYmxvY2siLCJ0eXBlIiwidGV4dEJsb2NrIiwiZmluZCIsInNwbGl0VGV4dHMiLCJudW1TcGxpdHMiLCJfIiwiam9pbiIsImVuZE9uQXJyIiwicmVzdCIsIm1lc3NhZ2UiLCJzd2FwcGVkU3lzdGVtIiwicmV2ZXJzZWRfIiwiX01TR19DSFVOS19NQVAiLCJodW1hbiIsIm1lc3NhZ2VDaHVuayIsImFpIiwic3lzdGVtIiwiZGV2ZWxvcGVyIiwidG9vbCIsImZ1bmN0aW9uIiwiZ2VuZXJpYyIsInJlbW92ZSIsIm1lc3NhZ2VUeXBlIiwicmV0dXJuQ2h1bmsiLCJjaHVuayIsImFpQ2h1bmtGaWVsZHMiLCJ0b29sX2NhbGxfY2h1bmtzIiwidG9vbF9jYWxscyIsInRjIiwiaW5kZXgiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSIsImFkZGl0aW9uYWxfa3dhcmdzIiwiX19vcGVuYWlfcm9sZV9fIiwiY2h1bmtUeXBlIiwia2V5cyIsInNwbGl0cyIsInNwbGl0IiwicmVzb2x2ZSIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/transformers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceMessageLikeToMessage: () => (/* binding */ coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* binding */ convertToChunk),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* binding */ mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* binding */ mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* binding */ mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/errors/index.js\");\n/* harmony import */ var _tools_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\");\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\n\n\nfunction _coerceToolCall(toolCall) {\n    if ((0,_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__._isToolCall)(toolCall)) {\n        return toolCall;\n    } else if (typeof toolCall.id === \"string\" && toolCall.type === \"function\" && typeof toolCall.function === \"object\" && toolCall.function !== null && \"arguments\" in toolCall.function && typeof toolCall.function.arguments === \"string\" && \"name\" in toolCall.function && typeof toolCall.function.name === \"string\") {\n        // Handle OpenAI tool call format\n        return {\n            id: toolCall.id,\n            args: JSON.parse(toolCall.function.arguments),\n            name: toolCall.function.name,\n            type: \"tool_call\"\n        };\n    } else {\n        // TODO: Throw an error?\n        return toolCall;\n    }\n}\nfunction isSerializedConstructor(x) {\n    return typeof x === \"object\" && x != null && x.lc === 1 && Array.isArray(x.id) && x.kwargs != null && typeof x.kwargs === \"object\";\n}\nfunction _constructMessageFromParams(params) {\n    let type;\n    let rest;\n    // Support serialized messages\n    if (isSerializedConstructor(params)) {\n        const className = params.id.at(-1);\n        if (className === \"HumanMessage\" || className === \"HumanMessageChunk\") {\n            type = \"user\";\n        } else if (className === \"AIMessage\" || className === \"AIMessageChunk\") {\n            type = \"assistant\";\n        } else if (className === \"SystemMessage\" || className === \"SystemMessageChunk\") {\n            type = \"system\";\n        } else if (className === \"FunctionMessage\" || className === \"FunctionMessageChunk\") {\n            type = \"function\";\n        } else if (className === \"ToolMessage\" || className === \"ToolMessageChunk\") {\n            type = \"tool\";\n        } else {\n            type = \"unknown\";\n        }\n        rest = params.kwargs;\n    } else {\n        const { type: extractedType, ...otherParams } = params;\n        type = extractedType;\n        rest = otherParams;\n    }\n    if (type === \"human\" || type === \"user\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessage(rest);\n    } else if (type === \"ai\" || type === \"assistant\") {\n        const { tool_calls: rawToolCalls, ...other } = rest;\n        if (!Array.isArray(rawToolCalls)) {\n            return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage(rest);\n        }\n        const tool_calls = rawToolCalls.map(_coerceToolCall);\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage({\n            ...other,\n            tool_calls\n        });\n    } else if (type === \"system\") {\n        return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage(rest);\n    } else if (type === \"developer\") {\n        return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage({\n            ...rest,\n            additional_kwargs: {\n                ...rest.additional_kwargs,\n                __openai_role__: \"developer\"\n            }\n        });\n    } else if (type === \"tool\" && \"tool_call_id\" in rest) {\n        return new _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessage({\n            ...rest,\n            content: rest.content,\n            tool_call_id: rest.tool_call_id,\n            name: rest.name\n        });\n    } else {\n        const error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_0__.addLangChainErrorFields)(new Error(`Unable to coerce message from array: only human, AI, system, developer, or tool message coercion is currently supported.\\n\\nReceived: ${JSON.stringify(params, null, 2)}`), \"MESSAGE_COERCION_FAILURE\");\n        throw error;\n    }\n}\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessage(messageLike);\n    } else if ((0,_base_js__WEBPACK_IMPORTED_MODULE_3__.isBaseMessage)(messageLike)) {\n        return messageLike;\n    }\n    if (Array.isArray(messageLike)) {\n        const [type, content] = messageLike;\n        return _constructMessageFromParams({\n            type,\n            content\n        });\n    } else if ((0,_base_js__WEBPACK_IMPORTED_MODULE_3__._isMessageFieldWithRole)(messageLike)) {\n        const { role: type, ...rest } = messageLike;\n        return _constructMessageFromParams({\n            ...rest,\n            type\n        });\n    } else {\n        return _constructMessageFromParams(messageLike);\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        const readableContent = typeof m.content === \"string\" ? m.content : JSON.stringify(m.content, null, 2);\n        string_messages.push(`${role}: ${nameStr}${readableContent}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */ function mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    } else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined\n            }\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch(storedMessage.type){\n        case \"human\":\n            return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage(storedMessage.data);\n        case \"system\":\n            return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessage(storedMessage.data);\n        case \"generic\":\n            {\n                if (storedMessage.data.role === undefined) {\n                    throw new Error(\"Role must be defined for chat messages\");\n                }\n                return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage(storedMessage.data);\n            }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */ function mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */ function mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message)=>message.toDict());\n}\nfunction convertToChunk(message) {\n    const type = message._getType();\n    if (type === \"human\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessageChunk({\n            ...message\n        });\n    } else if (type === \"ai\") {\n        let aiChunkFields = {\n            ...message\n        };\n        if (\"tool_calls\" in aiChunkFields) {\n            aiChunkFields = {\n                ...aiChunkFields,\n                tool_call_chunks: aiChunkFields.tool_calls?.map((tc)=>({\n                        ...tc,\n                        type: \"tool_call_chunk\",\n                        index: undefined,\n                        args: JSON.stringify(tc.args)\n                    }))\n            };\n        }\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n            ...aiChunkFields\n        });\n    } else if (type === \"system\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk({\n            ...message\n        });\n    } else if (type === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessageChunk({\n            ...message\n        });\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    } else if (_chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage.isInstance(message)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessageChunk({\n            ...message\n        });\n    } else {\n        throw new Error(\"Unknown message type.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZEO0FBQ2I7QUFDSTtBQUNnQjtBQUNUO0FBQ1k7QUFDVjtBQUNHO0FBQ3ZCO0FBQ3pDLFNBQVNlLGdCQUFnQkMsUUFBUTtJQUM3QixJQUFJZiw0REFBV0EsQ0FBQ2UsV0FBVztRQUN2QixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPQSxTQUFTQyxFQUFFLEtBQUssWUFDNUJELFNBQVNFLElBQUksS0FBSyxjQUNsQixPQUFPRixTQUFTRyxRQUFRLEtBQUssWUFDN0JILFNBQVNHLFFBQVEsS0FBSyxRQUN0QixlQUFlSCxTQUFTRyxRQUFRLElBQ2hDLE9BQU9ILFNBQVNHLFFBQVEsQ0FBQ0MsU0FBUyxLQUFLLFlBQ3ZDLFVBQVVKLFNBQVNHLFFBQVEsSUFDM0IsT0FBT0gsU0FBU0csUUFBUSxDQUFDRSxJQUFJLEtBQUssVUFBVTtRQUM1QyxpQ0FBaUM7UUFDakMsT0FBTztZQUNISixJQUFJRCxTQUFTQyxFQUFFO1lBQ2ZLLE1BQU1DLEtBQUtDLEtBQUssQ0FBQ1IsU0FBU0csUUFBUSxDQUFDQyxTQUFTO1lBQzVDQyxNQUFNTCxTQUFTRyxRQUFRLENBQUNFLElBQUk7WUFDNUJILE1BQU07UUFDVjtJQUNKLE9BQ0s7UUFDRCx3QkFBd0I7UUFDeEIsT0FBT0Y7SUFDWDtBQUNKO0FBQ0EsU0FBU1Msd0JBQXdCQyxDQUFDO0lBQzlCLE9BQVEsT0FBT0EsTUFBTSxZQUNqQkEsS0FBSyxRQUNMQSxFQUFFQyxFQUFFLEtBQUssS0FDVEMsTUFBTUMsT0FBTyxDQUFDSCxFQUFFVCxFQUFFLEtBQ2xCUyxFQUFFSSxNQUFNLElBQUksUUFDWixPQUFPSixFQUFFSSxNQUFNLEtBQUs7QUFDNUI7QUFDQSxTQUFTQyw0QkFBNEJDLE1BQU07SUFDdkMsSUFBSWQ7SUFDSixJQUFJZTtJQUNKLDhCQUE4QjtJQUM5QixJQUFJUix3QkFBd0JPLFNBQVM7UUFDakMsTUFBTUUsWUFBWUYsT0FBT2YsRUFBRSxDQUFDa0IsRUFBRSxDQUFDLENBQUM7UUFDaEMsSUFBSUQsY0FBYyxrQkFBa0JBLGNBQWMscUJBQXFCO1lBQ25FaEIsT0FBTztRQUNYLE9BQ0ssSUFBSWdCLGNBQWMsZUFBZUEsY0FBYyxrQkFBa0I7WUFDbEVoQixPQUFPO1FBQ1gsT0FDSyxJQUFJZ0IsY0FBYyxtQkFDbkJBLGNBQWMsc0JBQXNCO1lBQ3BDaEIsT0FBTztRQUNYLE9BQ0ssSUFBSWdCLGNBQWMscUJBQ25CQSxjQUFjLHdCQUF3QjtZQUN0Q2hCLE9BQU87UUFDWCxPQUNLLElBQUlnQixjQUFjLGlCQUNuQkEsY0FBYyxvQkFBb0I7WUFDbENoQixPQUFPO1FBQ1gsT0FDSztZQUNEQSxPQUFPO1FBQ1g7UUFDQWUsT0FBT0QsT0FBT0YsTUFBTTtJQUN4QixPQUNLO1FBQ0QsTUFBTSxFQUFFWixNQUFNa0IsYUFBYSxFQUFFLEdBQUdDLGFBQWEsR0FBR0w7UUFDaERkLE9BQU9rQjtRQUNQSCxPQUFPSTtJQUNYO0lBQ0EsSUFBSW5CLFNBQVMsV0FBV0EsU0FBUyxRQUFRO1FBQ3JDLE9BQU8sSUFBSVIsbURBQVlBLENBQUN1QjtJQUM1QixPQUNLLElBQUlmLFNBQVMsUUFBUUEsU0FBUyxhQUFhO1FBQzVDLE1BQU0sRUFBRW9CLFlBQVlDLFlBQVksRUFBRSxHQUFHQyxPQUFPLEdBQUdQO1FBQy9DLElBQUksQ0FBQ0wsTUFBTUMsT0FBTyxDQUFDVSxlQUFlO1lBQzlCLE9BQU8sSUFBSXJDLDZDQUFTQSxDQUFDK0I7UUFDekI7UUFDQSxNQUFNSyxhQUFhQyxhQUFhRSxHQUFHLENBQUMxQjtRQUNwQyxPQUFPLElBQUliLDZDQUFTQSxDQUFDO1lBQUUsR0FBR3NDLEtBQUs7WUFBRUY7UUFBVztJQUNoRCxPQUNLLElBQUlwQixTQUFTLFVBQVU7UUFDeEIsT0FBTyxJQUFJTixxREFBYUEsQ0FBQ3FCO0lBQzdCLE9BQ0ssSUFBSWYsU0FBUyxhQUFhO1FBQzNCLE9BQU8sSUFBSU4scURBQWFBLENBQUM7WUFDckIsR0FBR3FCLElBQUk7WUFDUFMsbUJBQW1CO2dCQUNmLEdBQUdULEtBQUtTLGlCQUFpQjtnQkFDekJDLGlCQUFpQjtZQUNyQjtRQUNKO0lBQ0osT0FDSyxJQUFJekIsU0FBUyxVQUFVLGtCQUFrQmUsTUFBTTtRQUNoRCxPQUFPLElBQUluQixpREFBV0EsQ0FBQztZQUNuQixHQUFHbUIsSUFBSTtZQUNQVyxTQUFTWCxLQUFLVyxPQUFPO1lBQ3JCQyxjQUFjWixLQUFLWSxZQUFZO1lBQy9CeEIsTUFBTVksS0FBS1osSUFBSTtRQUNuQjtJQUNKLE9BQ0s7UUFDRCxNQUFNeUIsUUFBUTlDLHlFQUF1QkEsQ0FBQyxJQUFJK0MsTUFBTSxDQUFDLHNJQUFzSSxFQUFFeEIsS0FBS3lCLFNBQVMsQ0FBQ2hCLFFBQVEsTUFBTSxHQUFHLENBQUMsR0FBRztRQUM3TixNQUFNYztJQUNWO0FBQ0o7QUFDTyxTQUFTRywyQkFBMkJDLFdBQVc7SUFDbEQsSUFBSSxPQUFPQSxnQkFBZ0IsVUFBVTtRQUNqQyxPQUFPLElBQUl4QyxtREFBWUEsQ0FBQ3dDO0lBQzVCLE9BQ0ssSUFBSTlDLHVEQUFhQSxDQUFDOEMsY0FBYztRQUNqQyxPQUFPQTtJQUNYO0lBQ0EsSUFBSXRCLE1BQU1DLE9BQU8sQ0FBQ3FCLGNBQWM7UUFDNUIsTUFBTSxDQUFDaEMsTUFBTTBCLFFBQVEsR0FBR007UUFDeEIsT0FBT25CLDRCQUE0QjtZQUFFYjtZQUFNMEI7UUFBUTtJQUN2RCxPQUNLLElBQUl2QyxpRUFBdUJBLENBQUM2QyxjQUFjO1FBQzNDLE1BQU0sRUFBRUMsTUFBTWpDLElBQUksRUFBRSxHQUFHZSxNQUFNLEdBQUdpQjtRQUNoQyxPQUFPbkIsNEJBQTRCO1lBQUUsR0FBR0UsSUFBSTtZQUFFZjtRQUFLO0lBQ3ZELE9BQ0s7UUFDRCxPQUFPYSw0QkFBNEJtQjtJQUN2QztBQUNKO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0UsZ0JBQWdCQyxRQUFRLEVBQUVDLGNBQWMsT0FBTyxFQUFFQyxXQUFXLElBQUk7SUFDNUUsTUFBTUMsa0JBQWtCLEVBQUU7SUFDMUIsS0FBSyxNQUFNQyxLQUFLSixTQUFVO1FBQ3RCLElBQUlGO1FBQ0osSUFBSU0sRUFBRUMsUUFBUSxPQUFPLFNBQVM7WUFDMUJQLE9BQU9HO1FBQ1gsT0FDSyxJQUFJRyxFQUFFQyxRQUFRLE9BQU8sTUFBTTtZQUM1QlAsT0FBT0k7UUFDWCxPQUNLLElBQUlFLEVBQUVDLFFBQVEsT0FBTyxVQUFVO1lBQ2hDUCxPQUFPO1FBQ1gsT0FDSyxJQUFJTSxFQUFFQyxRQUFRLE9BQU8sWUFBWTtZQUNsQ1AsT0FBTztRQUNYLE9BQ0ssSUFBSU0sRUFBRUMsUUFBUSxPQUFPLFFBQVE7WUFDOUJQLE9BQU87UUFDWCxPQUNLLElBQUlNLEVBQUVDLFFBQVEsT0FBTyxXQUFXO1lBQ2pDUCxPQUFPTSxFQUFFTixJQUFJO1FBQ2pCLE9BQ0s7WUFDRCxNQUFNLElBQUlKLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRVUsRUFBRUMsUUFBUSxHQUFHLENBQUM7UUFDbkU7UUFDQSxNQUFNQyxVQUFVRixFQUFFcEMsSUFBSSxHQUFHLENBQUMsRUFBRW9DLEVBQUVwQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7UUFDekMsTUFBTXVDLGtCQUFrQixPQUFPSCxFQUFFYixPQUFPLEtBQUssV0FDdkNhLEVBQUViLE9BQU8sR0FDVHJCLEtBQUt5QixTQUFTLENBQUNTLEVBQUViLE9BQU8sRUFBRSxNQUFNO1FBQ3RDWSxnQkFBZ0JLLElBQUksQ0FBQyxDQUFDLEVBQUVWLEtBQUssRUFBRSxFQUFFUSxRQUFRLEVBQUVDLGdCQUFnQixDQUFDO0lBQ2hFO0lBQ0EsT0FBT0osZ0JBQWdCTSxJQUFJLENBQUM7QUFDaEM7QUFDQTs7Ozs7O0NBTUMsR0FDRCxTQUFTQyw0QkFBNEJDLE9BQU87SUFDeEMscUVBQXFFO0lBQ3JFLElBQUlBLFFBQVFDLElBQUksS0FBS0MsV0FBVztRQUM1QixPQUFPRjtJQUNYLE9BQ0s7UUFDRCxNQUFNRyxZQUFZSDtRQUNsQixPQUFPO1lBQ0g5QyxNQUFNaUQsVUFBVWpELElBQUk7WUFDcEIrQyxNQUFNO2dCQUNGckIsU0FBU3VCLFVBQVVDLElBQUk7Z0JBQ3ZCakIsTUFBTWdCLFVBQVVoQixJQUFJO2dCQUNwQjlCLE1BQU02QztnQkFDTnJCLGNBQWNxQjtZQUNsQjtRQUNKO0lBQ0o7QUFDSjtBQUNPLFNBQVNHLDhCQUE4QkwsT0FBTztJQUNqRCxNQUFNTSxnQkFBZ0JQLDRCQUE0QkM7SUFDbEQsT0FBUU0sY0FBY3BELElBQUk7UUFDdEIsS0FBSztZQUNELE9BQU8sSUFBSVIsbURBQVlBLENBQUM0RCxjQUFjTCxJQUFJO1FBQzlDLEtBQUs7WUFDRCxPQUFPLElBQUkvRCw2Q0FBU0EsQ0FBQ29FLGNBQWNMLElBQUk7UUFDM0MsS0FBSztZQUNELE9BQU8sSUFBSXJELHFEQUFhQSxDQUFDMEQsY0FBY0wsSUFBSTtRQUMvQyxLQUFLO1lBQ0QsSUFBSUssY0FBY0wsSUFBSSxDQUFDNUMsSUFBSSxLQUFLNkMsV0FBVztnQkFDdkMsTUFBTSxJQUFJbkIsTUFBTTtZQUNwQjtZQUNBLE9BQU8sSUFBSXZDLHlEQUFlQSxDQUFDOEQsY0FBY0wsSUFBSTtRQUNqRCxLQUFLO1lBQ0QsSUFBSUssY0FBY0wsSUFBSSxDQUFDcEIsWUFBWSxLQUFLcUIsV0FBVztnQkFDL0MsTUFBTSxJQUFJbkIsTUFBTTtZQUNwQjtZQUNBLE9BQU8sSUFBSWpDLGlEQUFXQSxDQUFDd0QsY0FBY0wsSUFBSTtRQUM3QyxLQUFLO1lBQVc7Z0JBQ1osSUFBSUssY0FBY0wsSUFBSSxDQUFDZCxJQUFJLEtBQUtlLFdBQVc7b0JBQ3ZDLE1BQU0sSUFBSW5CLE1BQU07Z0JBQ3BCO2dCQUNBLE9BQU8sSUFBSXpDLGlEQUFXQSxDQUFDZ0UsY0FBY0wsSUFBSTtZQUM3QztRQUNBO1lBQ0ksTUFBTSxJQUFJbEIsTUFBTSxDQUFDLHFCQUFxQixFQUFFdUIsY0FBY3BELElBQUksQ0FBQyxDQUFDO0lBQ3BFO0FBQ0o7QUFDQTs7Ozs7OztDQU9DLEdBQ00sU0FBU3FELGdDQUFnQ2xCLFFBQVE7SUFDcEQsT0FBT0EsU0FBU1osR0FBRyxDQUFDNEI7QUFDeEI7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNHLGdDQUFnQ25CLFFBQVE7SUFDcEQsT0FBT0EsU0FBU1osR0FBRyxDQUFDLENBQUN1QixVQUFZQSxRQUFRUyxNQUFNO0FBQ25EO0FBQ08sU0FBU0MsZUFBZVYsT0FBTztJQUNsQyxNQUFNOUMsT0FBTzhDLFFBQVFOLFFBQVE7SUFDN0IsSUFBSXhDLFNBQVMsU0FBUztRQUNsQixtRUFBbUU7UUFDbkUsT0FBTyxJQUFJUCx3REFBaUJBLENBQUM7WUFBRSxHQUFHcUQsT0FBTztRQUFDO0lBQzlDLE9BQ0ssSUFBSTlDLFNBQVMsTUFBTTtRQUNwQixJQUFJeUQsZ0JBQWdCO1lBQ2hCLEdBQUdYLE9BQU87UUFDZDtRQUNBLElBQUksZ0JBQWdCVyxlQUFlO1lBQy9CQSxnQkFBZ0I7Z0JBQ1osR0FBR0EsYUFBYTtnQkFDaEJDLGtCQUFrQkQsY0FBY3JDLFVBQVUsRUFBRUcsSUFBSSxDQUFDb0MsS0FBUTt3QkFDckQsR0FBR0EsRUFBRTt3QkFDTDNELE1BQU07d0JBQ040RCxPQUFPWjt3QkFDUDVDLE1BQU1DLEtBQUt5QixTQUFTLENBQUM2QixHQUFHdkQsSUFBSTtvQkFDaEM7WUFDSjtRQUNKO1FBQ0EsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSW5CLGtEQUFjQSxDQUFDO1lBQUUsR0FBR3dFLGFBQWE7UUFBQztJQUNqRCxPQUNLLElBQUl6RCxTQUFTLFVBQVU7UUFDeEIsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSUwsMERBQWtCQSxDQUFDO1lBQUUsR0FBR21ELE9BQU87UUFBQztJQUMvQyxPQUNLLElBQUk5QyxTQUFTLFlBQVk7UUFDMUIsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSVQsOERBQW9CQSxDQUFDO1lBQUUsR0FBR3VELE9BQU87UUFBQztJQUM3QyxtRUFBbUU7SUFDdkUsT0FDSyxJQUFJMUQsaURBQVdBLENBQUN5RSxVQUFVLENBQUNmLFVBQVU7UUFDdEMsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSXpELHNEQUFnQkEsQ0FBQztZQUFFLEdBQUd5RCxPQUFPO1FBQUM7SUFDN0MsT0FDSztRQUNELE1BQU0sSUFBSWpCLE1BQU07SUFDcEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy91dGlscy5qcz9lOTdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZExhbmdDaGFpbkVycm9yRmllbGRzIH0gZnJvbSBcIi4uL2Vycm9ycy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgX2lzVG9vbENhbGwgfSBmcm9tIFwiLi4vdG9vbHMvdXRpbHMuanNcIjtcbmltcG9ydCB7IEFJTWVzc2FnZSwgQUlNZXNzYWdlQ2h1bmsgfSBmcm9tIFwiLi9haS5qc1wiO1xuaW1wb3J0IHsgaXNCYXNlTWVzc2FnZSwgX2lzTWVzc2FnZUZpZWxkV2l0aFJvbGUsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgQ2hhdE1lc3NhZ2UsIENoYXRNZXNzYWdlQ2h1bmssIH0gZnJvbSBcIi4vY2hhdC5qc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25NZXNzYWdlLCBGdW5jdGlvbk1lc3NhZ2VDaHVuaywgfSBmcm9tIFwiLi9mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgSHVtYW5NZXNzYWdlLCBIdW1hbk1lc3NhZ2VDaHVuayB9IGZyb20gXCIuL2h1bWFuLmpzXCI7XG5pbXBvcnQgeyBTeXN0ZW1NZXNzYWdlLCBTeXN0ZW1NZXNzYWdlQ2h1bmsgfSBmcm9tIFwiLi9zeXN0ZW0uanNcIjtcbmltcG9ydCB7IFRvb2xNZXNzYWdlLCB9IGZyb20gXCIuL3Rvb2wuanNcIjtcbmZ1bmN0aW9uIF9jb2VyY2VUb29sQ2FsbCh0b29sQ2FsbCkge1xuICAgIGlmIChfaXNUb29sQ2FsbCh0b29sQ2FsbCkpIHtcbiAgICAgICAgcmV0dXJuIHRvb2xDYWxsO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdG9vbENhbGwuaWQgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgdG9vbENhbGwudHlwZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiB0b29sQ2FsbC5mdW5jdGlvbiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICB0b29sQ2FsbC5mdW5jdGlvbiAhPT0gbnVsbCAmJlxuICAgICAgICBcImFyZ3VtZW50c1wiIGluIHRvb2xDYWxsLmZ1bmN0aW9uICYmXG4gICAgICAgIHR5cGVvZiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgXCJuYW1lXCIgaW4gdG9vbENhbGwuZnVuY3Rpb24gJiZcbiAgICAgICAgdHlwZW9mIHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gSGFuZGxlIE9wZW5BSSB0b29sIGNhbGwgZm9ybWF0XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICBhcmdzOiBKU09OLnBhcnNlKHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyksXG4gICAgICAgICAgICBuYW1lOiB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJ0b29sX2NhbGxcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IFRocm93IGFuIGVycm9yP1xuICAgICAgICByZXR1cm4gdG9vbENhbGw7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTZXJpYWxpemVkQ29uc3RydWN0b3IoeCkge1xuICAgIHJldHVybiAodHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgeCAhPSBudWxsICYmXG4gICAgICAgIHgubGMgPT09IDEgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheSh4LmlkKSAmJlxuICAgICAgICB4Lmt3YXJncyAhPSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB4Lmt3YXJncyA9PT0gXCJvYmplY3RcIik7XG59XG5mdW5jdGlvbiBfY29uc3RydWN0TWVzc2FnZUZyb21QYXJhbXMocGFyYW1zKSB7XG4gICAgbGV0IHR5cGU7XG4gICAgbGV0IHJlc3Q7XG4gICAgLy8gU3VwcG9ydCBzZXJpYWxpemVkIG1lc3NhZ2VzXG4gICAgaWYgKGlzU2VyaWFsaXplZENvbnN0cnVjdG9yKHBhcmFtcykpIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gcGFyYW1zLmlkLmF0KC0xKTtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gXCJIdW1hbk1lc3NhZ2VcIiB8fCBjbGFzc05hbWUgPT09IFwiSHVtYW5NZXNzYWdlQ2h1bmtcIikge1xuICAgICAgICAgICAgdHlwZSA9IFwidXNlclwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzTmFtZSA9PT0gXCJBSU1lc3NhZ2VcIiB8fCBjbGFzc05hbWUgPT09IFwiQUlNZXNzYWdlQ2h1bmtcIikge1xuICAgICAgICAgICAgdHlwZSA9IFwiYXNzaXN0YW50XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xhc3NOYW1lID09PSBcIlN5c3RlbU1lc3NhZ2VcIiB8fFxuICAgICAgICAgICAgY2xhc3NOYW1lID09PSBcIlN5c3RlbU1lc3NhZ2VDaHVua1wiKSB7XG4gICAgICAgICAgICB0eXBlID0gXCJzeXN0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGFzc05hbWUgPT09IFwiRnVuY3Rpb25NZXNzYWdlXCIgfHxcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9PT0gXCJGdW5jdGlvbk1lc3NhZ2VDaHVua1wiKSB7XG4gICAgICAgICAgICB0eXBlID0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzTmFtZSA9PT0gXCJUb29sTWVzc2FnZVwiIHx8XG4gICAgICAgICAgICBjbGFzc05hbWUgPT09IFwiVG9vbE1lc3NhZ2VDaHVua1wiKSB7XG4gICAgICAgICAgICB0eXBlID0gXCJ0b29sXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eXBlID0gXCJ1bmtub3duXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdCA9IHBhcmFtcy5rd2FyZ3M7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB7IHR5cGU6IGV4dHJhY3RlZFR5cGUsIC4uLm90aGVyUGFyYW1zIH0gPSBwYXJhbXM7XG4gICAgICAgIHR5cGUgPSBleHRyYWN0ZWRUeXBlO1xuICAgICAgICByZXN0ID0gb3RoZXJQYXJhbXM7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcImh1bWFuXCIgfHwgdHlwZSA9PT0gXCJ1c2VyXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdW1hbk1lc3NhZ2UocmVzdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiYWlcIiB8fCB0eXBlID09PSBcImFzc2lzdGFudFwiKSB7XG4gICAgICAgIGNvbnN0IHsgdG9vbF9jYWxsczogcmF3VG9vbENhbGxzLCAuLi5vdGhlciB9ID0gcmVzdDtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJhd1Rvb2xDYWxscykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQUlNZXNzYWdlKHJlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvb2xfY2FsbHMgPSByYXdUb29sQ2FsbHMubWFwKF9jb2VyY2VUb29sQ2FsbCk7XG4gICAgICAgIHJldHVybiBuZXcgQUlNZXNzYWdlKHsgLi4ub3RoZXIsIHRvb2xfY2FsbHMgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlKHJlc3QpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcImRldmVsb3BlclwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3lzdGVtTWVzc2FnZSh7XG4gICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LmFkZGl0aW9uYWxfa3dhcmdzLFxuICAgICAgICAgICAgICAgIF9fb3BlbmFpX3JvbGVfXzogXCJkZXZlbG9wZXJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcInRvb2xcIiAmJiBcInRvb2xfY2FsbF9pZFwiIGluIHJlc3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb29sTWVzc2FnZSh7XG4gICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgY29udGVudDogcmVzdC5jb250ZW50LFxuICAgICAgICAgICAgdG9vbF9jYWxsX2lkOiByZXN0LnRvb2xfY2FsbF9pZCxcbiAgICAgICAgICAgIG5hbWU6IHJlc3QubmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBlcnJvciA9IGFkZExhbmdDaGFpbkVycm9yRmllbGRzKG5ldyBFcnJvcihgVW5hYmxlIHRvIGNvZXJjZSBtZXNzYWdlIGZyb20gYXJyYXk6IG9ubHkgaHVtYW4sIEFJLCBzeXN0ZW0sIGRldmVsb3Blciwgb3IgdG9vbCBtZXNzYWdlIGNvZXJjaW9uIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXFxuXFxuUmVjZWl2ZWQ6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zLCBudWxsLCAyKX1gKSwgXCJNRVNTQUdFX0NPRVJDSU9OX0ZBSUxVUkVcIik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VNZXNzYWdlTGlrZVRvTWVzc2FnZShtZXNzYWdlTGlrZSkge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZUxpa2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdW1hbk1lc3NhZ2UobWVzc2FnZUxpa2UpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Jhc2VNZXNzYWdlKG1lc3NhZ2VMaWtlKSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZUxpa2U7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2VMaWtlKSkge1xuICAgICAgICBjb25zdCBbdHlwZSwgY29udGVudF0gPSBtZXNzYWdlTGlrZTtcbiAgICAgICAgcmV0dXJuIF9jb25zdHJ1Y3RNZXNzYWdlRnJvbVBhcmFtcyh7IHR5cGUsIGNvbnRlbnQgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKF9pc01lc3NhZ2VGaWVsZFdpdGhSb2xlKG1lc3NhZ2VMaWtlKSkge1xuICAgICAgICBjb25zdCB7IHJvbGU6IHR5cGUsIC4uLnJlc3QgfSA9IG1lc3NhZ2VMaWtlO1xuICAgICAgICByZXR1cm4gX2NvbnN0cnVjdE1lc3NhZ2VGcm9tUGFyYW1zKHsgLi4ucmVzdCwgdHlwZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBfY29uc3RydWN0TWVzc2FnZUZyb21QYXJhbXMobWVzc2FnZUxpa2UpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJ5IG1lbW9yeSBjbGFzc2VzIHRvIGdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvblxuICogb2YgdGhlIGNoYXQgbWVzc2FnZSBoaXN0b3J5LCBiYXNlZCBvbiB0aGUgbWVzc2FnZSBjb250ZW50IGFuZCByb2xlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVmZmVyU3RyaW5nKG1lc3NhZ2VzLCBodW1hblByZWZpeCA9IFwiSHVtYW5cIiwgYWlQcmVmaXggPSBcIkFJXCIpIHtcbiAgICBjb25zdCBzdHJpbmdfbWVzc2FnZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG0gb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgbGV0IHJvbGU7XG4gICAgICAgIGlmIChtLl9nZXRUeXBlKCkgPT09IFwiaHVtYW5cIikge1xuICAgICAgICAgICAgcm9sZSA9IGh1bWFuUHJlZml4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0uX2dldFR5cGUoKSA9PT0gXCJhaVwiKSB7XG4gICAgICAgICAgICByb2xlID0gYWlQcmVmaXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobS5fZ2V0VHlwZSgpID09PSBcInN5c3RlbVwiKSB7XG4gICAgICAgICAgICByb2xlID0gXCJTeXN0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtLl9nZXRUeXBlKCkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcm9sZSA9IFwiRnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtLl9nZXRUeXBlKCkgPT09IFwidG9vbFwiKSB7XG4gICAgICAgICAgICByb2xlID0gXCJUb29sXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobS5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIikge1xuICAgICAgICAgICAgcm9sZSA9IG0ucm9sZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR290IHVuc3VwcG9ydGVkIG1lc3NhZ2UgdHlwZTogJHttLl9nZXRUeXBlKCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZVN0ciA9IG0ubmFtZSA/IGAke20ubmFtZX0sIGAgOiBcIlwiO1xuICAgICAgICBjb25zdCByZWFkYWJsZUNvbnRlbnQgPSB0eXBlb2YgbS5jb250ZW50ID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICA/IG0uY29udGVudFxuICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShtLmNvbnRlbnQsIG51bGwsIDIpO1xuICAgICAgICBzdHJpbmdfbWVzc2FnZXMucHVzaChgJHtyb2xlfTogJHtuYW1lU3RyfSR7cmVhZGFibGVDb250ZW50fWApO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nX21lc3NhZ2VzLmpvaW4oXCJcXG5cIik7XG59XG4vKipcbiAqIE1hcHMgbWVzc2FnZXMgZnJvbSBhbiBvbGRlciBmb3JtYXQgKFYxKSB0byB0aGUgY3VycmVudCBgU3RvcmVkTWVzc2FnZWBcbiAqIGZvcm1hdC4gSWYgdGhlIG1lc3NhZ2UgaXMgYWxyZWFkeSBpbiB0aGUgYFN0b3JlZE1lc3NhZ2VgIGZvcm1hdCwgaXQgaXNcbiAqIHJldHVybmVkIGFzIGlzLiBPdGhlcndpc2UsIGl0IHRyYW5zZm9ybXMgdGhlIFYxIG1lc3NhZ2UgaW50byBhXG4gKiBgU3RvcmVkTWVzc2FnZWAuIFRoaXMgZnVuY3Rpb24gaXMgaW1wb3J0YW50IGZvciBtYWludGFpbmluZ1xuICogY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIG1lc3NhZ2UgZm9ybWF0cy5cbiAqL1xuZnVuY3Rpb24gbWFwVjFNZXNzYWdlVG9TdG9yZWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBtYXBwZXIgd2hlbiB3ZSBkZXByZWNhdGUgdGhlIG9sZCBtZXNzYWdlIGZvcm1hdC5cbiAgICBpZiAobWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB2MU1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdjFNZXNzYWdlLnR5cGUsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogdjFNZXNzYWdlLnRleHQsXG4gICAgICAgICAgICAgICAgcm9sZTogdjFNZXNzYWdlLnJvbGUsXG4gICAgICAgICAgICAgICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbF9pZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGNvbnN0IHN0b3JlZE1lc3NhZ2UgPSBtYXBWMU1lc3NhZ2VUb1N0b3JlZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgc3dpdGNoIChzdG9yZWRNZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImh1bWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZShzdG9yZWRNZXNzYWdlLmRhdGEpO1xuICAgICAgICBjYXNlIFwiYWlcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgQUlNZXNzYWdlKHN0b3JlZE1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIGNhc2UgXCJzeXN0ZW1cIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3lzdGVtTWVzc2FnZShzdG9yZWRNZXNzYWdlLmRhdGEpO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIGlmIChzdG9yZWRNZXNzYWdlLmRhdGEubmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZSBtdXN0IGJlIGRlZmluZWQgZm9yIGZ1bmN0aW9uIG1lc3NhZ2VzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbk1lc3NhZ2Uoc3RvcmVkTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgY2FzZSBcInRvb2xcIjpcbiAgICAgICAgICAgIGlmIChzdG9yZWRNZXNzYWdlLmRhdGEudG9vbF9jYWxsX2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb29sIGNhbGwgSUQgbXVzdCBiZSBkZWZpbmVkIGZvciB0b29sIG1lc3NhZ2VzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUb29sTWVzc2FnZShzdG9yZWRNZXNzYWdlLmRhdGEpO1xuICAgICAgICBjYXNlIFwiZ2VuZXJpY1wiOiB7XG4gICAgICAgICAgICBpZiAoc3RvcmVkTWVzc2FnZS5kYXRhLnJvbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJvbGUgbXVzdCBiZSBkZWZpbmVkIGZvciBjaGF0IG1lc3NhZ2VzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGF0TWVzc2FnZShzdG9yZWRNZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmV4cGVjdGVkIHR5cGU6ICR7c3RvcmVkTWVzc2FnZS50eXBlfWApO1xuICAgIH1cbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBgU3RvcmVkTWVzc2FnZWAgaW5zdGFuY2VzIGludG8gYW4gYXJyYXkgb2ZcbiAqIGBCYXNlTWVzc2FnZWAgaW5zdGFuY2VzLiBJdCB1c2VzIHRoZSBgbWFwVjFNZXNzYWdlVG9TdG9yZWRNZXNzYWdlYFxuICogZnVuY3Rpb24gdG8gZW5zdXJlIGFsbCBtZXNzYWdlcyBhcmUgaW4gdGhlIGBTdG9yZWRNZXNzYWdlYCBmb3JtYXQsIHRoZW5cbiAqIGNyZWF0ZXMgbmV3IGluc3RhbmNlcyBvZiB0aGUgYXBwcm9wcmlhdGUgYEJhc2VNZXNzYWdlYCBzdWJjbGFzcyBiYXNlZFxuICogb24gdGhlIHR5cGUgb2YgZWFjaCBtZXNzYWdlLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcHJlcGFyZSBzdG9yZWRcbiAqIG1lc3NhZ2VzIGZvciB1c2UgaW4gYSBjaGF0IGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBTdG9yZWRNZXNzYWdlc1RvQ2hhdE1lc3NhZ2VzKG1lc3NhZ2VzKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2VzLm1hcChtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZSk7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgYW4gYXJyYXkgb2YgYEJhc2VNZXNzYWdlYCBpbnN0YW5jZXMgaW50byBhbiBhcnJheSBvZlxuICogYFN0b3JlZE1lc3NhZ2VgIGluc3RhbmNlcy4gSXQgZG9lcyB0aGlzIGJ5IGNhbGxpbmcgdGhlIGB0b0RpY3RgIG1ldGhvZFxuICogb24gZWFjaCBgQmFzZU1lc3NhZ2VgLCB3aGljaCByZXR1cm5zIGEgYFN0b3JlZE1lc3NhZ2VgLiBUaGlzIGZ1bmN0aW9uXG4gKiBpcyB1c2VkIHRvIHByZXBhcmUgY2hhdCBtZXNzYWdlcyBmb3Igc3RvcmFnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcENoYXRNZXNzYWdlc1RvU3RvcmVkTWVzc2FnZXMobWVzc2FnZXMpIHtcbiAgICByZXR1cm4gbWVzc2FnZXMubWFwKChtZXNzYWdlKSA9PiBtZXNzYWdlLnRvRGljdCgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9DaHVuayhtZXNzYWdlKSB7XG4gICAgY29uc3QgdHlwZSA9IG1lc3NhZ2UuX2dldFR5cGUoKTtcbiAgICBpZiAodHlwZSA9PT0gXCJodW1hblwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgcmV0dXJuIG5ldyBIdW1hbk1lc3NhZ2VDaHVuayh7IC4uLm1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiYWlcIikge1xuICAgICAgICBsZXQgYWlDaHVua0ZpZWxkcyA9IHtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChcInRvb2xfY2FsbHNcIiBpbiBhaUNodW5rRmllbGRzKSB7XG4gICAgICAgICAgICBhaUNodW5rRmllbGRzID0ge1xuICAgICAgICAgICAgICAgIC4uLmFpQ2h1bmtGaWVsZHMsXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsX2NodW5rczogYWlDaHVua0ZpZWxkcy50b29sX2NhbGxzPy5tYXAoKHRjKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi50YyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sX2NhbGxfY2h1bmtcIixcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogSlNPTi5zdHJpbmdpZnkodGMuYXJncyksXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIHJldHVybiBuZXcgQUlNZXNzYWdlQ2h1bmsoeyAuLi5haUNodW5rRmllbGRzIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcInN5c3RlbVwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlQ2h1bmsoeyAuLi5tZXNzYWdlIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uTWVzc2FnZUNodW5rKHsgLi4ubWVzc2FnZSB9KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIH1cbiAgICBlbHNlIGlmIChDaGF0TWVzc2FnZS5pc0luc3RhbmNlKG1lc3NhZ2UpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgcmV0dXJuIG5ldyBDaGF0TWVzc2FnZUNodW5rKHsgLi4ubWVzc2FnZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gbWVzc2FnZSB0eXBlLlwiKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiYWRkTGFuZ0NoYWluRXJyb3JGaWVsZHMiLCJfaXNUb29sQ2FsbCIsIkFJTWVzc2FnZSIsIkFJTWVzc2FnZUNodW5rIiwiaXNCYXNlTWVzc2FnZSIsIl9pc01lc3NhZ2VGaWVsZFdpdGhSb2xlIiwiQ2hhdE1lc3NhZ2UiLCJDaGF0TWVzc2FnZUNodW5rIiwiRnVuY3Rpb25NZXNzYWdlIiwiRnVuY3Rpb25NZXNzYWdlQ2h1bmsiLCJIdW1hbk1lc3NhZ2UiLCJIdW1hbk1lc3NhZ2VDaHVuayIsIlN5c3RlbU1lc3NhZ2UiLCJTeXN0ZW1NZXNzYWdlQ2h1bmsiLCJUb29sTWVzc2FnZSIsIl9jb2VyY2VUb29sQ2FsbCIsInRvb2xDYWxsIiwiaWQiLCJ0eXBlIiwiZnVuY3Rpb24iLCJhcmd1bWVudHMiLCJuYW1lIiwiYXJncyIsIkpTT04iLCJwYXJzZSIsImlzU2VyaWFsaXplZENvbnN0cnVjdG9yIiwieCIsImxjIiwiQXJyYXkiLCJpc0FycmF5Iiwia3dhcmdzIiwiX2NvbnN0cnVjdE1lc3NhZ2VGcm9tUGFyYW1zIiwicGFyYW1zIiwicmVzdCIsImNsYXNzTmFtZSIsImF0IiwiZXh0cmFjdGVkVHlwZSIsIm90aGVyUGFyYW1zIiwidG9vbF9jYWxscyIsInJhd1Rvb2xDYWxscyIsIm90aGVyIiwibWFwIiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJfX29wZW5haV9yb2xlX18iLCJjb250ZW50IiwidG9vbF9jYWxsX2lkIiwiZXJyb3IiLCJFcnJvciIsInN0cmluZ2lmeSIsImNvZXJjZU1lc3NhZ2VMaWtlVG9NZXNzYWdlIiwibWVzc2FnZUxpa2UiLCJyb2xlIiwiZ2V0QnVmZmVyU3RyaW5nIiwibWVzc2FnZXMiLCJodW1hblByZWZpeCIsImFpUHJlZml4Iiwic3RyaW5nX21lc3NhZ2VzIiwibSIsIl9nZXRUeXBlIiwibmFtZVN0ciIsInJlYWRhYmxlQ29udGVudCIsInB1c2giLCJqb2luIiwibWFwVjFNZXNzYWdlVG9TdG9yZWRNZXNzYWdlIiwibWVzc2FnZSIsImRhdGEiLCJ1bmRlZmluZWQiLCJ2MU1lc3NhZ2UiLCJ0ZXh0IiwibWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2UiLCJzdG9yZWRNZXNzYWdlIiwibWFwU3RvcmVkTWVzc2FnZXNUb0NoYXRNZXNzYWdlcyIsIm1hcENoYXRNZXNzYWdlc1RvU3RvcmVkTWVzc2FnZXMiLCJ0b0RpY3QiLCJjb252ZXJ0VG9DaHVuayIsImFpQ2h1bmtGaWVsZHMiLCJ0b29sX2NhbGxfY2h1bmtzIiwidGMiLCJpbmRleCIsImlzSW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLMOutputParser: () => (/* binding */ BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* binding */ BaseOutputParser),\n/* harmony export */   OutputParserException: () => (/* binding */ OutputParserException)\n/* harmony export */ });\n/* harmony import */ var _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/errors/index.js\");\n\n\n/**\n * Abstract base class for parsing the output of a Large Language Model\n * (LLM) call. It provides methods for parsing the result of an LLM call\n * and invoking the parser with a given input.\n */ class BaseLLMOutputParser extends _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    /**\n     * Parses the result of an LLM call with a given prompt. By default, it\n     * simply calls `parseResult`.\n     * @param generations The generations from an LLM call.\n     * @param _prompt The prompt used in the LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ parseResultWithPrompt(generations, _prompt, callbacks) {\n        return this.parseResult(generations, callbacks);\n    }\n    _baseMessageToString(message) {\n        return typeof message.content === \"string\" ? message.content : this._baseMessageContentToString(message.content);\n    }\n    _baseMessageContentToString(content) {\n        return JSON.stringify(content);\n    }\n    /**\n     * Calls the parser with a given input and optional configuration options.\n     * If the input is a string, it creates a generation with the input as\n     * text and calls `parseResult`. If the input is a `BaseMessage`, it\n     * creates a generation with the input as a message and the content of the\n     * input as text, and then calls `parseResult`.\n     * @param input The input to the parser, which can be a string or a `BaseMessage`.\n     * @param options Optional configuration options.\n     * @returns A promise of the parsed output.\n     */ async invoke(input, options) {\n        if (typeof input === \"string\") {\n            return this._callWithConfig(async (input, options)=>this.parseResult([\n                    {\n                        text: input\n                    }\n                ], options?.callbacks), input, {\n                ...options,\n                runType: \"parser\"\n            });\n        } else {\n            return this._callWithConfig(async (input, options)=>this.parseResult([\n                    {\n                        message: input,\n                        text: this._baseMessageToString(input)\n                    }\n                ], options?.callbacks), input, {\n                ...options,\n                runType: \"parser\"\n            });\n        }\n    }\n}\n/**\n * Class to parse the output of an LLM call.\n */ class BaseOutputParser extends BaseLLMOutputParser {\n    parseResult(generations, callbacks) {\n        return this.parse(generations[0].text, callbacks);\n    }\n    async parseWithPrompt(text, _prompt, callbacks) {\n        return this.parse(text, callbacks);\n    }\n    /**\n     * Return the string type key uniquely identifying this class of parser\n     */ _type() {\n        throw new Error(\"_type not implemented\");\n    }\n}\n/**\n * Exception that output parsers should raise to signify a parsing error.\n *\n * This exists to differentiate parsing errors from other code or execution errors\n * that also may arise inside the output parser. OutputParserExceptions will be\n * available to catch and handle in ways to fix the parsing error, while other\n * errors will be raised.\n *\n * @param message - The error that's being re-raised or an error message.\n * @param llmOutput - String model output which is error-ing.\n * @param observation - String explanation of error which can be passed to a\n *     model to try and remediate the issue.\n * @param sendToLLM - Whether to send the observation and llm_output back to an Agent\n *     after an OutputParserException has been raised. This gives the underlying\n *     model driving the agent the context that the previous output was improperly\n *     structured, in the hopes that it will update the output to the correct\n *     format.\n */ class OutputParserException extends Error {\n    constructor(message, llmOutput, observation, sendToLLM = false){\n        super(message);\n        Object.defineProperty(this, \"llmOutput\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sendToLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmOutput = llmOutput;\n        this.observation = observation;\n        this.sendToLLM = sendToLLM;\n        if (sendToLLM) {\n            if (observation === undefined || llmOutput === undefined) {\n                throw new Error(\"Arguments 'observation' & 'llmOutput' are required if 'sendToLlm' is true\");\n            }\n        }\n        (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_1__.addLangChainErrorFields)(this, \"OUTPUT_PARSING_FAILURE\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/bytes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesOutputParser: () => (/* binding */ BytesOutputParser)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n/**\n * OutputParser that parses LLMResult into the top likely string and\n * encodes it into bytes.\n */ class BytesOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"bytes\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"textEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new TextEncoder()\n        });\n    }\n    static lc_name() {\n        return \"BytesOutputParser\";\n    }\n    parse(text) {\n        return Promise.resolve(this.textEncoder.encode(text));\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkQ7QUFDM0Q7OztDQUdDLEdBQ00sTUFBTUMsMEJBQTBCRCxvRUFBeUJBO0lBQzVERSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNUQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBa0I7Z0JBQWtCO2FBQVE7UUFDeEQ7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sSUFBSUM7UUFDZjtJQUNKO0lBQ0EsT0FBT0MsVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxNQUFNQyxJQUFJLEVBQUU7UUFDUixPQUFPQyxRQUFRQyxPQUFPLENBQUMsSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0o7SUFDbkQ7SUFDQUssd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL2J5dGVzLmpzPzUyZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciB9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuLyoqXG4gKiBPdXRwdXRQYXJzZXIgdGhhdCBwYXJzZXMgTExNUmVzdWx0IGludG8gdGhlIHRvcCBsaWtlbHkgc3RyaW5nIGFuZFxuICogZW5jb2RlcyBpdCBpbnRvIGJ5dGVzLlxuICovXG5leHBvcnQgY2xhc3MgQnl0ZXNPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5fY29yZVwiLCBcIm91dHB1dF9wYXJzZXJzXCIsIFwiYnl0ZXNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dEVuY29kZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBUZXh0RW5jb2RlcigpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQnl0ZXNPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgcGFyc2UodGV4dCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHRleHQpKTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciIsIkJ5dGVzT3V0cHV0UGFyc2VyIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiVGV4dEVuY29kZXIiLCJsY19uYW1lIiwicGFyc2UiLCJ0ZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0ZXh0RW5jb2RlciIsImVuY29kZSIsImdldEZvcm1hdEluc3RydWN0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.AsymmetricStructuredOutputParser),\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_5__.BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseLLMOutputParser: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransformOutputParser),\n/* harmony export */   BytesOutputParser: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_1__.BytesOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CustomListOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputParser: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.JsonOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.NumberedListOutputParser),\n/* harmony export */   OutputParserException: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException),\n/* harmony export */   StringOutputParser: () => (/* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_3__.StringOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.StructuredOutputParser),\n/* harmony export */   XMLOutputParser: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.parsePartialJson),\n/* harmony export */   parseXMLMarkdown: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js\");\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./list.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js\");\n/* harmony import */ var _structured_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./structured.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _json_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\");\n/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./xml.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDQztBQUNEO0FBQ0U7QUFDSTtBQUNEO0FBQ0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRfcGFyc2Vycy9pbmRleC5qcz8zYTY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2J5dGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saXN0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N0cnVjdHVyZWQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanNvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4veG1sLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/json.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputParser: () => (/* binding */ JsonOutputParser),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parsePartialJson)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/json.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json.js\");\n\n\n\n/**\n * Class for parsing the output of an LLM into a JSON object.\n */ class JsonOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"JsonOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [\n                {\n                    op: \"replace\",\n                    path: \"\",\n                    value: next\n                }\n            ];\n        }\n        return (0,_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__.compare)(prev, next);\n    }\n    // This should actually return Partial<T>, but there's no way\n    // to specify emitted chunks as instances separate from the main output type.\n    async parsePartialResult(generations) {\n        return (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonMarkdown)(generations[0].text);\n    }\n    async parse(text) {\n        return (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonMarkdown)(text, JSON.parse);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvanNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUU7QUFDcEI7QUFDc0I7QUFDdkU7O0NBRUMsR0FDTSxNQUFNSSx5QkFBeUJKLDhFQUFtQ0E7SUFDckVLLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFrQjthQUFpQjtRQUMvQztRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQjtZQUMzQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPQyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLE1BQU1DLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2QsSUFBSSxDQUFDQSxNQUFNO1lBQ1AsT0FBT0M7UUFDWDtRQUNBLElBQUksQ0FBQ0YsTUFBTTtZQUNQLE9BQU87Z0JBQUM7b0JBQUVHLElBQUk7b0JBQVdDLE1BQU07b0JBQUlQLE9BQU9JO2dCQUFLO2FBQUU7UUFDckQ7UUFDQSxPQUFPZiw2REFBT0EsQ0FBQ2MsTUFBTUM7SUFDekI7SUFDQSw2REFBNkQ7SUFDN0QsNkVBQTZFO0lBQzdFLE1BQU1JLG1CQUFtQkMsV0FBVyxFQUFFO1FBQ2xDLE9BQU9uQixpRUFBaUJBLENBQUNtQixXQUFXLENBQUMsRUFBRSxDQUFDQyxJQUFJO0lBQ2hEO0lBQ0EsTUFBTUMsTUFBTUQsSUFBSSxFQUFFO1FBQ2QsT0FBT3BCLGlFQUFpQkEsQ0FBQ29CLE1BQU1FLEtBQUtELEtBQUs7SUFDN0M7SUFDQUUsd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtBQUNKO0FBQytDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL2pzb24uanM/YWJhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ3VtdWxhdGl2ZVRyYW5zZm9ybU91dHB1dFBhcnNlciB9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IHsgY29tcGFyZSB9IGZyb20gXCIuLi91dGlscy9qc29uX3BhdGNoLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUpzb25NYXJrZG93biwgcGFyc2VQYXJ0aWFsSnNvbiB9IGZyb20gXCIuLi91dGlscy9qc29uLmpzXCI7XG4vKipcbiAqIENsYXNzIGZvciBwYXJzaW5nIHRoZSBvdXRwdXQgb2YgYW4gTExNIGludG8gYSBKU09OIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25PdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlQ3VtdWxhdGl2ZVRyYW5zZm9ybU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluX2NvcmVcIiwgXCJvdXRwdXRfcGFyc2Vyc1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSnNvbk91dHB1dFBhcnNlclwiO1xuICAgIH1cbiAgICBfZGlmZihwcmV2LCBuZXh0KSB7XG4gICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBbeyBvcDogXCJyZXBsYWNlXCIsIHBhdGg6IFwiXCIsIHZhbHVlOiBuZXh0IH1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wYXJlKHByZXYsIG5leHQpO1xuICAgIH1cbiAgICAvLyBUaGlzIHNob3VsZCBhY3R1YWxseSByZXR1cm4gUGFydGlhbDxUPiwgYnV0IHRoZXJlJ3Mgbm8gd2F5XG4gICAgLy8gdG8gc3BlY2lmeSBlbWl0dGVkIGNodW5rcyBhcyBpbnN0YW5jZXMgc2VwYXJhdGUgZnJvbSB0aGUgbWFpbiBvdXRwdXQgdHlwZS5cbiAgICBhc3luYyBwYXJzZVBhcnRpYWxSZXN1bHQoZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSnNvbk1hcmtkb3duKGdlbmVyYXRpb25zWzBdLnRleHQpO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUpzb25NYXJrZG93bih0ZXh0LCBKU09OLnBhcnNlKTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG5leHBvcnQgeyBwYXJzZVBhcnRpYWxKc29uLCBwYXJzZUpzb25NYXJrZG93biB9O1xuIl0sIm5hbWVzIjpbIkJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIiwiY29tcGFyZSIsInBhcnNlSnNvbk1hcmtkb3duIiwicGFyc2VQYXJ0aWFsSnNvbiIsIkpzb25PdXRwdXRQYXJzZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJsY19uYW1lIiwiX2RpZmYiLCJwcmV2IiwibmV4dCIsInVuZGVmaW5lZCIsIm9wIiwicGF0aCIsInBhcnNlUGFydGlhbFJlc3VsdCIsImdlbmVyYXRpb25zIiwidGV4dCIsInBhcnNlIiwiSlNPTiIsImdldEZvcm1hdEluc3RydWN0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/list.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* binding */ CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* binding */ CustomListOutputParser),\n/* harmony export */   ListOutputParser: () => (/* binding */ ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* binding */ MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* binding */ NumberedListOutputParser)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n\n/**\n * Class to parse the output of an LLM call to a list.\n * @augments BaseOutputParser\n */ class ListOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_1__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async *_transform(inputGenerator) {\n        let buffer = \"\";\n        for await (const input of inputGenerator){\n            if (typeof input === \"string\") {\n                // add current chunk to buffer\n                buffer += input;\n            } else {\n                // extract message content and add to buffer\n                buffer += input.content;\n            }\n            // get parts in buffer\n            if (!this.re) {\n                const parts = await this.parse(buffer);\n                if (parts.length > 1) {\n                    // if there are multiple parts, yield all but the last one\n                    for (const part of parts.slice(0, -1)){\n                        yield [\n                            part\n                        ];\n                    }\n                    // keep the last part in the buffer\n                    buffer = parts[parts.length - 1];\n                }\n            } else {\n                // if there is a regex, get all matches\n                const matches = [\n                    ...buffer.matchAll(this.re)\n                ];\n                if (matches.length > 1) {\n                    let doneIdx = 0;\n                    // if there are multiple matches, yield all but the last one\n                    for (const match of matches.slice(0, -1)){\n                        yield [\n                            match[1]\n                        ];\n                        doneIdx += (match.index ?? 0) + match[0].length;\n                    }\n                    // keep the last match in the buffer\n                    buffer = buffer.slice(doneIdx);\n                }\n            }\n        }\n        // yield the last part\n        for (const part of (await this.parse(buffer))){\n            yield [\n                part\n            ];\n        }\n    }\n}\n/**\n * Class to parse the output of an LLM call as a comma-separated list.\n * @augments ListOutputParser\n */ class CommaSeparatedListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"CommaSeparatedListOutputParser\";\n    }\n    /**\n     * Parses the given text into an array of strings, using a comma as the\n     * separator. If the parsing fails, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each comma.\n     */ async parse(text) {\n        try {\n            return text.trim().split(\",\").map((s)=>s.trim());\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`, text);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CommaSeparatedListOutputParser.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return `Your response should be a list of comma separated values, eg: \\`foo, bar, baz\\``;\n    }\n}\n/**\n * Class to parse the output of an LLM call to a list with a specific length and separator.\n * @augments ListOutputParser\n */ class CustomListOutputParser extends ListOutputParser {\n    constructor({ length, separator }){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"length\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.length = length;\n        this.separator = separator || \",\";\n    }\n    /**\n     * Parses the given text into an array of strings, using the specified\n     * separator. If the parsing fails or the number of items in the list\n     * doesn't match the expected length, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each occurrence of the specified separator.\n     */ async parse(text) {\n        try {\n            const items = text.trim().split(this.separator).map((s)=>s.trim());\n            if (this.length !== undefined && items.length !== this.length) {\n                throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Incorrect number of items. Expected ${this.length}, got ${items.length}.`);\n            }\n            return items;\n        } catch (e) {\n            if (Object.getPrototypeOf(e) === _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException.prototype) {\n                throw e;\n            }\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CustomListOutputParser, including the number of items and the\n     * separator.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return `Your response should be a list of ${this.length === undefined ? \"\" : `${this.length} `}items separated by \"${this.separator}\" (eg: \\`foo${this.separator} bar${this.separator} baz\\`)`;\n    }\n}\nclass NumberedListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /\\d+\\.\\s([^\\n]+)/g\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [\n            ...text.matchAll(this.re) ?? []\n        ].map((m)=>m[1]);\n    }\n}\nclass MarkdownListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /^\\s*[-*]\\s([^\\n]+)$/gm\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [\n            ...text.matchAll(this.re) ?? []\n        ].map((m)=>m[1]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/string.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringOutputParser: () => (/* binding */ StringOutputParser)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n/**\n * OutputParser that parses LLMResult into the top likely string.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n *\n * const chain = RunnableSequence.from([\n *   promptTemplate,\n *   new ChatOpenAI({ model: \"gpt-4o-mini\" }),\n *   new StringOutputParser(),\n * ]);\n *\n * const result = await chain.invoke({ topic: \"bears\" });\n * console.log(\"What do you call a bear with no teeth? A gummy bear!\");\n * ```\n */ class StringOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"string\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"StrOutputParser\";\n    }\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ parse(text) {\n        return Promise.resolve(text);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n    _textContentToString(content) {\n        return content.text;\n    }\n    _imageUrlContentToString(_content) {\n        throw new Error(`Cannot coerce a multimodal \"image_url\" message part into a string.`);\n    }\n    _messageContentComplexToString(content) {\n        switch(content.type){\n            case \"text\":\n            case \"text_delta\":\n                if (\"text\" in content) {\n                    // Type guard for MessageContentText\n                    return this._textContentToString(content);\n                }\n                break;\n            case \"image_url\":\n                if (\"image_url\" in content) {\n                    // Type guard for MessageContentImageUrl\n                    return this._imageUrlContentToString(content);\n                }\n                break;\n            default:\n                throw new Error(`Cannot coerce \"${content.type}\" message part into a string.`);\n        }\n        throw new Error(`Invalid content type: ${content.type}`);\n    }\n    _baseMessageContentToString(content) {\n        return content.reduce((acc, item)=>acc + this._messageContentComplexToString(item), \"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNNLE1BQU1DLDJCQUEyQkQsb0VBQXlCQTtJQUM3REUsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWtCO2dCQUFrQjthQUFTO1FBQ3pEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9DLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTs7Ozs7OztLQU9DLEdBQ0RDLE1BQU1DLElBQUksRUFBRTtRQUNSLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQ0Y7SUFDM0I7SUFDQUcsd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtJQUNBQyxxQkFBcUJDLE9BQU8sRUFBRTtRQUMxQixPQUFPQSxRQUFRTCxJQUFJO0lBQ3ZCO0lBQ0FNLHlCQUF5QkMsUUFBUSxFQUFFO1FBQy9CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGtFQUFrRSxDQUFDO0lBQ3hGO0lBQ0FDLCtCQUErQkosT0FBTyxFQUFFO1FBQ3BDLE9BQVFBLFFBQVFLLElBQUk7WUFDaEIsS0FBSztZQUNMLEtBQUs7Z0JBQ0QsSUFBSSxVQUFVTCxTQUFTO29CQUNuQixvQ0FBb0M7b0JBQ3BDLE9BQU8sSUFBSSxDQUFDRCxvQkFBb0IsQ0FBQ0M7Z0JBQ3JDO2dCQUNBO1lBQ0osS0FBSztnQkFDRCxJQUFJLGVBQWVBLFNBQVM7b0JBQ3hCLHdDQUF3QztvQkFDeEMsT0FBTyxJQUFJLENBQUNDLHdCQUF3QixDQUFDRDtnQkFDekM7Z0JBQ0E7WUFDSjtnQkFDSSxNQUFNLElBQUlHLE1BQU0sQ0FBQyxlQUFlLEVBQUVILFFBQVFLLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztRQUNyRjtRQUNBLE1BQU0sSUFBSUYsTUFBTSxDQUFDLHNCQUFzQixFQUFFSCxRQUFRSyxJQUFJLENBQUMsQ0FBQztJQUMzRDtJQUNBQyw0QkFBNEJOLE9BQU8sRUFBRTtRQUNqQyxPQUFPQSxRQUFRTyxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsT0FBU0QsTUFBTSxJQUFJLENBQUNKLDhCQUE4QixDQUFDSyxPQUFPO0lBQzFGO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RyaW5nLmpzPzZiMjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciB9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuLyoqXG4gKiBPdXRwdXRQYXJzZXIgdGhhdCBwYXJzZXMgTExNUmVzdWx0IGludG8gdGhlIHRvcCBsaWtlbHkgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IHByb21wdFRlbXBsYXRlID0gUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKFxuICogICBcIlRlbGwgbWUgYSBqb2tlIGFib3V0IHt0b3BpY31cIixcbiAqICk7XG4gKlxuICogY29uc3QgY2hhaW4gPSBSdW5uYWJsZVNlcXVlbmNlLmZyb20oW1xuICogICBwcm9tcHRUZW1wbGF0ZSxcbiAqICAgbmV3IENoYXRPcGVuQUkoeyBtb2RlbDogXCJncHQtNG8tbWluaVwiIH0pLFxuICogICBuZXcgU3RyaW5nT3V0cHV0UGFyc2VyKCksXG4gKiBdKTtcbiAqXG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBjaGFpbi5pbnZva2UoeyB0b3BpYzogXCJiZWFyc1wiIH0pO1xuICogY29uc29sZS5sb2coXCJXaGF0IGRvIHlvdSBjYWxsIGEgYmVhciB3aXRoIG5vIHRlZXRoPyBBIGd1bW15IGJlYXIhXCIpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJpbmdPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5fY29yZVwiLCBcIm91dHB1dF9wYXJzZXJzXCIsIFwic3RyaW5nXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTdHJPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgc3RyaW5nIG91dHB1dCBmcm9tIGFuIExMTSBjYWxsLiBUaGlzIG1ldGhvZCBpcyBtZWFudCB0byBiZVxuICAgICAqIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzZXMgdG8gZGVmaW5lIGhvdyBhIHN0cmluZyBvdXRwdXQgZnJvbSBhbiBMTE1cbiAgICAgKiBzaG91bGQgYmUgcGFyc2VkLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBzdHJpbmcgb3V0cHV0IGZyb20gYW4gTExNIGNhbGwuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyBPcHRpb25hbCBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIG9mIHRoZSBwYXJzZWQgb3V0cHV0LlxuICAgICAqL1xuICAgIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXh0KTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgX3RleHRDb250ZW50VG9TdHJpbmcoY29udGVudCkge1xuICAgICAgICByZXR1cm4gY29udGVudC50ZXh0O1xuICAgIH1cbiAgICBfaW1hZ2VVcmxDb250ZW50VG9TdHJpbmcoX2NvbnRlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29lcmNlIGEgbXVsdGltb2RhbCBcImltYWdlX3VybFwiIG1lc3NhZ2UgcGFydCBpbnRvIGEgc3RyaW5nLmApO1xuICAgIH1cbiAgICBfbWVzc2FnZUNvbnRlbnRDb21wbGV4VG9TdHJpbmcoY29udGVudCkge1xuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0X2RlbHRhXCI6XG4gICAgICAgICAgICAgICAgaWYgKFwidGV4dFwiIGluIGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHlwZSBndWFyZCBmb3IgTWVzc2FnZUNvbnRlbnRUZXh0XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0Q29udGVudFRvU3RyaW5nKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpbWFnZV91cmxcIjpcbiAgICAgICAgICAgICAgICBpZiAoXCJpbWFnZV91cmxcIiBpbiBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFR5cGUgZ3VhcmQgZm9yIE1lc3NhZ2VDb250ZW50SW1hZ2VVcmxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlVXJsQ29udGVudFRvU3RyaW5nKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29lcmNlIFwiJHtjb250ZW50LnR5cGV9XCIgbWVzc2FnZSBwYXJ0IGludG8gYSBzdHJpbmcuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbnRlbnQgdHlwZTogJHtjb250ZW50LnR5cGV9YCk7XG4gICAgfVxuICAgIF9iYXNlTWVzc2FnZUNvbnRlbnRUb1N0cmluZyhjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50LnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgKyB0aGlzLl9tZXNzYWdlQ29udGVudENvbXBsZXhUb1N0cmluZyhpdGVtKSwgXCJcIik7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIiLCJTdHJpbmdPdXRwdXRQYXJzZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJsY19uYW1lIiwicGFyc2UiLCJ0ZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRGb3JtYXRJbnN0cnVjdGlvbnMiLCJfdGV4dENvbnRlbnRUb1N0cmluZyIsImNvbnRlbnQiLCJfaW1hZ2VVcmxDb250ZW50VG9TdHJpbmciLCJfY29udGVudCIsIkVycm9yIiwiX21lc3NhZ2VDb250ZW50Q29tcGxleFRvU3RyaW5nIiwidHlwZSIsIl9iYXNlTWVzc2FnZUNvbnRlbnRUb1N0cmluZyIsInJlZHVjZSIsImFjYyIsIml0ZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/structured.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* binding */ AsymmetricStructuredOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* binding */ JsonMarkdownStructuredOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* binding */ StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _utils_types_zod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/types/zod.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\");\n/* harmony import */ var _utils_json_schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/json_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n\n\n\nclass StructuredOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    static lc_name() {\n        return \"StructuredOutputParser\";\n    }\n    toJSON() {\n        return this.toJSONNotImplemented();\n    }\n    constructor(schema){\n        super(schema);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"structured\"\n            ]\n        });\n    }\n    /**\n     * Creates a new StructuredOutputParser from a Zod schema.\n     * @param schema The Zod schema which the output should match\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    /**\n     * Creates a new StructuredOutputParser from a set of names and\n     * descriptions.\n     * @param schemas An object where each key is a name and each value is a description\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod_v3__WEBPACK_IMPORTED_MODULE_3__.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod_v3__WEBPACK_IMPORTED_MODULE_3__.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n    /**\n     * Returns a markdown code snippet with a JSON object formatted according\n     * to the schema.\n     * @param options Optional. The options for formatting the instructions\n     * @returns A markdown code snippet with a JSON object formatted according to the schema.\n     */ getFormatInstructions() {\n        return `You must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n\\`\\`\\`json\n${JSON.stringify((0,_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)(this.schema))}\n\\`\\`\\`\n`;\n    }\n    /**\n     * Parses the given text according to the schema.\n     * @param text The text to parse\n     * @returns The parsed output.\n     */ async parse(text) {\n        try {\n            const json = text.includes(\"```\") ? text.trim().split(/```(?:json)?/)[1] : text.trim();\n            const escapedJson = json.replace(/\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/g, (_match, capturedGroup)=>{\n                const escapedInsideQuotes = capturedGroup.replace(/\\n/g, \"\\\\n\");\n                return `\"${escapedInsideQuotes}\"`;\n            }).replace(/\\n/g, \"\");\n            return await (0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_1__.interopParseAsync)(this.schema, JSON.parse(escapedJson));\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n/**\n * A specific type of `StructuredOutputParser` that parses JSON data\n * formatted as a markdown code snippet.\n */ class JsonMarkdownStructuredOutputParser extends StructuredOutputParser {\n    static lc_name() {\n        return \"JsonMarkdownStructuredOutputParser\";\n    }\n    getFormatInstructions(options) {\n        const interpolationDepth = options?.interpolationDepth ?? 1;\n        if (interpolationDepth < 1) {\n            throw new Error(\"f string interpolation depth must be at least 1\");\n        }\n        return `Return a markdown code snippet with a JSON object formatted to look like:\\n\\`\\`\\`json\\n${this._schemaToInstruction((0,_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)(this.schema)).replaceAll(\"{\", \"{\".repeat(interpolationDepth)).replaceAll(\"}\", \"}\".repeat(interpolationDepth))}\\n\\`\\`\\``;\n    }\n    _schemaToInstruction(schemaInput, indent = 2) {\n        const schema = schemaInput;\n        if (\"type\" in schema) {\n            let nullable = false;\n            let type;\n            if (Array.isArray(schema.type)) {\n                const nullIdx = schema.type.findIndex((type)=>type === \"null\");\n                if (nullIdx !== -1) {\n                    nullable = true;\n                    schema.type.splice(nullIdx, 1);\n                }\n                type = schema.type.join(\" | \");\n            } else {\n                type = schema.type;\n            }\n            if (schema.type === \"object\" && schema.properties) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                const properties = Object.entries(schema.properties).map(([key, value])=>{\n                    const isOptional = schema.required?.includes(key) ? \"\" : \" (optional)\";\n                    return `${\" \".repeat(indent)}\"${key}\": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;\n                }).join(\"\\n\");\n                return `{\\n${properties}\\n${\" \".repeat(indent - 2)}}${description}`;\n            }\n            if (schema.type === \"array\" && schema.items) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                return `array[\\n${\" \".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\\n${\" \".repeat(indent - 2)}] ${description}`;\n            }\n            const isNullable = nullable ? \" (nullable)\" : \"\";\n            const description = schema.description ? ` // ${schema.description}` : \"\";\n            return `${type}${description}${isNullable}`;\n        }\n        if (\"anyOf\" in schema) {\n            return schema.anyOf.map((s)=>this._schemaToInstruction(s, indent)).join(`\\n${\" \".repeat(indent - 2)}`);\n        }\n        throw new Error(\"unsupported schema type\");\n    }\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod_v3__WEBPACK_IMPORTED_MODULE_3__.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod_v3__WEBPACK_IMPORTED_MODULE_3__.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n}\n/**\n * A type of `StructuredOutputParser` that handles asymmetric input and\n * output schemas.\n */ class AsymmetricStructuredOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    constructor({ inputSchema }){\n        super(...arguments);\n        Object.defineProperty(this, \"structuredInputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);\n    }\n    async parse(text) {\n        let parsedInput;\n        try {\n            parsedInput = await this.structuredInputParser.parse(text);\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n        return this.outputProcessor(parsedInput);\n    }\n    getFormatInstructions() {\n        return this.structuredInputParser.getFormatInstructions();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/transform.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* binding */ BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* binding */ BaseTransformOutputParser)\n/* harmony export */ });\n/* harmony import */ var _cfworker_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _messages_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n\n\n\n\n/**\n * Class to parse the output of an LLM call that also allows streaming inputs.\n */ class BaseTransformOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    async *_transform(inputGenerator) {\n        for await (const chunk of inputGenerator){\n            if (typeof chunk === \"string\") {\n                yield this.parseResult([\n                    {\n                        text: chunk\n                    }\n                ]);\n            } else {\n                yield this.parseResult([\n                    {\n                        message: chunk,\n                        text: this._baseMessageToString(chunk)\n                    }\n                ]);\n            }\n        }\n    }\n    /**\n     * Transforms an asynchronous generator of input into an asynchronous\n     * generator of parsed output.\n     * @param inputGenerator An asynchronous generator of input.\n     * @param options A configuration object.\n     * @returns An asynchronous generator of parsed output.\n     */ async *transform(inputGenerator, options) {\n        yield* this._transformStreamWithConfig(inputGenerator, this._transform.bind(this), {\n            ...options,\n            runType: \"parser\"\n        });\n    }\n}\n/**\n * A base class for output parsers that can handle streaming input. It\n * extends the `BaseTransformOutputParser` class and provides a method for\n * converting parsed outputs into a diff format.\n */ class BaseCumulativeTransformOutputParser extends BaseTransformOutputParser {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"diff\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.diff = fields?.diff ?? this.diff;\n    }\n    async *_transform(inputGenerator) {\n        let prevParsed;\n        let accGen;\n        for await (const chunk of inputGenerator){\n            if (typeof chunk !== \"string\" && typeof chunk.content !== \"string\") {\n                throw new Error(\"Cannot handle non-string output.\");\n            }\n            let chunkGen;\n            if ((0,_messages_base_js__WEBPACK_IMPORTED_MODULE_2__.isBaseMessageChunk)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_4__.ChatGenerationChunk({\n                    message: chunk,\n                    text: chunk.content\n                });\n            } else if ((0,_messages_base_js__WEBPACK_IMPORTED_MODULE_2__.isBaseMessage)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_4__.ChatGenerationChunk({\n                    message: (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_3__.convertToChunk)(chunk),\n                    text: chunk.content\n                });\n            } else {\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_4__.GenerationChunk({\n                    text: chunk\n                });\n            }\n            if (accGen === undefined) {\n                accGen = chunkGen;\n            } else {\n                accGen = accGen.concat(chunkGen);\n            }\n            const parsed = await this.parsePartialResult([\n                accGen\n            ]);\n            if (parsed !== undefined && parsed !== null && !(0,_cfworker_json_schema__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(parsed, prevParsed)) {\n                if (this.diff) {\n                    yield this._diff(prevParsed, parsed);\n                } else {\n                    yield parsed;\n                }\n                prevParsed = parsed;\n            }\n        }\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/xml.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLOutputParser: () => (/* binding */ XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* binding */ XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseXMLMarkdown: () => (/* binding */ parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n/* harmony import */ var _utils_sax_js_sax_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/sax-js/sax.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js\");\n\n\n\nconst XML_FORMAT_INSTRUCTIONS = `The output should be formatted as a XML file.\n1. Output should conform to the tags below. \n2. If tags are not given, make them on your own.\n3. Remember to always open and close all the tags.\n\nAs an example, for the tags [\"foo\", \"bar\", \"baz\"]:\n1. String \"<foo>\\n   <bar>\\n      <baz></baz>\\n   </bar>\\n</foo>\" is a well-formatted instance of the schema. \n2. String \"<foo>\\n   <bar>\\n   </foo>\" is a badly-formatted instance.\n3. String \"<foo>\\n   <tag>\\n   </tag>\\n</foo>\" is a badly-formatted instance.\n\nHere are the output tags:\n\\`\\`\\`\n{tags}\n\\`\\`\\``;\nclass XMLOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.tags = fields?.tags;\n    }\n    static lc_name() {\n        return \"XMLOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [\n                {\n                    op: \"replace\",\n                    path: \"\",\n                    value: next\n                }\n            ];\n        }\n        return (0,_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__.compare)(prev, next);\n    }\n    async parsePartialResult(generations) {\n        return parseXMLMarkdown(generations[0].text);\n    }\n    async parse(text) {\n        return parseXMLMarkdown(text);\n    }\n    getFormatInstructions() {\n        const withTags = !!(this.tags && this.tags.length > 0);\n        return withTags ? XML_FORMAT_INSTRUCTIONS.replace(\"{tags}\", this.tags?.join(\", \") ?? \"\") : XML_FORMAT_INSTRUCTIONS;\n    }\n}\nconst strip = (text)=>text.split(\"\\n\").map((line)=>line.replace(/^\\s+/, \"\")).join(\"\\n\").trim();\nconst parseParsedResult = (input)=>{\n    if (Object.keys(input).length === 0) {\n        return {};\n    }\n    const result = {};\n    if (input.children.length > 0) {\n        result[input.name] = input.children.map(parseParsedResult);\n        return result;\n    } else {\n        result[input.name] = input.text ?? undefined;\n        return result;\n    }\n};\nfunction parseXMLMarkdown(s) {\n    const cleanedString = strip(s);\n    const parser = _utils_sax_js_sax_js__WEBPACK_IMPORTED_MODULE_2__.sax.parser(true);\n    let parsedResult = {};\n    const elementStack = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onopentag = (node)=>{\n        const element = {\n            name: node.name,\n            attributes: node.attributes,\n            children: [],\n            text: \"\",\n            isSelfClosing: node.isSelfClosing\n        };\n        if (elementStack.length > 0) {\n            const parentElement = elementStack[elementStack.length - 1];\n            parentElement.children.push(element);\n        } else {\n            parsedResult = element;\n        }\n        if (!node.isSelfClosing) {\n            elementStack.push(element);\n        }\n    };\n    parser.onclosetag = ()=>{\n        if (elementStack.length > 0) {\n            const lastElement = elementStack.pop();\n            if (elementStack.length === 0 && lastElement) {\n                parsedResult = lastElement;\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.ontext = (text)=>{\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.text += text;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onattribute = (attr)=>{\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.attributes[attr.name] = attr.value;\n        }\n    };\n    // Try to find XML string within triple backticks.\n    const match = /```(xml)?(.*)```/s.exec(cleanedString);\n    const xmlString = match ? match[2] : cleanedString;\n    parser.write(xmlString).close();\n    // Remove the XML declaration if present\n    if (parsedResult && parsedResult.name === \"?xml\") {\n        parsedResult = parsedResult.children[0];\n    }\n    return parseParsedResult(parsedResult);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/outputs.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/dist/outputs.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* binding */ ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* binding */ GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* binding */ RUN_KEY)\n/* harmony export */ });\nconst RUN_KEY = \"__run\";\n/**\n * Chunk of a single generation. Used for streaming.\n */ class GenerationChunk {\n    constructor(fields){\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"generationInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = fields.text;\n        this.generationInfo = fields.generationInfo;\n    }\n    concat(chunk) {\n        return new GenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            }\n        });\n    }\n}\nclass ChatGenerationChunk extends GenerationChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = fields.message;\n    }\n    concat(chunk) {\n        return new ChatGenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            },\n            message: this.message.concat(chunk.message)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxVQUFVLFFBQVE7QUFDL0I7O0NBRUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsOERBQThEO1FBQzlETCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdQLE9BQU9PLElBQUk7UUFDdkIsSUFBSSxDQUFDQyxjQUFjLEdBQUdSLE9BQU9RLGNBQWM7SUFDL0M7SUFDQUMsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJWixnQkFBZ0I7WUFDdkJTLE1BQU0sSUFBSSxDQUFDQSxJQUFJLEdBQUdHLE1BQU1ILElBQUk7WUFDNUJDLGdCQUFnQjtnQkFDWixHQUFHLElBQUksQ0FBQ0EsY0FBYztnQkFDdEIsR0FBR0UsTUFBTUYsY0FBYztZQUMzQjtRQUNKO0lBQ0o7QUFDSjtBQUNPLE1BQU1HLDRCQUE0QmI7SUFDckNDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDTSxPQUFPLEdBQUdaLE9BQU9ZLE9BQU87SUFDakM7SUFDQUgsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJQyxvQkFBb0I7WUFDM0JKLE1BQU0sSUFBSSxDQUFDQSxJQUFJLEdBQUdHLE1BQU1ILElBQUk7WUFDNUJDLGdCQUFnQjtnQkFDWixHQUFHLElBQUksQ0FBQ0EsY0FBYztnQkFDdEIsR0FBR0UsTUFBTUYsY0FBYztZQUMzQjtZQUNBSSxTQUFTLElBQUksQ0FBQ0EsT0FBTyxDQUFDSCxNQUFNLENBQUNDLE1BQU1FLE9BQU87UUFDOUM7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dHMuanM/ZDc4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUlVOX0tFWSA9IFwiX19ydW5cIjtcbi8qKlxuICogQ2h1bmsgb2YgYSBzaW5nbGUgZ2VuZXJhdGlvbi4gVXNlZCBmb3Igc3RyZWFtaW5nLlxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJhdGlvbkNodW5rIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZW5lcmF0aW9uSW5mb1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRleHQgPSBmaWVsZHMudGV4dDtcbiAgICAgICAgdGhpcy5nZW5lcmF0aW9uSW5mbyA9IGZpZWxkcy5nZW5lcmF0aW9uSW5mbztcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2VuZXJhdGlvbkNodW5rKHtcbiAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCArIGNodW5rLnRleHQsXG4gICAgICAgICAgICBnZW5lcmF0aW9uSW5mbzoge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuZXJhdGlvbkluZm8sXG4gICAgICAgICAgICAgICAgLi4uY2h1bmsuZ2VuZXJhdGlvbkluZm8sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hhdEdlbmVyYXRpb25DaHVuayBleHRlbmRzIEdlbmVyYXRpb25DaHVuayB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZmllbGRzLm1lc3NhZ2U7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IENoYXRHZW5lcmF0aW9uQ2h1bmsoe1xuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0ICsgY2h1bmsudGV4dCxcbiAgICAgICAgICAgIGdlbmVyYXRpb25JbmZvOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgICAgICAuLi5jaHVuay5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UuY29uY2F0KGNodW5rLm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUlVOX0tFWSIsIkdlbmVyYXRpb25DaHVuayIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsInRleHQiLCJnZW5lcmF0aW9uSW5mbyIsImNvbmNhdCIsImNodW5rIiwiQ2hhdEdlbmVyYXRpb25DaHVuayIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompt_values.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompt_values.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptValue: () => (/* binding */ BasePromptValue),\n/* harmony export */   ChatPromptValue: () => (/* binding */ ChatPromptValue),\n/* harmony export */   ImagePromptValue: () => (/* binding */ ImagePromptValue),\n/* harmony export */   StringPromptValue: () => (/* binding */ StringPromptValue)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _messages_human_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n\n\n\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */ class BasePromptValue extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n/**\n * Represents a prompt value as a string. It extends the BasePromptValue\n * class and overrides the toString and toChatMessages methods.\n */ class StringPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"StringPromptValue\";\n    }\n    constructor(value){\n        super({\n            value\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [\n            new _messages_human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(this.value)\n        ];\n    }\n}\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */ class ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields){\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                messages: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBufferString)(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\n/**\n * Class that represents an image prompt value. It extends the\n * BasePromptValue and includes an ImageURL instance.\n */ class ImagePromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ImagePromptValue\";\n    }\n    constructor(fields){\n        if (!(\"imageUrl\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                imageUrl: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"imageUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @ignore */ Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.imageUrl = fields.imageUrl;\n    }\n    toString() {\n        return this.imageUrl.url;\n    }\n    toChatMessages() {\n        return [\n            new _messages_human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n                content: [\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            detail: this.imageUrl.detail,\n                            url: this.imageUrl.url\n                        }\n                    }\n                ]\n            })\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableAssign: () => (/* binding */ RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* binding */ RunnableParallel),\n/* harmony export */   RunnablePick: () => (/* binding */ RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableToolLike: () => (/* binding */ RunnableToolLike),\n/* harmony export */   RunnableTraceable: () => (/* binding */ RunnableTraceable),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToDict: () => (/* binding */ _coerceToDict),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable),\n/* harmony export */   convertRunnableToTool: () => (/* binding */ convertRunnableToTool)\n/* harmony export */ });\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! langsmith/singletons/traceable */ \"(rsc)/./node_modules/langsmith/singletons/traceable.js\");\n/* harmony import */ var _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/log_stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\");\n/* harmony import */ var _tracers_event_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tracers/event_stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _utils_signal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/signal.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/signal.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../tracers/root_listener.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./graph.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js\");\n/* harmony import */ var _wrappers_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./wrappers.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.js\");\n/* harmony import */ var _iter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./iter.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/iter.js\");\n/* harmony import */ var _tools_utils_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../tools/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\");\n/* harmony import */ var _utils_types_zod_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils/types/zod.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && // eslint-disable-next-line no-instanceof/no-instanceof\n    !(value instanceof Date) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_4__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     *\n     * @deprecated Use {@link withConfig} instead. This will be removed in the next breaking release.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     *\n     * @deprecated This will be removed in the next breaking release.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param fields.stopAfterAttempt The number of attempts to retry.\n     * @param fields.onFailedAttempt A function that is called when a retry fails.\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        const fallbacks = Array.isArray(fields) ? fields : fields.fallbacks;\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options) && options.length !== length) {\n            throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n        }\n        if (Array.isArray(options)) {\n            return options.map(_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig);\n        }\n        if (length > 1 && !Array.isArray(options) && options.runId) {\n            console.warn(\"Provided runId will be used only for the first element of the batch.\");\n            const subsequent = Object.fromEntries(Object.entries(options).filter(([key])=>key !== \"runId\"));\n            return Array.from({\n                length\n            }, (_, i)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(i === 0 ? options : subsequent));\n        }\n        return Array.from({\n            length\n        }, ()=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_8__.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this._streamIterator(input, config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        let runnableConfig;\n        if (options === undefined) {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        } else {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)({\n                callbacks: options.callbacks,\n                tags: options.tags,\n                metadata: options.metadata,\n                runName: options.runName,\n                configurable: options.configurable,\n                recursionLimit: options.recursionLimit,\n                maxConcurrency: options.maxConcurrency,\n                runId: options.runId,\n                timeout: options.timeout,\n                signal: options.signal\n            });\n        }\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        delete callOptions.runId;\n        delete callOptions.timeout;\n        delete callOptions.signal;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        delete config.runId;\n        let output;\n        try {\n            const promise = func.call(this, input, config, runManager);\n            output = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, options?.signal);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), optionsList[i].runId, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName());\n            delete optionsList[i].runId;\n            return handleStartRes;\n        }));\n        let outputs;\n        try {\n            const promise = func.call(this, inputs, optionsList, runManagers, batchOptions);\n            outputs = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, optionsList?.[0]?.signal);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalInput, chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async ()=>callbackManager_?.handleChainStart(this.toJSON(), {\n                    input: \"\"\n                }, config.runId, config.runType, undefined, undefined, config.runName ?? this.getName()), options?.signal, config);\n            delete config.runId;\n            runManager = pipe.setup;\n            const streamEventsHandler = runManager?.handlers.find(_tracers_event_stream_js__WEBPACK_IMPORTED_MODULE_3__.isStreamEventsHandler);\n            let iterator = pipe.output;\n            if (streamEventsHandler !== undefined && runManager !== undefined) {\n                iterator = streamEventsHandler.tapOutputIterable(runManager.runId, iterator);\n            }\n            const streamLogHandler = runManager?.handlers.find(_tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.isLogStreamHandler);\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = streamLogHandler.tapOutputIterable(runManager.runId, iterator);\n            }\n            for await (const chunk of iterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    getGraph(_) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_12__.Graph();\n        // TODO: Add input schema for runnables\n        const inputNode = graph.addNode({\n            name: `${this.getName()}Input`,\n            schema: zod_v3__WEBPACK_IMPORTED_MODULE_17__.any()\n        });\n        const runnableNode = graph.addNode(this);\n        // TODO: Add output schemas for runnables\n        const outputNode = graph.addNode({\n            name: `${this.getName()}Output`,\n            schema: zod_v3__WEBPACK_IMPORTED_MODULE_17__.any()\n        });\n        graph.addEdge(inputNode, runnableNode);\n        graph.addEdge(runnableNode, outputNode);\n        return graph;\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */ pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */ assign(mapping) {\n        return this.pipe(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({\n            steps: mapping\n        })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */ async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\"\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [\n                logStreamCallbackHandler\n            ];\n        } else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([\n                logStreamCallbackHandler\n            ]);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.addHandler(logStreamCallbackHandler, true);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream){\n                    const patch = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk\n                            }\n                        ]\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            } finally{\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler){\n                yield log;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    streamEvents(input, options, streamOptions) {\n        let stream;\n        if (options.version === \"v1\") {\n            stream = this._streamEventsV1(input, options, streamOptions);\n        } else if (options.version === \"v2\") {\n            stream = this._streamEventsV2(input, options, streamOptions);\n        } else {\n            throw new Error(`Only versions \"v1\" and \"v2\" of the schema are currently supported.`);\n        }\n        if (options.encoding === \"text/event-stream\") {\n            return (0,_wrappers_js__WEBPACK_IMPORTED_MODULE_13__.convertToHttpEventStream)(stream);\n        } else {\n            return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(stream);\n        }\n    }\n    async *_streamEventsV2(input, options, streamOptions) {\n        const eventStreamer = new _tracers_event_stream_js__WEBPACK_IMPORTED_MODULE_3__.EventStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const runId = config.runId ?? (0,uuid__WEBPACK_IMPORTED_MODULE_18__[\"default\"])();\n        config.runId = runId;\n        const callbacks = config.callbacks;\n        if (callbacks === undefined) {\n            config.callbacks = [\n                eventStreamer\n            ];\n        } else if (Array.isArray(callbacks)) {\n            config.callbacks = callbacks.concat(eventStreamer);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.addHandler(eventStreamer, true);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const abortController = new AbortController();\n        // Call the runnable in streaming mode,\n        // add each chunk to the output stream\n        const outerThis = this;\n        async function consumeRunnableStream() {\n            let signal;\n            let listener = null;\n            try {\n                if (options?.signal) {\n                    if (\"any\" in AbortSignal) {\n                        // Use native AbortSignal.any() if available (Node 19+)\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        signal = AbortSignal.any([\n                            abortController.signal,\n                            options.signal\n                        ]);\n                    } else {\n                        // Fallback for Node 18 and below - just use the provided signal\n                        signal = options.signal;\n                        // Ensure we still abort our controller when the parent signal aborts\n                        listener = ()=>{\n                            abortController.abort();\n                        };\n                        options.signal.addEventListener(\"abort\", listener, {\n                            once: true\n                        });\n                    }\n                } else {\n                    signal = abortController.signal;\n                }\n                const runnableStream = await outerThis.stream(input, {\n                    ...config,\n                    signal\n                });\n                const tappedStream = eventStreamer.tapOutputIterable(runId, runnableStream);\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                for await (const _ of tappedStream){\n                    // Just iterate so that the callback handler picks up events\n                    if (abortController.signal.aborted) break;\n                }\n            } finally{\n                await eventStreamer.finish();\n                if (signal && listener) {\n                    signal.removeEventListener(\"abort\", listener);\n                }\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        let firstEventSent = false;\n        let firstEventRunId;\n        try {\n            for await (const event of eventStreamer){\n                // This is a work-around an issue where the inputs into the\n                // chain are not available until the entire input is consumed.\n                // As a temporary solution, we'll modify the input to be the input\n                // that was passed into the chain.\n                if (!firstEventSent) {\n                    event.data.input = input;\n                    firstEventSent = true;\n                    firstEventRunId = event.run_id;\n                    yield event;\n                    continue;\n                }\n                if (event.run_id === firstEventRunId && event.event.endsWith(\"_end\")) {\n                    // If it's the end event corresponding to the root runnable\n                    // we dont include the input in the event since it's guaranteed\n                    // to be included in the first event.\n                    if (event.data?.input) {\n                        delete event.data.input;\n                    }\n                }\n                yield event;\n            }\n        } finally{\n            abortController.abort();\n            await runnableStreamConsumePromise;\n        }\n    }\n    async *_streamEventsV1(input, options, streamOptions) {\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\"\n        });\n        const rootEventFilter = new _utils_js__WEBPACK_IMPORTED_MODULE_10__._RootEventFilter({\n            ...streamOptions\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream){\n            if (!runLog) {\n                runLog = _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLog.fromRunLogPatch(log);\n            } else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = {\n                    ...runLog.state\n                };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input\n                    }\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops.filter((op)=>op.path.startsWith(\"/logs/\")).map((op)=>op.path.split(\"/\")[2]);\n            const dedupedPaths = [\n                ...new Set(paths)\n            ];\n            for (const path of dedupedPaths){\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    } else {\n                        eventType = \"start\";\n                    }\n                } else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                } else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                } else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = {\n                        chunk: logEntry.streamed_output[0]\n                    };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = {\n                    chunk: state.streamed_output[0]\n                };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output\n                }\n            };\n            if (rootEventFilter.includeEvent(event, state.type)) yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_10__.isRunnableInterface)(thing);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_9__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n    /**\n     * Convert a runnable to a tool. Return a new instance of `RunnableToolLike`\n     * which contains the runnable, name, description and schema.\n     *\n     * @template {T extends RunInput = RunInput} RunInput - The input type of the runnable. Should be the same as the `RunInput` type of the runnable.\n     *\n     * @param fields\n     * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n     * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n     * @param {z.ZodType<T>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n     * @returns {RunnableToolLike<z.ZodType<T>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n     */ asTool(fields) {\n        return convertRunnableToTool(this, fields);\n    }\n}\n/**\n * Wraps a runnable and applies partial config upon invocation.\n *\n * @example\n * ```typescript\n * import {\n *   type RunnableConfig,\n *   RunnableLambda,\n * } from \"@langchain/core/runnables\";\n *\n * const enhanceProfile = (\n *   profile: Record<string, any>,\n *   config?: RunnableConfig\n * ) => {\n *   if (config?.configurable?.role) {\n *     return { ...profile, role: config.configurable.role };\n *   }\n *   return profile;\n * };\n *\n * const runnable = RunnableLambda.from(enhanceProfile);\n *\n * // Bind configuration to the runnable to set the user's role dynamically\n * const adminRunnable = runnable.bind({ configurable: { role: \"Admin\" } });\n * const userRunnable = runnable.bind({ configurable: { role: \"User\" } });\n *\n * const result1 = await adminRunnable.invoke({\n *   name: \"Alice\",\n *   email: \"alice@example.com\"\n * });\n *\n * // { name: \"Alice\", email: \"alice@example.com\", role: \"Admin\" }\n *\n * const result2 = await userRunnable.invoke({\n *   name: \"Bob\",\n *   email: \"bob@example.com\"\n * });\n *\n * // { name: \"Bob\", email: \"bob@example.com\", role: \"User\" }\n * ```\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.mergeConfigs)(this.config, ...options);\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.mergeConfigs)(config, ...this.configFactories ? await Promise.all(this.configFactories.map(async (configFactory)=>await configFactory(config))) : []);\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableBinding` class that is bound with the specified arguments.\n     *\n     * @deprecated Use {@link withConfig} instead. This will be removed in the next breaking release.\n     */ bind(kwargs) {\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? await Promise.all(options.map(async (individualOption)=>this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(individualOption), this.kwargs))) : await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    async *transform(generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    streamEvents(input, options, streamOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const outerThis = this;\n        const generator = async function*() {\n            yield* outerThis.bound.streamEvents(input, {\n                ...await outerThis._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), outerThis.kwargs),\n                version: options.version\n            }, streamOptions);\n        };\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(generator());\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_9__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n * @example\n * ```typescript\n * import { RunnableEach, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const toUpperCase = (input: string): string => input.toUpperCase();\n * const addGreeting = (input: string): string => `Hello, ${input}!`;\n *\n * const upperCaseLambda = RunnableLambda.from(toUpperCase);\n * const greetingLambda = RunnableLambda.from(addGreeting);\n *\n * const chain = new RunnableEach({\n *   bound: upperCaseLambda.pipe(greetingLambda),\n * });\n *\n * const result = await chain.invoke([\"alice\", \"bob\", \"carol\"])\n *\n * // [\"Hello, ALICE!\", \"Hello, BOB!\", \"Hello, CAROL!\"]\n * ```\n *\n * @deprecated This will be removed in the next breaking release.\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     *\n     * @deprecated Use {@link withConfig} instead. This will be removed in the next breaking release.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke.bind(this), inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks: runManager?.getChild()\n        }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({\n                onStart,\n                onEnd,\n                onError\n            })\n        });\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableRetry,\n * } from \"@langchain/core/runnables\";\n *\n * // Simulate an API call that fails\n * const simulateApiCall = (input: string): string => {\n *   console.log(`Attempting API call with input: ${input}`);\n *   throw new Error(\"API call failed due to network issue\");\n * };\n *\n * const apiCallLambda = RunnableLambda.from(simulateApiCall);\n *\n * // Apply retry logic using the .withRetry() method\n * const apiCallWithRetry = apiCallLambda.withRetry({ stopAfterAttempt: 3 });\n *\n * // Alternatively, create a RunnableRetry instance manually\n * const manualRetry = new RunnableRetry({\n *   bound: apiCallLambda,\n *   maxAttemptNumber: 3,\n *   config: {},\n * });\n *\n * // Example invocation using the .withRetry() method\n * const res = await apiCallWithRetry\n *   .invoke(\"Request 1\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n *\n * // Example invocation using the manual retry instance\n * const res2 = await manualRetry\n *   .invoke(\"Request 2\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n * ```\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks: runManager?.getChild(tag)\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onFailedAttempt: (error)=>this.onFailedAttempt(error, input),\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke.bind(this), input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            firstException.input = remainingInputs[i];\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onFailedAttempt: (error)=>this.onFailedAttempt(error, error.input),\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({ model: \"gpt-4o-mini\" })]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"omitSequenceTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n        this.omitSequenceTags = fields.omitSequenceTags ?? this.omitSequenceTags;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                const promise = step.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`)\n                }));\n                nextStepInput = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, options?.signal);\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            if (options?.signal?.aborted) {\n                throw new Error(\"Aborted\");\n            }\n            finalOutput = await this.last.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${this.steps.length}`)\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for(let i = 0; i < this.steps.length; i += 1){\n                const step = this.steps[i];\n                const promise = step.batch(nextStepInputs, runManagers.map((runManager, j)=>{\n                    const childRunManager = runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`);\n                    return (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(configList[j], {\n                        callbacks: childRunManager\n                    });\n                }), batchOptions);\n                nextStepInputs = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, configList[0]?.signal);\n            }\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(options);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherOptions, {\n                callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:1`)\n            }));\n            for(let i = 1; i < steps.length; i += 1){\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`)\n                }));\n            }\n            for await (const chunk of finalGenerator){\n                options?.signal?.throwIfAborted();\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    getGraph(config) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_12__.Graph();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let currentLastNode = null;\n        this.steps.forEach((step, index)=>{\n            const stepGraph = step.getGraph(config);\n            if (index !== 0) {\n                stepGraph.trimFirstNode();\n            }\n            if (index !== this.steps.length - 1) {\n                stepGraph.trimLastNode();\n            }\n            graph.extend(stepGraph);\n            const stepFirstNode = stepGraph.firstNode();\n            if (!stepFirstNode) {\n                throw new Error(`Runnable ${step} has no first node`);\n            }\n            if (currentLastNode) {\n                graph.addEdge(currentLastNode, stepFirstNode);\n            }\n            currentLastNode = stepGraph.lastNode();\n        });\n        return graph;\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable),\n                name: this.name\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], nameOrFields) {\n        let extra = {};\n        if (typeof nameOrFields === \"string\") {\n            extra.name = nameOrFields;\n        } else if (nameOrFields !== undefined) {\n            extra = nameOrFields;\n        }\n        return new RunnableSequence({\n            ...extra,\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1])\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({\n            steps\n        });\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        }, config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            const promises = Object.entries(this.steps).map(async ([key, runnable])=>{\n                output[key] = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`)\n                }));\n            });\n            await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(Promise.all(promises), options?.signal);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = {\n            ...this.steps\n        };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i)=>{\n            const gen = runnable.transform(inputCopies[i], (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`)\n            }));\n            return [\n                key,\n                gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    }))\n            ];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while(tasks.size){\n            const promise = Promise.race(tasks.values());\n            const { key, result, gen } = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, options?.signal);\n            tasks.delete(key);\n            if (!result.done) {\n                yield {\n                    [key]: result.value\n                };\n                tasks.set(key, gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that wraps a traced LangSmith function.\n */ class RunnableTraceable extends Runnable {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (!(0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.isTraceableFunction)(fields.func)) {\n            throw new Error(\"RunnableTraceable requires a function that is wrapped in traceable higher-order function\");\n        }\n        this.func = fields.func;\n    }\n    async invoke(input, options) {\n        const [config] = this._getOptionsList(options ?? {}, 1);\n        const callbacks = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const promise = this.func((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks\n        }), input);\n        return (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, config?.signal);\n    }\n    async *_streamIterator(input, options) {\n        const [config] = this._getOptionsList(options ?? {}, 1);\n        const result = await this.invoke(input, options);\n        if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isAsyncIterable)(result)) {\n            for await (const item of result){\n                config?.signal?.throwIfAborted();\n                yield item;\n            }\n            return;\n        }\n        if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isIterator)(result)) {\n            while(true){\n                config?.signal?.throwIfAborted();\n                const state = result.next();\n                if (state.done) break;\n                yield state.value;\n            }\n            return;\n        }\n        yield result;\n    }\n    static from(func) {\n        return new RunnableTraceable({\n            func\n        });\n    }\n}\nfunction assertNonTraceableFunction(func) {\n    if ((0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.isTraceableFunction)(func)) {\n        throw new Error(\"RunnableLambda requires a function that is not wrapped in traceable higher-order function. This shouldn't happen.\");\n    }\n}\n/**\n * A runnable that wraps an arbitrary function that takes a single argument.\n * @example\n * ```typescript\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const add = (input: { x: number; y: number }) => input.x + input.y;\n *\n * const multiply = (input: { value: number; multiplier: number }) =>\n *   input.value * input.multiplier;\n *\n * // Create runnables for the functions\n * const addLambda = RunnableLambda.from(add);\n * const multiplyLambda = RunnableLambda.from(multiply);\n *\n * // Chain the lambdas for a mathematical operation\n * const chainedLambda = addLambda.pipe((result) =>\n *   multiplyLambda.invoke({ value: result, multiplier: 2 })\n * );\n *\n * // Example invocation of the chainedLambda\n * const result = await chainedLambda.invoke({ x: 2, y: 3 });\n *\n * // Will log \"10\" (since (2 + 3) * 2 = 10)\n * ```\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        if ((0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.isTraceableFunction)(fields.func)) {\n            // eslint-disable-next-line no-constructor-return\n            return RunnableTraceable.from(fields.func);\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        assertNonTraceableFunction(fields.func);\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject)=>{\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RECURSION_LIMIT) - 1\n            });\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.pickRunnableConfigKeys)(childConfig), async ()=>{\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RECURSION_LIMIT) - 1\n                        });\n                    } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isAsyncIterable)(output)) {\n                        let finalOutput;\n                        for await (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeAsyncIterableInContext)(childConfig, output)){\n                            config?.signal?.throwIfAborted();\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                // Make a best effort to gather, for any type that supports concat.\n                                try {\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = chunk;\n                                }\n                            }\n                        }\n                        output = finalOutput;\n                    } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isIterableIterator)(output)) {\n                        let finalOutput;\n                        for (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeIteratorInContext)(childConfig, output)){\n                            config?.signal?.throwIfAborted();\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                // Make a best effort to gather, for any type that supports concat.\n                                try {\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = chunk;\n                                }\n                            }\n                        }\n                        output = finalOutput;\n                    }\n                    resolve(output);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke.bind(this), input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalChunk, chunk);\n                } catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks: runManager?.getChild(),\n            recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RECURSION_LIMIT) - 1\n        });\n        const output = await new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.pickRunnableConfigKeys)(childConfig), async ()=>{\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...childConfig,\n                        config: childConfig\n                    });\n                    resolve(res);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, childConfig);\n            for await (const chunk of stream){\n                yield chunk;\n            }\n        } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isAsyncIterable)(output)) {\n            for await (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeAsyncIterableInContext)(childConfig, output)){\n                config?.signal?.throwIfAborted();\n                yield chunk;\n            }\n        } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isIterableIterator)(output)) {\n            for (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeIteratorInContext)(childConfig, output)){\n                config?.signal?.throwIfAborted();\n                yield chunk;\n            }\n        } else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const addYears = (age: number): number => age + 5;\n * const yearsToFifty = (age: number): number => 50 - age;\n * const yearsToHundred = (age: number): number => 100 - age;\n *\n * const addYearsLambda = RunnableLambda.from(addYears);\n * const milestoneFiftyLambda = RunnableLambda.from(yearsToFifty);\n * const milestoneHundredLambda = RunnableLambda.from(yearsToHundred);\n *\n * // Pipe will coerce objects into RunnableParallel by default, but we\n * // explicitly instantiate one here to demonstrate\n * const sequence = addYearsLambda.pipe(\n *   RunnableParallel.from({\n *     years_to_fifty: milestoneFiftyLambda,\n *     years_to_hundred: milestoneHundredLambda,\n *   })\n * );\n *\n * // Invoke the sequence with a single age input\n * const res = await sequence.invoke(25);\n *\n * // { years_to_fifty: 20, years_to_hundred: 70 }\n * ```\n */ class RunnableParallel extends RunnableMap {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n * External APIs (e.g., APIs for a language model) may at times experience\n * degraded performance or even downtime.\n *\n * In these cases, it can be useful to have a fallback Runnable that can be\n * used in place of the original Runnable (e.g., fallback to another LLM provider).\n *\n * Fallbacks can be defined at the level of a single Runnable, or at the level\n * of a chain of Runnables. Fallbacks are tried in order until one succeeds or\n * all fail.\n *\n * While you can instantiate a `RunnableWithFallbacks` directly, it is usually\n * more convenient to use the `withFallbacks` method on an existing Runnable.\n *\n * When streaming, fallbacks will only be called on failures during the initial\n * stream creation. Errors that occur after a stream starts will not fallback\n * to the next Runnable.\n *\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableWithFallbacks,\n * } from \"@langchain/core/runnables\";\n *\n * const primaryOperation = (input: string): string => {\n *   if (input !== \"safe\") {\n *     throw new Error(\"Primary operation failed due to unsafe input\");\n *   }\n *   return `Processed: ${input}`;\n * };\n *\n * // Define a fallback operation that processes the input differently\n * const fallbackOperation = (input: string): string =>\n *   `Fallback processed: ${input}`;\n *\n * const primaryRunnable = RunnableLambda.from(primaryOperation);\n * const fallbackRunnable = RunnableLambda.from(fallbackOperation);\n *\n * // Apply the fallback logic using the .withFallbacks() method\n * const runnableWithFallback = primaryRunnable.withFallbacks([fallbackRunnable]);\n *\n * // Alternatively, create a RunnableWithFallbacks instance manually\n * const manualFallbackChain = new RunnableWithFallbacks({\n *   runnable: primaryRunnable,\n *   fallbacks: [fallbackRunnable],\n * });\n *\n * // Example invocation using .withFallbacks()\n * const res = await runnableWithFallback\n *   .invoke(\"unsafe input\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Fallback processed: unsafe input\"\n *\n * // Example invocation using manual instantiation\n * const res = await manualFallbackChain\n *   .invoke(\"safe\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Processed: safe\"\n * ```\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const { runId, ...otherConfigFields } = config;\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherConfigFields?.runName);\n        const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherConfigFields, {\n            callbacks: runManager?.getChild()\n        });\n        const res = await _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__.AsyncLocalStorageProviderSingleton.runWithConfig(childConfig, async ()=>{\n            let firstError;\n            for (const runnable of this.runnables()){\n                config?.signal?.throwIfAborted();\n                try {\n                    const output = await runnable.invoke(input, childConfig);\n                    await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                    return output;\n                } catch (e) {\n                    if (firstError === undefined) {\n                        firstError = e;\n                    }\n                }\n            }\n            if (firstError === undefined) {\n                throw new Error(\"No error stored at end of fallback.\");\n            }\n            await runManager?.handleChainError(firstError);\n            throw firstError;\n        });\n        return res;\n    }\n    async *_streamIterator(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const { runId, ...otherConfigFields } = config;\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherConfigFields?.runName);\n        let firstError;\n        let stream;\n        for (const runnable of this.runnables()){\n            config?.signal?.throwIfAborted();\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherConfigFields, {\n                callbacks: runManager?.getChild()\n            });\n            try {\n                const originalStream = await runnable.stream(input, childConfig);\n                stream = (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeAsyncIterableInContext)(childConfig, originalStream);\n                break;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (stream === undefined) {\n            const error = firstError ?? new Error(\"No error stored at end of fallback.\");\n            await runManager?.handleChainError(error);\n            throw error;\n        }\n        let output;\n        try {\n            for await (const chunk of stream){\n                yield chunk;\n                try {\n                    output = output === undefined ? output : (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(output, chunk);\n                } catch (e) {\n                    output = undefined;\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config)));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            configList[0].signal?.throwIfAborted();\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(configList[j], {\n                        callbacks: runManager?.getChild()\n                    })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * @example\n * ```typescript\n * import {\n *   RunnableAssign,\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const calculateAge = (x: { birthYear: number }): { age: number } => {\n *   const currentYear = new Date().getFullYear();\n *   return { age: currentYear - x.birthYear };\n * };\n *\n * const createGreeting = (x: { name: string }): { greeting: string } => {\n *   return { greeting: `Hello, ${x.name}!` };\n * };\n *\n * const mapper = RunnableParallel.from({\n *   age_step: RunnableLambda.from(calculateAge),\n *   greeting_step: RunnableLambda.from(createGreeting),\n * });\n *\n * const runnableAssign = new RunnableAssign({ mapper });\n *\n * const res = await runnableAssign.invoke({ name: \"Alice\", birthYear: 1990 });\n *\n * // { name: \"Alice\", birthYear: 1990, age_step: { age: 34 }, greeting_step: { greeting: \"Hello, Alice!\" } }\n * ```\n */ class RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                mapper: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(options, {\n            callbacks: runManager?.getChild()\n        }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough){\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key])=>!mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput){\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * Useful for streaming, can be automatically created and chained by calling `runnable.pick();`.\n * @example\n * ```typescript\n * import { RunnablePick } from \"@langchain/core/runnables\";\n *\n * const inputData = {\n *   name: \"John\",\n *   age: 30,\n *   city: \"New York\",\n *   country: \"USA\",\n *   email: \"john.doe@example.com\",\n *   phone: \"+1234567890\",\n * };\n *\n * const basicInfoRunnable = new RunnablePick([\"name\", \"city\"]);\n *\n * // Example invocation\n * const res = await basicInfoRunnable.invoke(inputData);\n *\n * // { name: 'John', city: 'New York' }\n * ```\n */ class RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                keys: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        } else {\n            const picked = this.keys.map((key)=>[\n                    key,\n                    input[key]\n                ]).filter((v)=>v[1] !== undefined);\n            return picked.length === 0 ? undefined : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator){\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nclass RunnableToolLike extends RunnableBinding {\n    constructor(fields){\n        const sequence = RunnableSequence.from([\n            RunnableLambda.from(async (input)=>{\n                let toolInput;\n                if ((0,_tools_utils_js__WEBPACK_IMPORTED_MODULE_15__._isToolCall)(input)) {\n                    try {\n                        toolInput = await (0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_16__.interopParseAsync)(this.schema, input.args);\n                    } catch (e) {\n                        throw new _tools_utils_js__WEBPACK_IMPORTED_MODULE_15__.ToolInputParsingException(`Received tool input did not match expected schema`, JSON.stringify(input.args));\n                    }\n                } else {\n                    toolInput = input;\n                }\n                return toolInput;\n            }).withConfig({\n                runName: `${fields.name}:parse_input`\n            }),\n            fields.bound\n        ]).withConfig({\n            runName: fields.name\n        });\n        super({\n            bound: sequence,\n            config: fields.config ?? {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.schema = fields.schema;\n    }\n    static lc_name() {\n        return \"RunnableToolLike\";\n    }\n}\n/**\n * Given a runnable and a Zod schema, convert the runnable to a tool.\n *\n * @template RunInput The input type for the runnable.\n * @template RunOutput The output type for the runnable.\n *\n * @param {Runnable<RunInput, RunOutput>} runnable The runnable to convert to a tool.\n * @param fields\n * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n * @param {InteropZodType<RunInput>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n * @returns {RunnableToolLike<InteropZodType<RunInput>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n */ function convertRunnableToTool(runnable, fields) {\n    const name = fields.name ?? runnable.getName();\n    const description = fields.description ?? (0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_16__.getSchemaDescription)(fields.schema);\n    if ((0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_16__.isSimpleStringZodSchema)(fields.schema)) {\n        return new RunnableToolLike({\n            name,\n            description,\n            schema: zod_v3__WEBPACK_IMPORTED_MODULE_17__.object({\n                input: zod_v3__WEBPACK_IMPORTED_MODULE_17__.string()\n            }).transform((input)=>input.input),\n            bound: runnable\n        });\n    }\n    return new RunnableToolLike({\n        name,\n        description,\n        schema: fields.schema,\n        bound: runnable\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/branch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableBranch: () => (/* binding */ RunnableBranch)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n\n\n\n/**\n * Class that represents a runnable branch. The RunnableBranch is\n * initialized with an array of branches and a default branch. When invoked,\n * it evaluates the condition of each branch in order and executes the\n * corresponding branch if the condition is true. If none of the conditions\n * are true, it executes the default branch.\n * @example\n * ```typescript\n * const branch = RunnableBranch.from([\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"anthropic\"),\n *     anthropicChain,\n *   ],\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"langchain\"),\n *     langChainChain,\n *   ],\n *   generalChain,\n * ]);\n *\n * const fullChain = RunnableSequence.from([\n *   {\n *     topic: classificationChain,\n *     question: (input: { question: string }) => input.question,\n *   },\n *   branch,\n * ]);\n *\n * const result = await fullChain.invoke({\n *   question: \"how do I use LangChain?\",\n * });\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnableBranch extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RunnableBranch\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"default\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"branches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.branches = fields.branches;\n        this.default = fields.default;\n    }\n    /**\n     * Convenience method for instantiating a RunnableBranch from\n     * RunnableLikes (objects, functions, or Runnables).\n     *\n     * Each item in the input except for the last one should be a\n     * tuple with two items. The first is a \"condition\" RunnableLike that\n     * returns \"true\" if the second RunnableLike in the tuple should run.\n     *\n     * The final item in the input should be a RunnableLike that acts as a\n     * default branch if no other branches match.\n     *\n     * @example\n     * ```ts\n     * import { RunnableBranch } from \"@langchain/core/runnables\";\n     *\n     * const branch = RunnableBranch.from([\n     *   [(x: number) => x > 0, (x: number) => x + 1],\n     *   [(x: number) => x < 0, (x: number) => x - 1],\n     *   (x: number) => x\n     * ]);\n     * ```\n     * @param branches An array where the every item except the last is a tuple of [condition, runnable]\n     *   pairs. The last item is a default runnable which is invoked if no other condition matches.\n     * @returns A new RunnableBranch.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(branches) {\n        if (branches.length < 1) {\n            throw new Error(\"RunnableBranch requires at least one branch\");\n        }\n        const branchLikes = branches.slice(0, -1);\n        const coercedBranches = branchLikes.map(([condition, runnable])=>[\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(condition),\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(runnable)\n            ]);\n        const defaultBranch = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(branches[branches.length - 1]);\n        return new this({\n            branches: coercedBranches,\n            default: defaultBranch\n        });\n    }\n    async _invoke(input, config, runManager) {\n        let result;\n        for(let i = 0; i < this.branches.length; i += 1){\n            const [condition, branchRunnable] = this.branches[i];\n            const conditionValue = await condition.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`condition:${i + 1}`)\n            }));\n            if (conditionValue) {\n                result = await branchRunnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`branch:${i + 1}`)\n                }));\n                break;\n            }\n        }\n        if (!result) {\n            result = await this.default.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                callbacks: runManager?.getChild(\"branch:default\")\n            }));\n        }\n        return result;\n    }\n    async invoke(input, config = {}) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async *_streamIterator(input, config) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToDict)(input, \"input\"), config?.runId, undefined, undefined, undefined, config?.runName);\n        let finalOutput;\n        let finalOutputSupported = true;\n        let stream;\n        try {\n            for(let i = 0; i < this.branches.length; i += 1){\n                const [condition, branchRunnable] = this.branches[i];\n                const conditionValue = await condition.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`condition:${i + 1}`)\n                }));\n                if (conditionValue) {\n                    stream = await branchRunnable.stream(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                        callbacks: runManager?.getChild(`branch:${i + 1}`)\n                    }));\n                    for await (const chunk of stream){\n                        yield chunk;\n                        if (finalOutputSupported) {\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                try {\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = undefined;\n                                    finalOutputSupported = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (stream === undefined) {\n                stream = await this.default.stream(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(\"branch:default\")\n                }));\n                for await (const chunk of stream){\n                    yield chunk;\n                    if (finalOutputSupported) {\n                        if (finalOutput === undefined) {\n                            finalOutput = chunk;\n                        } else {\n                            try {\n                                finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.concat)(finalOutput, chunk);\n                            } catch (e) {\n                                finalOutput = undefined;\n                                finalOutputSupported = false;\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/config.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RECURSION_LIMIT: () => (/* binding */ DEFAULT_RECURSION_LIMIT),\n/* harmony export */   ensureConfig: () => (/* binding */ ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* binding */ getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   patchConfig: () => (/* binding */ patchConfig),\n/* harmony export */   pickRunnableConfigKeys: () => (/* binding */ pickRunnableConfigKeys)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n\n\nconst DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // We do not want to call ensureConfig on the empty state here as this may cause\n    // double loading of callbacks if async local storage is being used.\n    const copy = {};\n    for (const options of configs.filter((c)=>!!c)){\n        for (const key of Object.keys(options)){\n            if (key === \"metadata\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"tags\") {\n                const baseKeys = copy[key] ?? [];\n                copy[key] = [\n                    ...new Set(baseKeys.concat(options[key] ?? []))\n                ];\n            } else if (key === \"configurable\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"timeout\") {\n                if (copy.timeout === undefined) {\n                    copy.timeout = options.timeout;\n                } else if (options.timeout !== undefined) {\n                    copy.timeout = Math.min(copy.timeout, options.timeout);\n                }\n            } else if (key === \"signal\") {\n                if (copy.signal === undefined) {\n                    copy.signal = options.signal;\n                } else if (options.signal !== undefined) {\n                    if (\"any\" in AbortSignal) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        copy.signal = AbortSignal.any([\n                            copy.signal,\n                            options.signal\n                        ]);\n                    } else {\n                        copy.signal = options.signal;\n                    }\n                }\n            } else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    } else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                } else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    } else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata\n                            }\n                        });\n                    }\n                }\n            } else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\n    \"string\",\n    \"number\",\n    \"boolean\"\n]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n */ function ensureConfig(config) {\n    const implicitConfig = _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.getRunnableConfig();\n    let empty = {\n        tags: [],\n        metadata: {},\n        recursionLimit: 25,\n        runId: undefined\n    };\n    if (implicitConfig) {\n        // Don't allow runId and runName to be loaded implicitly, as this can cause\n        // child runs to improperly inherit their parents' run ids.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { runId, runName, ...rest } = implicitConfig;\n        empty = Object.entries(rest).reduce(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (currentConfig, [key, value])=>{\n            if (value !== undefined) {\n                // eslint-disable-next-line no-param-reassign\n                currentConfig[key] = value;\n            }\n            return currentConfig;\n        }, empty);\n    }\n    if (config) {\n        empty = Object.entries(config).reduce(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (currentConfig, [key, value])=>{\n            if (value !== undefined) {\n                // eslint-disable-next-line no-param-reassign\n                currentConfig[key] = value;\n            }\n            return currentConfig;\n        }, empty);\n    }\n    if (empty?.configurable) {\n        for (const key of Object.keys(empty.configurable)){\n            if (PRIMITIVES.has(typeof empty.configurable[key]) && !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = empty.configurable[key];\n            }\n        }\n    }\n    if (empty.timeout !== undefined) {\n        if (empty.timeout <= 0) {\n            throw new Error(\"Timeout must be a positive number\");\n        }\n        const timeoutSignal = AbortSignal.timeout(empty.timeout);\n        if (empty.signal !== undefined) {\n            if (\"any\" in AbortSignal) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                empty.signal = AbortSignal.any([\n                    empty.signal,\n                    timeoutSignal\n                ]);\n            }\n        } else {\n            empty.signal = timeoutSignal;\n        }\n        delete empty.timeout;\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */ function patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable, runId } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */ delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = {\n            ...newConfig.configurable,\n            ...configurable\n        };\n    }\n    if (runId !== undefined) {\n        delete newConfig.runId;\n    }\n    return newConfig;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction pickRunnableConfigKeys(config) {\n    return config ? {\n        configurable: config.configurable,\n        recursionLimit: config.recursionLimit,\n        callbacks: config.callbacks,\n        tags: config.tags,\n        metadata: config.metadata,\n        maxConcurrency: config.maxConcurrency,\n        timeout: config.timeout,\n        signal: config.signal\n    } : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graph: () => (/* binding */ Graph)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _graph_mermaid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graph_mermaid.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.js\");\n/* harmony import */ var _utils_json_schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/json_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n\n\n\nfunction nodeDataStr(id, data) {\n    if (id !== undefined && !(0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(id)) {\n        return id;\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRunnableInterface)(data)) {\n        try {\n            let dataStr = data.getName();\n            dataStr = dataStr.startsWith(\"Runnable\") ? dataStr.slice(\"Runnable\".length) : dataStr;\n            return dataStr;\n        } catch (error) {\n            return data.getName();\n        }\n    } else {\n        return data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data implements Runnable\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRunnableInterface)(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName()\n            }\n        };\n    } else {\n        return {\n            type: \"schema\",\n            data: {\n                ...(0,_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)(node.data.schema),\n                title: node.data.name\n            }\n        };\n    }\n}\nclass Graph {\n    constructor(params){\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.nodes = params?.nodes ?? this.nodes;\n        this.edges = params?.edges ?? this.edges;\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i)=>{\n            stableNodeIds[node.id] = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node)=>({\n                    id: stableNodeIds[node.id],\n                    ...nodeDataJson(node)\n                })),\n            edges: this.edges.map((edge)=>{\n                const item = {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target]\n                };\n                if (typeof edge.data !== \"undefined\") {\n                    item.data = edge.data;\n                }\n                if (typeof edge.conditional !== \"undefined\") {\n                    item.conditional = edge.conditional;\n                }\n                return item;\n            })\n        };\n    }\n    addNode(data, id, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadata) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id ?? (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n        const node = {\n            id: nodeId,\n            data,\n            name: nodeDataStr(id, data),\n            metadata\n        };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge)=>edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data, conditional) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = {\n            source: source.id,\n            target: target.id,\n            data,\n            conditional\n        };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        return _firstNode(this);\n    }\n    lastNode() {\n        return _lastNode(this);\n    }\n    /**\n     * Add all nodes and edges from another graph.\n     * Note this doesn't check for duplicates, nor does it connect the graphs.\n     */ extend(graph, prefix = \"\") {\n        let finalPrefix = prefix;\n        const nodeIds = Object.values(graph.nodes).map((node)=>node.id);\n        if (nodeIds.every(uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])) {\n            finalPrefix = \"\";\n        }\n        const prefixed = (id)=>{\n            return finalPrefix ? `${finalPrefix}:${id}` : id;\n        };\n        Object.entries(graph.nodes).forEach(([key, value])=>{\n            this.nodes[prefixed(key)] = {\n                ...value,\n                id: prefixed(key)\n            };\n        });\n        const newEdges = graph.edges.map((edge)=>{\n            return {\n                ...edge,\n                source: prefixed(edge.source),\n                target: prefixed(edge.target)\n            };\n        });\n        // Add all edges from the other graph\n        this.edges = [\n            ...this.edges,\n            ...newEdges\n        ];\n        const first = graph.firstNode();\n        const last = graph.lastNode();\n        return [\n            first ? {\n                id: prefixed(first.id),\n                data: first.data\n            } : undefined,\n            last ? {\n                id: prefixed(last.id),\n                data: last.data\n            } : undefined\n        ];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode && _firstNode(this, [\n            firstNode.id\n        ])) {\n            this.removeNode(firstNode);\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode && _lastNode(this, [\n            lastNode.id\n        ])) {\n            this.removeNode(lastNode);\n        }\n    }\n    /**\n     * Return a new graph with all nodes re-identified,\n     * using their unique, readable names where possible.\n     */ reid() {\n        const nodeLabels = Object.fromEntries(Object.values(this.nodes).map((node)=>[\n                node.id,\n                node.name\n            ]));\n        const nodeLabelCounts = new Map();\n        Object.values(nodeLabels).forEach((label)=>{\n            nodeLabelCounts.set(label, (nodeLabelCounts.get(label) || 0) + 1);\n        });\n        const getNodeId = (nodeId)=>{\n            const label = nodeLabels[nodeId];\n            if ((0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(nodeId) && nodeLabelCounts.get(label) === 1) {\n                return label;\n            } else {\n                return nodeId;\n            }\n        };\n        return new Graph({\n            nodes: Object.fromEntries(Object.entries(this.nodes).map(([id, node])=>[\n                    getNodeId(id),\n                    {\n                        ...node,\n                        id: getNodeId(id)\n                    }\n                ])),\n            edges: this.edges.map((edge)=>({\n                    ...edge,\n                    source: getNodeId(edge.source),\n                    target: getNodeId(edge.target)\n                }))\n        });\n    }\n    drawMermaid(params) {\n        const { withStyles, curveStyle, nodeColors = {\n            default: \"fill:#f2f0ff,line-height:1.2\",\n            first: \"fill-opacity:0\",\n            last: \"fill:#bfb6fc\"\n        }, wrapLabelNWords } = params ?? {};\n        const graph = this.reid();\n        const firstNode = graph.firstNode();\n        const lastNode = graph.lastNode();\n        return (0,_graph_mermaid_js__WEBPACK_IMPORTED_MODULE_1__.drawMermaid)(graph.nodes, graph.edges, {\n            firstNode: firstNode?.id,\n            lastNode: lastNode?.id,\n            withStyles,\n            curveStyle,\n            nodeColors,\n            wrapLabelNWords\n        });\n    }\n    async drawMermaidPng(params) {\n        const mermaidSyntax = this.drawMermaid(params);\n        return (0,_graph_mermaid_js__WEBPACK_IMPORTED_MODULE_1__.drawMermaidPng)(mermaidSyntax, {\n            backgroundColor: params?.backgroundColor\n        });\n    }\n}\n/**\n * Find the single node that is not a target of any edge.\n * Exclude nodes/sources with ids in the exclude list.\n * If there is no such node, or there are multiple, return undefined.\n * When drawing the graph, this node would be the origin.\n */ function _firstNode(graph, exclude = []) {\n    const targets = new Set(graph.edges.filter((edge)=>!exclude.includes(edge.source)).map((edge)=>edge.target));\n    const found = [];\n    for (const node of Object.values(graph.nodes)){\n        if (!exclude.includes(node.id) && !targets.has(node.id)) {\n            found.push(node);\n        }\n    }\n    return found.length === 1 ? found[0] : undefined;\n}\n/**\n * Find the single node that is not a source of any edge.\n * Exclude nodes/targets with ids in the exclude list.\n * If there is no such node, or there are multiple, return undefined.\n * When drawing the graph, this node would be the destination.\n */ function _lastNode(graph, exclude = []) {\n    const sources = new Set(graph.edges.filter((edge)=>!exclude.includes(edge.target)).map((edge)=>edge.source));\n    const found = [];\n    for (const node of Object.values(graph.nodes)){\n        if (!exclude.includes(node.id) && !sources.has(node.id)) {\n            found.push(node);\n        }\n    }\n    return found.length === 1 ? found[0] : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph_mermaid.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawMermaid: () => (/* binding */ drawMermaid),\n/* harmony export */   drawMermaidPng: () => (/* binding */ drawMermaidPng)\n/* harmony export */ });\nfunction _escapeNodeLabel(nodeLabel) {\n    // Escapes the node label for Mermaid syntax.\n    return nodeLabel.replace(/[^a-zA-Z-_0-9]/g, \"_\");\n}\nconst MARKDOWN_SPECIAL_CHARS = [\n    \"*\",\n    \"_\",\n    \"`\"\n];\nfunction _generateMermaidGraphStyles(nodeColors) {\n    let styles = \"\";\n    for (const [className, color] of Object.entries(nodeColors)){\n        styles += `\\tclassDef ${className} ${color};\\n`;\n    }\n    return styles;\n}\n/**\n * Draws a Mermaid graph using the provided graph data\n */ function drawMermaid(nodes, edges, config) {\n    const { firstNode, lastNode, nodeColors, withStyles = true, curveStyle = \"linear\", wrapLabelNWords = 9 } = config ?? {};\n    // Initialize Mermaid graph configuration\n    let mermaidGraph = withStyles ? `%%{init: {'flowchart': {'curve': '${curveStyle}'}}}%%\\ngraph TD;\\n` : \"graph TD;\\n\";\n    if (withStyles) {\n        // Node formatting templates\n        const defaultClassLabel = \"default\";\n        const formatDict = {\n            [defaultClassLabel]: \"{0}({1})\"\n        };\n        if (firstNode !== undefined) {\n            formatDict[firstNode] = \"{0}([{1}]):::first\";\n        }\n        if (lastNode !== undefined) {\n            formatDict[lastNode] = \"{0}([{1}]):::last\";\n        }\n        // Add nodes to the graph\n        for (const [key, node] of Object.entries(nodes)){\n            const nodeName = node.name.split(\":\").pop() ?? \"\";\n            const label = MARKDOWN_SPECIAL_CHARS.some((char)=>nodeName.startsWith(char) && nodeName.endsWith(char)) ? `<p>${nodeName}</p>` : nodeName;\n            let finalLabel = label;\n            if (Object.keys(node.metadata ?? {}).length) {\n                finalLabel += `<hr/><small><em>${Object.entries(node.metadata ?? {}).map(([k, v])=>`${k} = ${v}`).join(\"\\n\")}</em></small>`;\n            }\n            const nodeLabel = (formatDict[key] ?? formatDict[defaultClassLabel]).replace(\"{0}\", _escapeNodeLabel(key)).replace(\"{1}\", finalLabel);\n            mermaidGraph += `\\t${nodeLabel}\\n`;\n        }\n    }\n    // Group edges by their common prefixes\n    const edgeGroups = {};\n    for (const edge of edges){\n        const srcParts = edge.source.split(\":\");\n        const tgtParts = edge.target.split(\":\");\n        const commonPrefix = srcParts.filter((src, i)=>src === tgtParts[i]).join(\":\");\n        if (!edgeGroups[commonPrefix]) {\n            edgeGroups[commonPrefix] = [];\n        }\n        edgeGroups[commonPrefix].push(edge);\n    }\n    const seenSubgraphs = new Set();\n    function addSubgraph(edges, prefix) {\n        const selfLoop = edges.length === 1 && edges[0].source === edges[0].target;\n        if (prefix && !selfLoop) {\n            const subgraph = prefix.split(\":\").pop();\n            if (seenSubgraphs.has(subgraph)) {\n                throw new Error(`Found duplicate subgraph '${subgraph}' -- this likely means that ` + \"you're reusing a subgraph node with the same name. \" + \"Please adjust your graph to have subgraph nodes with unique names.\");\n            }\n            seenSubgraphs.add(subgraph);\n            mermaidGraph += `\\tsubgraph ${subgraph}\\n`;\n        }\n        for (const edge of edges){\n            const { source, target, data, conditional } = edge;\n            let edgeLabel = \"\";\n            if (data !== undefined) {\n                let edgeData = data;\n                const words = edgeData.split(\" \");\n                if (words.length > wrapLabelNWords) {\n                    edgeData = Array.from({\n                        length: Math.ceil(words.length / wrapLabelNWords)\n                    }, (_, i)=>words.slice(i * wrapLabelNWords, (i + 1) * wrapLabelNWords).join(\" \")).join(\"&nbsp;<br>&nbsp;\");\n                }\n                edgeLabel = conditional ? ` -. &nbsp;${edgeData}&nbsp; .-> ` : ` -- &nbsp;${edgeData}&nbsp; --> `;\n            } else {\n                edgeLabel = conditional ? \" -.-> \" : \" --> \";\n            }\n            mermaidGraph += `\\t${_escapeNodeLabel(source)}${edgeLabel}${_escapeNodeLabel(target)};\\n`;\n        }\n        // Recursively add nested subgraphs\n        for(const nestedPrefix in edgeGroups){\n            if (nestedPrefix.startsWith(`${prefix}:`) && nestedPrefix !== prefix) {\n                addSubgraph(edgeGroups[nestedPrefix], nestedPrefix);\n            }\n        }\n        if (prefix && !selfLoop) {\n            mermaidGraph += \"\tend\\n\";\n        }\n    }\n    // Start with the top-level edges (no common prefix)\n    addSubgraph(edgeGroups[\"\"] ?? [], \"\");\n    // Add remaining subgraphs\n    for(const prefix in edgeGroups){\n        if (!prefix.includes(\":\") && prefix !== \"\") {\n            addSubgraph(edgeGroups[prefix], prefix);\n        }\n    }\n    // Add custom styles for nodes\n    if (withStyles) {\n        mermaidGraph += _generateMermaidGraphStyles(nodeColors ?? {});\n    }\n    return mermaidGraph;\n}\n/**\n * Renders Mermaid graph using the Mermaid.INK API.\n */ async function drawMermaidPng(mermaidSyntax, config) {\n    let { backgroundColor = \"white\" } = config ?? {};\n    // Use btoa for compatibility, assume ASCII\n    const mermaidSyntaxEncoded = btoa(mermaidSyntax);\n    // Check if the background color is a hexadecimal color code using regex\n    if (backgroundColor !== undefined) {\n        const hexColorPattern = /^#(?:[0-9a-fA-F]{3}){1,2}$/;\n        if (!hexColorPattern.test(backgroundColor)) {\n            backgroundColor = `!${backgroundColor}`;\n        }\n    }\n    const imageUrl = `https://mermaid.ink/img/${mermaidSyntaxEncoded}?bgColor=${backgroundColor}`;\n    const res = await fetch(imageUrl);\n    if (!res.ok) {\n        throw new Error([\n            `Failed to render the graph using the Mermaid.INK API.`,\n            `Status code: ${res.status}`,\n            `Status text: ${res.statusText}`\n        ].join(\"\\n\"));\n    }\n    const content = await res.blob();\n    return content;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/history.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/history.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableWithMessageHistory: () => (/* binding */ RunnableWithMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n\n\n\n/**\n * Wraps a LCEL chain and manages history. It appends input messages\n * and chain outputs as history, and adds the current history messages to\n * the chain input.\n * @example\n * ```typescript\n * // yarn add @langchain/anthropic @langchain/community @upstash/redis\n *\n * import {\n *   ChatPromptTemplate,\n *   MessagesPlaceholder,\n * } from \"@langchain/core/prompts\";\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n * import { UpstashRedisChatMessageHistory } from \"@langchain/community/stores/message/upstash_redis\";\n * // For demos, you can also use an in-memory store:\n * // import { ChatMessageHistory } from \"langchain/stores/message/in_memory\";\n *\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", \"You're an assistant who's good at {ability}\"],\n *   new MessagesPlaceholder(\"history\"),\n *   [\"human\", \"{question}\"],\n * ]);\n *\n * const chain = prompt.pipe(new ChatAnthropic({}));\n *\n * const chainWithHistory = new RunnableWithMessageHistory({\n *   runnable: chain,\n *   getMessageHistory: (sessionId) =>\n *     new UpstashRedisChatMessageHistory({\n *       sessionId,\n *       config: {\n *         url: process.env.UPSTASH_REDIS_REST_URL!,\n *         token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n *       },\n *     }),\n *   inputMessagesKey: \"question\",\n *   historyMessagesKey: \"history\",\n * });\n *\n * const result = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What does cosine mean?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n *\n * const result2 = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What's its inverse?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n * ```\n */ class RunnableWithMessageHistory extends _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableBinding {\n    constructor(fields){\n        let historyChain = _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableLambda.from((input, options)=>this._enterHistory(input, options ?? {})).withConfig({\n            runName: \"loadHistory\"\n        });\n        const messagesKey = fields.historyMessagesKey ?? fields.inputMessagesKey;\n        if (messagesKey) {\n            historyChain = _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough.assign({\n                [messagesKey]: historyChain\n            }).withConfig({\n                runName: \"insertHistory\"\n            });\n        }\n        const bound = historyChain.pipe(fields.runnable.withListeners({\n            onEnd: (run, config)=>this._exitHistory(run, config ?? {})\n        })).withConfig({\n            runName: \"RunnableWithMessageHistory\"\n        });\n        const config = fields.config ?? {};\n        super({\n            ...fields,\n            config,\n            bound\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"historyMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getMessageHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.getMessageHistory = fields.getMessageHistory;\n        this.inputMessagesKey = fields.inputMessagesKey;\n        this.outputMessagesKey = fields.outputMessagesKey;\n        this.historyMessagesKey = fields.historyMessagesKey;\n    }\n    _getInputMessages(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputValue) {\n        let parsedInputValue;\n        if (typeof inputValue === \"object\" && !Array.isArray(inputValue) && !(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(inputValue)) {\n            let key;\n            if (this.inputMessagesKey) {\n                key = this.inputMessagesKey;\n            } else if (Object.keys(inputValue).length === 1) {\n                key = Object.keys(inputValue)[0];\n            } else {\n                key = \"input\";\n            }\n            if (Array.isArray(inputValue[key]) && Array.isArray(inputValue[key][0])) {\n                parsedInputValue = inputValue[key][0];\n            } else {\n                parsedInputValue = inputValue[key];\n            }\n        } else {\n            parsedInputValue = inputValue;\n        }\n        if (typeof parsedInputValue === \"string\") {\n            return [\n                new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(parsedInputValue)\n            ];\n        } else if (Array.isArray(parsedInputValue)) {\n            return parsedInputValue;\n        } else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(parsedInputValue)) {\n            return [\n                parsedInputValue\n            ];\n        } else {\n            throw new Error(`Expected a string, BaseMessage, or array of BaseMessages.\\nGot ${JSON.stringify(parsedInputValue, null, 2)}`);\n        }\n    }\n    _getOutputMessages(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    outputValue) {\n        let parsedOutputValue;\n        if (!Array.isArray(outputValue) && !(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(outputValue) && typeof outputValue !== \"string\") {\n            let key;\n            if (this.outputMessagesKey !== undefined) {\n                key = this.outputMessagesKey;\n            } else if (Object.keys(outputValue).length === 1) {\n                key = Object.keys(outputValue)[0];\n            } else {\n                key = \"output\";\n            }\n            // If you are wrapping a chat model directly\n            // The output is actually this weird generations object\n            if (outputValue.generations !== undefined) {\n                parsedOutputValue = outputValue.generations[0][0].message;\n            } else {\n                parsedOutputValue = outputValue[key];\n            }\n        } else {\n            parsedOutputValue = outputValue;\n        }\n        if (typeof parsedOutputValue === \"string\") {\n            return [\n                new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(parsedOutputValue)\n            ];\n        } else if (Array.isArray(parsedOutputValue)) {\n            return parsedOutputValue;\n        } else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(parsedOutputValue)) {\n            return [\n                parsedOutputValue\n            ];\n        } else {\n            throw new Error(`Expected a string, BaseMessage, or array of BaseMessages. Received: ${JSON.stringify(parsedOutputValue, null, 2)}`);\n        }\n    }\n    async _enterHistory(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, kwargs) {\n        const history = kwargs?.configurable?.messageHistory;\n        const messages = await history.getMessages();\n        if (this.historyMessagesKey === undefined) {\n            return messages.concat(this._getInputMessages(input));\n        }\n        return messages;\n    }\n    async _exitHistory(run, config) {\n        const history = config.configurable?.messageHistory;\n        // Get input messages\n        let inputs;\n        // Chat model inputs are nested arrays\n        if (Array.isArray(run.inputs) && Array.isArray(run.inputs[0])) {\n            inputs = run.inputs[0];\n        } else {\n            inputs = run.inputs;\n        }\n        let inputMessages = this._getInputMessages(inputs);\n        // If historic messages were prepended to the input messages, remove them to\n        // avoid adding duplicate messages to history.\n        if (this.historyMessagesKey === undefined) {\n            const existingMessages = await history.getMessages();\n            inputMessages = inputMessages.slice(existingMessages.length);\n        }\n        // Get output messages\n        const outputValue = run.outputs;\n        if (!outputValue) {\n            throw new Error(`Output values from 'Run' undefined. Run: ${JSON.stringify(run, null, 2)}`);\n        }\n        const outputMessages = this._getOutputMessages(outputValue);\n        await history.addMessages([\n            ...inputMessages,\n            ...outputMessages\n        ]);\n    }\n    async _mergeConfig(...configs) {\n        const config = await super._mergeConfig(...configs);\n        // Extract sessionId\n        if (!config.configurable || !config.configurable.sessionId) {\n            const exampleInput = {\n                [this.inputMessagesKey ?? \"input\"]: \"foo\"\n            };\n            const exampleConfig = {\n                configurable: {\n                    sessionId: \"123\"\n                }\n            };\n            throw new Error(`sessionId is required. Pass it in as part of the config argument to .invoke() or .stream()\\n` + `eg. chain.invoke(${JSON.stringify(exampleInput)}, ${JSON.stringify(exampleConfig)})`);\n        }\n        // attach messageHistory\n        const { sessionId } = config.configurable;\n        config.configurable.messageHistory = await this.getMessageHistory(sessionId);\n        return config;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/history.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_3__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableAssign: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _branch_js__WEBPACK_IMPORTED_MODULE_4__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough),\n/* harmony export */   RunnablePick: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableToolLike: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableToolLike),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks),\n/* harmony export */   RunnableWithMessageHistory: () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_5__.RunnableWithMessageHistory),\n/* harmony export */   _coerceToRunnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable),\n/* harmony export */   ensureConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.mergeConfigs),\n/* harmony export */   patchConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig),\n/* harmony export */   pickRunnableConfigKeys: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.pickRunnableConfigKeys)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/router.js\");\n/* harmony import */ var _branch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./branch.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js\");\n/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./history.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/history.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK087QUFDbkg7QUFDckU7QUFDVjtBQUNBO0FBQ2MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2luZGV4LmpzPzU1NjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgUnVubmFibGUsIFJ1bm5hYmxlQmluZGluZywgUnVubmFibGVFYWNoLCBSdW5uYWJsZVJldHJ5LCBSdW5uYWJsZVNlcXVlbmNlLCBSdW5uYWJsZU1hcCwgUnVubmFibGVQYXJhbGxlbCwgUnVubmFibGVMYW1iZGEsIFJ1bm5hYmxlV2l0aEZhbGxiYWNrcywgUnVubmFibGVBc3NpZ24sIFJ1bm5hYmxlUGljaywgX2NvZXJjZVRvUnVubmFibGUsIFJ1bm5hYmxlVG9vbExpa2UsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IHsgZ2V0Q2FsbGJhY2tNYW5hZ2VyRm9yQ29uZmlnLCBwYXRjaENvbmZpZywgZW5zdXJlQ29uZmlnLCBtZXJnZUNvbmZpZ3MsIHBpY2tSdW5uYWJsZUNvbmZpZ0tleXMsIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5leHBvcnQgeyBSdW5uYWJsZVBhc3N0aHJvdWdoIH0gZnJvbSBcIi4vcGFzc3Rocm91Z2guanNcIjtcbmV4cG9ydCB7IFJvdXRlclJ1bm5hYmxlIH0gZnJvbSBcIi4vcm91dGVyLmpzXCI7XG5leHBvcnQgeyBSdW5uYWJsZUJyYW5jaCB9IGZyb20gXCIuL2JyYW5jaC5qc1wiO1xuZXhwb3J0IHsgUnVubmFibGVXaXRoTWVzc2FnZUhpc3RvcnksIH0gZnJvbSBcIi4vaGlzdG9yeS5qc1wiO1xuIl0sIm5hbWVzIjpbIlJ1bm5hYmxlIiwiUnVubmFibGVCaW5kaW5nIiwiUnVubmFibGVFYWNoIiwiUnVubmFibGVSZXRyeSIsIlJ1bm5hYmxlU2VxdWVuY2UiLCJSdW5uYWJsZU1hcCIsIlJ1bm5hYmxlUGFyYWxsZWwiLCJSdW5uYWJsZUxhbWJkYSIsIlJ1bm5hYmxlV2l0aEZhbGxiYWNrcyIsIlJ1bm5hYmxlQXNzaWduIiwiUnVubmFibGVQaWNrIiwiX2NvZXJjZVRvUnVubmFibGUiLCJSdW5uYWJsZVRvb2xMaWtlIiwiZ2V0Q2FsbGJhY2tNYW5hZ2VyRm9yQ29uZmlnIiwicGF0Y2hDb25maWciLCJlbnN1cmVDb25maWciLCJtZXJnZUNvbmZpZ3MiLCJwaWNrUnVubmFibGVDb25maWdLZXlzIiwiUnVubmFibGVQYXNzdGhyb3VnaCIsIlJvdXRlclJ1bm5hYmxlIiwiUnVubmFibGVCcmFuY2giLCJSdW5uYWJsZVdpdGhNZXNzYWdlSGlzdG9yeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/iter.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/iter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consumeAsyncIterableInContext: () => (/* binding */ consumeAsyncIterableInContext),\n/* harmony export */   consumeIteratorInContext: () => (/* binding */ consumeIteratorInContext),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIterableIterator: () => (/* binding */ isIterableIterator),\n/* harmony export */   isIterator: () => (/* binding */ isIterator)\n/* harmony export */ });\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\nfunction isIterableIterator(thing) {\n    return typeof thing === \"object\" && thing !== null && typeof thing[Symbol.iterator] === \"function\" && // avoid detecting array/set as iterator\n    typeof thing.next === \"function\";\n}\nconst isIterator = (x)=>x != null && typeof x === \"object\" && \"next\" in x && typeof x.next === \"function\";\nfunction isAsyncIterable(thing) {\n    return typeof thing === \"object\" && thing !== null && typeof thing[Symbol.asyncIterator] === \"function\";\n}\nfunction* consumeIteratorInContext(context, iter) {\n    while(true){\n        const { value, done } = _singletons_index_js__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_1__.pickRunnableConfigKeys)(context), iter.next.bind(iter), true);\n        if (done) {\n            break;\n        } else {\n            yield value;\n        }\n    }\n}\nasync function* consumeAsyncIterableInContext(context, iter) {\n    const iterator = iter[Symbol.asyncIterator]();\n    while(true){\n        const { value, done } = await _singletons_index_js__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_1__.pickRunnableConfigKeys)(context), iterator.next.bind(iter), true);\n        if (done) {\n            break;\n        } else {\n            yield value;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2l0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0RTtBQUN2QjtBQUM5QyxTQUFTRSxtQkFBbUJDLEtBQUs7SUFDcEMsT0FBUSxPQUFPQSxVQUFVLFlBQ3JCQSxVQUFVLFFBQ1YsT0FBT0EsS0FBSyxDQUFDQyxPQUFPQyxRQUFRLENBQUMsS0FBSyxjQUNsQyx3Q0FBd0M7SUFDeEMsT0FBT0YsTUFBTUcsSUFBSSxLQUFLO0FBQzlCO0FBQ08sTUFBTUMsYUFBYSxDQUFDQyxJQUFNQSxLQUFLLFFBQ2xDLE9BQU9BLE1BQU0sWUFDYixVQUFVQSxLQUNWLE9BQU9BLEVBQUVGLElBQUksS0FBSyxXQUFXO0FBQzFCLFNBQVNHLGdCQUFnQk4sS0FBSztJQUNqQyxPQUFRLE9BQU9BLFVBQVUsWUFDckJBLFVBQVUsUUFDVixPQUFPQSxLQUFLLENBQUNDLE9BQU9NLGFBQWEsQ0FBQyxLQUM5QjtBQUNaO0FBQ08sVUFBVUMseUJBQXlCQyxPQUFPLEVBQUVDLElBQUk7SUFDbkQsTUFBTyxLQUFNO1FBQ1QsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHZixvRkFBa0NBLENBQUNnQixhQUFhLENBQUNmLGtFQUFzQkEsQ0FBQ1csVUFBVUMsS0FBS1AsSUFBSSxDQUFDVyxJQUFJLENBQUNKLE9BQU87UUFDaEksSUFBSUUsTUFBTTtZQUNOO1FBQ0osT0FDSztZQUNELE1BQU1EO1FBQ1Y7SUFDSjtBQUNKO0FBQ08sZ0JBQWdCSSw4QkFBOEJOLE9BQU8sRUFBRUMsSUFBSTtJQUM5RCxNQUFNUixXQUFXUSxJQUFJLENBQUNULE9BQU9NLGFBQWEsQ0FBQztJQUMzQyxNQUFPLEtBQU07UUFDVCxNQUFNLEVBQUVJLEtBQUssRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTWYsb0ZBQWtDQSxDQUFDZ0IsYUFBYSxDQUFDZixrRUFBc0JBLENBQUNXLFVBQVVQLFNBQVNDLElBQUksQ0FBQ1csSUFBSSxDQUFDSixPQUFPO1FBQzFJLElBQUlFLE1BQU07WUFDTjtRQUNKLE9BQ0s7WUFDRCxNQUFNRDtRQUNWO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvaXRlci5qcz9lYTVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24gfSBmcm9tIFwiLi4vc2luZ2xldG9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcGlja1J1bm5hYmxlQ29uZmlnS2V5cyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGVJdGVyYXRvcih0aGluZykge1xuICAgIHJldHVybiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIHRoaW5nICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgLy8gYXZvaWQgZGV0ZWN0aW5nIGFycmF5L3NldCBhcyBpdGVyYXRvclxuICAgICAgICB0eXBlb2YgdGhpbmcubmV4dCA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCBjb25zdCBpc0l0ZXJhdG9yID0gKHgpID0+IHggIT0gbnVsbCAmJlxuICAgIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmXG4gICAgXCJuZXh0XCIgaW4geCAmJlxuICAgIHR5cGVvZiB4Lm5leHQgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUodGhpbmcpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICB0aGluZyAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgdGhpbmdbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID09PVxuICAgICAgICAgICAgXCJmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiogY29uc3VtZUl0ZXJhdG9ySW5Db250ZXh0KGNvbnRleHQsIGl0ZXIpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLnJ1bldpdGhDb25maWcocGlja1J1bm5hYmxlQ29uZmlnS2V5cyhjb250ZXh0KSwgaXRlci5uZXh0LmJpbmQoaXRlciksIHRydWUpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogY29uc3VtZUFzeW5jSXRlcmFibGVJbkNvbnRleHQoY29udGV4dCwgaXRlcikge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gaXRlcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLnJ1bldpdGhDb25maWcocGlja1J1bm5hYmxlQ29uZmlnS2V5cyhjb250ZXh0KSwgaXRlcmF0b3IubmV4dC5iaW5kKGl0ZXIpLCB0cnVlKTtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiIsInBpY2tSdW5uYWJsZUNvbmZpZ0tleXMiLCJpc0l0ZXJhYmxlSXRlcmF0b3IiLCJ0aGluZyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImlzSXRlcmF0b3IiLCJ4IiwiaXNBc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYXRvciIsImNvbnN1bWVJdGVyYXRvckluQ29udGV4dCIsImNvbnRleHQiLCJpdGVyIiwidmFsdWUiLCJkb25lIiwicnVuV2l0aENvbmZpZyIsImJpbmQiLCJjb25zdW1lQXN5bmNJdGVyYWJsZUluQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/iter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/passthrough.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnablePassthrough: () => (/* binding */ RunnablePassthrough)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n\n/**\n * A runnable to passthrough inputs unchanged or with additional keys.\n *\n * This runnable behaves almost like the identity function, except that it\n * can be configured to add additional keys to the output, if the input is\n * an object.\n *\n * The example below demonstrates how to use `RunnablePassthrough to\n * passthrough the input from the `.invoke()`\n *\n * @example\n * ```typescript\n * const chain = RunnableSequence.from([\n *   {\n *     question: new RunnablePassthrough(),\n *     context: async () => loadContextFromStore(),\n *   },\n *   prompt,\n *   llm,\n *   outputParser,\n * ]);\n * const response = await chain.invoke(\n *   \"I can pass a single string instead of an object since I'm using `RunnablePassthrough`.\"\n * );\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnablePassthrough extends _base_js__WEBPACK_IMPORTED_MODULE_1__.Runnable {\n    static lc_name() {\n        return \"RunnablePassthrough\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (fields) {\n            this.func = fields.func;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        if (this.func) {\n            await this.func(input, config);\n        }\n        return this._callWithConfig((input)=>Promise.resolve(input), input, config);\n    }\n    async *transform(generator, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        let finalOutput;\n        let finalOutputSupported = true;\n        for await (const chunk of this._transformStreamWithConfig(generator, (input)=>input, config)){\n            yield chunk;\n            if (finalOutputSupported) {\n                if (finalOutput === undefined) {\n                    finalOutput = chunk;\n                } else {\n                    try {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.concat)(finalOutput, chunk);\n                    } catch  {\n                        finalOutput = undefined;\n                        finalOutputSupported = false;\n                    }\n                }\n            }\n        }\n        if (this.func && finalOutput !== undefined) {\n            await this.func(finalOutput, config);\n        }\n    }\n    /**\n     * A runnable that assigns key-value pairs to the input.\n     *\n     * The example below shows how you could use it with an inline function.\n     *\n     * @example\n     * ```typescript\n     * const prompt =\n     *   PromptTemplate.fromTemplate(`Write a SQL query to answer the question using the following schema: {schema}\n     * Question: {question}\n     * SQL Query:`);\n     *\n     * // The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`\n     * // call (in this example it's the question), along with any inputs passed to the `.assign()` method.\n     * // In this case, we're passing the schema.\n     * const sqlQueryGeneratorChain = RunnableSequence.from([\n     *   RunnablePassthrough.assign({\n     *     schema: async () => db.getTableInfo(),\n     *   }),\n     *   prompt,\n     *   new ChatOpenAI({ model: \"gpt-4o-mini\" }).withConfig({ stop: [\"\\nSQLResult:\"] }),\n     *   new StringOutputParser(),\n     * ]);\n     * const result = await sqlQueryGeneratorChain.invoke({\n     *   question: \"How many employees are there?\",\n     * });\n     * ```\n     */ static assign(mapping) {\n        return new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableAssign(new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableMap({\n            steps: mapping\n        }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/router.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/router.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* binding */ RouterRunnable)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n * @example\n * ```typescript\n * import { RouterRunnable, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const router = new RouterRunnable({\n *   runnables: {\n *     toUpperCase: RunnableLambda.from((text: string) => text.toUpperCase()),\n *     reverseText: RunnableLambda.from((text: string) =>\n *       text.split(\"\").reverse().join(\"\")\n *     ),\n *   },\n * });\n *\n * // Invoke the 'reverseText' runnable\n * const result1 = router.invoke({ key: \"reverseText\", input: \"Hello World\" });\n *\n * // \"dlroW olleH\"\n *\n * // Invoke the 'toUpperCase' runnable\n * const result2 = router.invoke({ key: \"toUpperCase\", input: \"Hello World\" });\n *\n * // \"HELLO WORLD\"\n * ```\n */ class RouterRunnable extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input)=>input.key);\n        const actualInputs = inputs.map((input)=>input.input);\n        const missingKey = keys.find((key)=>this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key)=>this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n        const batchResults = [];\n        for(let i = 0; i < actualInputs.length; i += batchSize){\n            const batchPromises = actualInputs.slice(i, i + batchSize).map((actualInput, i)=>runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _RootEventFilter: () => (/* binding */ _RootEventFilter),\n/* harmony export */   isRunnableInterface: () => (/* binding */ isRunnableInterface)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isRunnableInterface(thing) {\n    return thing ? thing.lc_runnable : false;\n}\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */ class _RootEventFilter {\n    constructor(fields){\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined && this.includeTypes === undefined && this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || eventTags.some((tag)=>this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && eventTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQThEO0FBQ3ZELFNBQVNBLG9CQUFvQkMsS0FBSztJQUNyQyxPQUFPQSxRQUFRQSxNQUFNQyxXQUFXLEdBQUc7QUFDdkM7QUFDQTs7Ozs7O0NBTUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFlBQVksR0FBR1AsT0FBT08sWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1IsT0FBT1EsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1QsT0FBT1MsV0FBVztRQUNyQyxJQUFJLENBQUNDLFlBQVksR0FBR1YsT0FBT1UsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1gsT0FBT1csWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1osT0FBT1ksV0FBVztJQUN6QztJQUNBQyxhQUFhQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUMxQixJQUFJQyxVQUFVLElBQUksQ0FBQ1QsWUFBWSxLQUFLVSxhQUNoQyxJQUFJLENBQUNULFlBQVksS0FBS1MsYUFDdEIsSUFBSSxDQUFDUixXQUFXLEtBQUtRO1FBQ3pCLE1BQU1DLFlBQVlKLE1BQU1LLElBQUksSUFBSSxFQUFFO1FBQ2xDLElBQUksSUFBSSxDQUFDWixZQUFZLEtBQUtVLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDVCxZQUFZLENBQUNhLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUM5RDtRQUNBLElBQUksSUFBSSxDQUFDYixZQUFZLEtBQUtTLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDUixZQUFZLENBQUNZLFFBQVEsQ0FBQ0w7UUFDcEQ7UUFDQSxJQUFJLElBQUksQ0FBQ04sV0FBVyxLQUFLUSxXQUFXO1lBQ2hDRCxVQUNJQSxXQUFXRSxVQUFVSSxJQUFJLENBQUMsQ0FBQ0MsTUFBUSxJQUFJLENBQUNkLFdBQVcsRUFBRVcsU0FBU0c7UUFDdEU7UUFDQSxJQUFJLElBQUksQ0FBQ2IsWUFBWSxLQUFLTyxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLENBQUMsSUFBSSxDQUFDTixZQUFZLENBQUNVLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUMvRDtRQUNBLElBQUksSUFBSSxDQUFDVixZQUFZLEtBQUtNLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNMLFlBQVksQ0FBQ1MsUUFBUSxDQUFDTDtRQUNyRDtRQUNBLElBQUksSUFBSSxDQUFDSCxXQUFXLEtBQUtLLFdBQVc7WUFDaENELFVBQ0lBLFdBQVdFLFVBQVVNLEtBQUssQ0FBQyxDQUFDRCxNQUFRLENBQUMsSUFBSSxDQUFDWCxXQUFXLEVBQUVRLFNBQVNHO1FBQ3hFO1FBQ0EsT0FBT1A7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy91dGlscy5qcz84MWZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZUludGVyZmFjZSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyA/IHRoaW5nLmxjX3J1bm5hYmxlIDogZmFsc2U7XG59XG4vKipcbiAqIFV0aWxpdHkgdG8gZmlsdGVyIHRoZSByb290IGV2ZW50IGluIHRoZSBzdHJlYW1FdmVudHMgaW1wbGVtZW50YXRpb24uXG4gKiBUaGlzIGlzIHNpbXBseSBiaW5kaW5nIHRoZSBhcmd1bWVudHMgdG8gdGhlIG5hbWVzcGFjZSB0byBtYWtlIHNhdmUgb25cbiAqIGEgYml0IG9mIHR5cGluZyBpbiB0aGUgc3RyZWFtRXZlbnRzIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRPRE86IFJlZmFjdG9yIGFuZCByZW1vdmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBfUm9vdEV2ZW50RmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZU5hbWVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVUeXBlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlVGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlTmFtZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZVR5cGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVUYWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5jbHVkZU5hbWVzID0gZmllbGRzLmluY2x1ZGVOYW1lcztcbiAgICAgICAgdGhpcy5pbmNsdWRlVHlwZXMgPSBmaWVsZHMuaW5jbHVkZVR5cGVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUYWdzID0gZmllbGRzLmluY2x1ZGVUYWdzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVOYW1lcyA9IGZpZWxkcy5leGNsdWRlTmFtZXM7XG4gICAgICAgIHRoaXMuZXhjbHVkZVR5cGVzID0gZmllbGRzLmV4Y2x1ZGVUeXBlcztcbiAgICAgICAgdGhpcy5leGNsdWRlVGFncyA9IGZpZWxkcy5leGNsdWRlVGFncztcbiAgICB9XG4gICAgaW5jbHVkZUV2ZW50KGV2ZW50LCByb290VHlwZSkge1xuICAgICAgICBsZXQgaW5jbHVkZSA9IHRoaXMuaW5jbHVkZU5hbWVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVR5cGVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVRhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZXZlbnRUYWdzID0gZXZlbnQudGFncyA/PyBbXTtcbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZU5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlIHx8IHRoaXMuaW5jbHVkZU5hbWVzLmluY2x1ZGVzKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSB8fCB0aGlzLmluY2x1ZGVUeXBlcy5pbmNsdWRlcyhyb290VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVRhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9XG4gICAgICAgICAgICAgICAgaW5jbHVkZSB8fCBldmVudFRhZ3Muc29tZSgodGFnKSA9PiB0aGlzLmluY2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgJiYgIXRoaXMuZXhjbHVkZU5hbWVzLmluY2x1ZGVzKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlVHlwZXMuaW5jbHVkZXMocm9vdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPVxuICAgICAgICAgICAgICAgIGluY2x1ZGUgJiYgZXZlbnRUYWdzLmV2ZXJ5KCh0YWcpID0+ICF0aGlzLmV4Y2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5jbHVkZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNSdW5uYWJsZUludGVyZmFjZSIsInRoaW5nIiwibGNfcnVubmFibGUiLCJfUm9vdEV2ZW50RmlsdGVyIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiaW5jbHVkZU5hbWVzIiwiaW5jbHVkZVR5cGVzIiwiaW5jbHVkZVRhZ3MiLCJleGNsdWRlTmFtZXMiLCJleGNsdWRlVHlwZXMiLCJleGNsdWRlVGFncyIsImluY2x1ZGVFdmVudCIsImV2ZW50Iiwicm9vdFR5cGUiLCJpbmNsdWRlIiwidW5kZWZpbmVkIiwiZXZlbnRUYWdzIiwidGFncyIsImluY2x1ZGVzIiwibmFtZSIsInNvbWUiLCJ0YWciLCJldmVyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/wrappers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToHttpEventStream: () => (/* binding */ convertToHttpEventStream)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n\nfunction convertToHttpEventStream(stream) {\n    const encoder = new TextEncoder();\n    const finalStream = new ReadableStream({\n        async start (controller) {\n            for await (const chunk of stream){\n                controller.enqueue(encoder.encode(`event: data\\ndata: ${JSON.stringify(chunk)}\\n\\n`));\n            }\n            controller.enqueue(encoder.encode(\"event: end\\n\\n\"));\n            controller.close();\n        }\n    });\n    return _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.IterableReadableStream.fromReadableStream(finalStream);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3dyYXBwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTREO0FBQ3JELFNBQVNDLHlCQUF5QkMsTUFBTTtJQUMzQyxNQUFNQyxVQUFVLElBQUlDO0lBQ3BCLE1BQU1DLGNBQWMsSUFBSUMsZUFBZTtRQUNuQyxNQUFNQyxPQUFNQyxVQUFVO1lBQ2xCLFdBQVcsTUFBTUMsU0FBU1AsT0FBUTtnQkFDOUJNLFdBQVdFLE9BQU8sQ0FBQ1AsUUFBUVEsTUFBTSxDQUFDLENBQUMsbUJBQW1CLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ0osT0FBTyxJQUFJLENBQUM7WUFDdkY7WUFDQUQsV0FBV0UsT0FBTyxDQUFDUCxRQUFRUSxNQUFNLENBQUM7WUFDbENILFdBQVdNLEtBQUs7UUFDcEI7SUFDSjtJQUNBLE9BQU9kLG9FQUFzQkEsQ0FBQ2Usa0JBQWtCLENBQUNWO0FBQ3JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy93cmFwcGVycy5qcz8wNTlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlUmVhZGFibGVTdHJlYW0gfSBmcm9tIFwiLi4vdXRpbHMvc3RyZWFtLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvSHR0cEV2ZW50U3RyZWFtKHN0cmVhbSkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjb25zdCBmaW5hbFN0cmVhbSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgIGFzeW5jIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGVuY29kZXIuZW5jb2RlKGBldmVudDogZGF0YVxcbmRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoY2h1bmspfVxcblxcbmApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShlbmNvZGVyLmVuY29kZShcImV2ZW50OiBlbmRcXG5cXG5cIikpO1xuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBJdGVyYWJsZVJlYWRhYmxlU3RyZWFtLmZyb21SZWFkYWJsZVN0cmVhbShmaW5hbFN0cmVhbSk7XG59XG4iXSwibmFtZXMiOlsiSXRlcmFibGVSZWFkYWJsZVN0cmVhbSIsImNvbnZlcnRUb0h0dHBFdmVudFN0cmVhbSIsInN0cmVhbSIsImVuY29kZXIiLCJUZXh0RW5jb2RlciIsImZpbmFsU3RyZWFtIiwiUmVhZGFibGVTdHJlYW0iLCJzdGFydCIsImNvbnRyb2xsZXIiLCJjaHVuayIsImVucXVldWUiLCJlbmNvZGUiLCJKU09OIiwic3RyaW5naWZ5IiwiY2xvc2UiLCJmcm9tUmVhZGFibGVTdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _getConfigureHooks: () => (/* binding */ _getConfigureHooks),\n/* harmony export */   getContextVariable: () => (/* binding */ getContextVariable),\n/* harmony export */   registerConfigureHook: () => (/* binding */ registerConfigureHook),\n/* harmony export */   setContextVariable: () => (/* binding */ setContextVariable)\n/* harmony export */ });\n/* harmony import */ var langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n\n\n/**\n * Set a context variable. Context variables are scoped to any\n * child runnables called by the current runnable, or globally if set outside\n * of any runnable.\n *\n * @remarks\n * This function is only supported in environments that support AsyncLocalStorage,\n * including Node.js, Deno, and Cloudflare Workers.\n *\n * @example\n * ```ts\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n * import {\n *   getContextVariable,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const nested = RunnableLambda.from(() => {\n *   // \"bar\" because it was set by a parent\n *   console.log(getContextVariable(\"foo\"));\n *\n *   // Override to \"baz\", but only for child runnables\n *   setContextVariable(\"foo\", \"baz\");\n *\n *   // Now \"baz\", but only for child runnables\n *   return getContextVariable(\"foo\");\n * });\n *\n * const runnable = RunnableLambda.from(async () => {\n *   // Set a context variable named \"foo\"\n *   setContextVariable(\"foo\", \"bar\");\n *\n *   const res = await nested.invoke({});\n *\n *   // Still \"bar\" since child changes do not affect parents\n *   console.log(getContextVariable(\"foo\"));\n *\n *   return res;\n * });\n *\n * // undefined, because context variable has not been set yet\n * console.log(getContextVariable(\"foo\"));\n *\n * // Final return value is \"baz\"\n * const result = await runnable.invoke({});\n * ```\n *\n * @param name The name of the context variable.\n * @param value The value to set.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setContextVariable(name, value) {\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n    if (asyncLocalStorageInstance === undefined) {\n        throw new Error(`Internal error: Global shared async local storage instance has not been initialized.`);\n    }\n    const runTree = asyncLocalStorageInstance.getStore();\n    const contextVars = {\n        ...runTree?.[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY]\n    };\n    contextVars[name] = value;\n    let newValue = {};\n    if ((0,langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.isRunTree)(runTree)) {\n        newValue = new langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.RunTree(runTree);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newValue[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY] = contextVars;\n    asyncLocalStorageInstance.enterWith(newValue);\n}\n/**\n * Get the value of a previously set context variable. Context variables\n * are scoped to any child runnables called by the current runnable,\n * or globally if set outside of any runnable.\n *\n * @remarks\n * This function is only supported in environments that support AsyncLocalStorage,\n * including Node.js, Deno, and Cloudflare Workers.\n *\n * @example\n * ```ts\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n * import {\n *   getContextVariable,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const nested = RunnableLambda.from(() => {\n *   // \"bar\" because it was set by a parent\n *   console.log(getContextVariable(\"foo\"));\n *\n *   // Override to \"baz\", but only for child runnables\n *   setContextVariable(\"foo\", \"baz\");\n *\n *   // Now \"baz\", but only for child runnables\n *   return getContextVariable(\"foo\");\n * });\n *\n * const runnable = RunnableLambda.from(async () => {\n *   // Set a context variable named \"foo\"\n *   setContextVariable(\"foo\", \"bar\");\n *\n *   const res = await nested.invoke({});\n *\n *   // Still \"bar\" since child changes do not affect parents\n *   console.log(getContextVariable(\"foo\"));\n *\n *   return res;\n * });\n *\n * // undefined, because context variable has not been set yet\n * console.log(getContextVariable(\"foo\"));\n *\n * // Final return value is \"baz\"\n * const result = await runnable.invoke({});\n * ```\n *\n * @param name The name of the context variable.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getContextVariable(name) {\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n    if (asyncLocalStorageInstance === undefined) {\n        return undefined;\n    }\n    const runTree = asyncLocalStorageInstance.getStore();\n    return runTree?.[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY]?.[name];\n}\nconst LC_CONFIGURE_HOOKS_KEY = Symbol(\"lc:configure_hooks\");\nconst _getConfigureHooks = ()=>getContextVariable(LC_CONFIGURE_HOOKS_KEY) || [];\n/**\n * Register a callback configure hook to automatically add callback handlers to all runs.\n *\n * There are two ways to use this:\n *\n * 1. Using a context variable:\n *    - Set `contextVar` to specify the variable name\n *    - Use `setContextVariable()` to store your handler instance\n *\n * 2. Using an environment variable:\n *    - Set both `envVar` and `handlerClass`\n *    - The handler will be instantiated when the env var is set to \"true\".\n *\n * @example\n * ```typescript\n * // Method 1: Using context variable\n * import {\n *   registerConfigureHook,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const tracer = new MyCallbackHandler();\n * registerConfigureHook({\n *   contextVar: \"my_tracer\",\n * });\n * setContextVariable(\"my_tracer\", tracer);\n *\n * // ...run code here\n *\n * // Method 2: Using environment variable\n * registerConfigureHook({\n *   handlerClass: MyCallbackHandler,\n *   envVar: \"MY_TRACER_ENABLED\",\n * });\n * process.env.MY_TRACER_ENABLED = \"true\";\n *\n * // ...run code here\n * ```\n *\n * @param config Configuration object for the hook\n * @param config.contextVar Name of the context variable containing the handler instance\n * @param config.inheritable Whether child runs should inherit this handler\n * @param config.handlerClass Optional callback handler class (required if using envVar)\n * @param config.envVar Optional environment variable name to control handler activation\n */ const registerConfigureHook = (config)=>{\n    if (config.envVar && !config.handlerClass) {\n        throw new Error(\"If envVar is set, handlerClass must also be set to a non-None value.\");\n    }\n    setContextVariable(LC_CONFIGURE_HOOKS_KEY, [\n        ..._getConfigureHooks(),\n        config\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACING_ALS_KEY: () => (/* binding */ TRACING_ALS_KEY),\n/* harmony export */   _CONTEXT_VARIABLES_KEY: () => (/* binding */ _CONTEXT_VARIABLES_KEY),\n/* harmony export */   getGlobalAsyncLocalStorageInstance: () => (/* binding */ getGlobalAsyncLocalStorageInstance),\n/* harmony export */   setGlobalAsyncLocalStorageInstance: () => (/* binding */ setGlobalAsyncLocalStorageInstance)\n/* harmony export */ });\nconst TRACING_ALS_KEY = Symbol.for(\"ls:tracing_async_local_storage\");\nconst _CONTEXT_VARIABLES_KEY = Symbol.for(\"lc:context_variables\");\nconst setGlobalAsyncLocalStorageInstance = (instance)=>{\n    globalThis[TRACING_ALS_KEY] = instance;\n};\nconst getGlobalAsyncLocalStorageInstance = ()=>{\n    return globalThis[TRACING_ALS_KEY];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2dsb2JhbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLE1BQU1BLGtCQUFrQkMsT0FBT0MsR0FBRyxDQUFDLGtDQUFrQztBQUNyRSxNQUFNQyx5QkFBeUJGLE9BQU9DLEdBQUcsQ0FBQyx3QkFBd0I7QUFDbEUsTUFBTUUscUNBQXFDLENBQUNDO0lBQy9DQyxVQUFVLENBQUNOLGdCQUFnQixHQUFHSztBQUNsQyxFQUFFO0FBQ0ssTUFBTUUscUNBQXFDO0lBQzlDLE9BQU9ELFVBQVUsQ0FBQ04sZ0JBQWdCO0FBQ3RDLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2dsb2JhbHMuanM/MmU3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVFJBQ0lOR19BTFNfS0VZID0gU3ltYm9sLmZvcihcImxzOnRyYWNpbmdfYXN5bmNfbG9jYWxfc3RvcmFnZVwiKTtcbmV4cG9ydCBjb25zdCBfQ09OVEVYVF9WQVJJQUJMRVNfS0VZID0gU3ltYm9sLmZvcihcImxjOmNvbnRleHRfdmFyaWFibGVzXCIpO1xuZXhwb3J0IGNvbnN0IHNldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcbiAgICBnbG9iYWxUaGlzW1RSQUNJTkdfQUxTX0tFWV0gPSBpbnN0YW5jZTtcbn07XG5leHBvcnQgY29uc3QgZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9ICgpID0+IHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpc1tUUkFDSU5HX0FMU19LRVldO1xufTtcbiJdLCJuYW1lcyI6WyJUUkFDSU5HX0FMU19LRVkiLCJTeW1ib2wiLCJmb3IiLCJfQ09OVEVYVF9WQVJJQUJMRVNfS0VZIiwic2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSIsImluc3RhbmNlIiwiZ2xvYmFsVGhpcyIsImdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* binding */ AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* binding */ MockAsyncLocalStorage)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\nclass MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        return callback();\n    }\n    enterWith(_store) {\n        return undefined;\n    }\n}\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nconst LC_CHILD_KEY = Symbol.for(\"lc:child_config\");\nclass AsyncLocalStorageProvider {\n    getInstance() {\n        return (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)() ?? mockAsyncLocalStorage;\n    }\n    getRunnableConfig() {\n        const storage = this.getInstance();\n        // this has the runnable config\n        // which means that we should also have an instance of a LangChainTracer\n        // with the run map prepopulated\n        return storage.getStore()?.extra?.[LC_CHILD_KEY];\n    }\n    runWithConfig(config, callback, avoidCreatingRootRunTree) {\n        const callbackManager = _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n        const storage = this.getInstance();\n        const previousValue = storage.getStore();\n        const parentRunId = callbackManager?.getParentRunId();\n        const langChainTracer = callbackManager?.handlers?.find((handler)=>handler?.name === \"langchain_tracer\");\n        let runTree;\n        if (langChainTracer && parentRunId) {\n            runTree = langChainTracer.getRunTreeWithTracingConfig(parentRunId);\n        } else if (!avoidCreatingRootRunTree) {\n            runTree = new langsmith__WEBPACK_IMPORTED_MODULE_0__.RunTree({\n                name: \"<runnable_lambda>\",\n                tracingEnabled: false\n            });\n        }\n        if (runTree) {\n            runTree.extra = {\n                ...runTree.extra,\n                [LC_CHILD_KEY]: config\n            };\n        }\n        if (previousValue !== undefined && previousValue[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY] !== undefined) {\n            if (runTree === undefined) {\n                runTree = {};\n            }\n            runTree[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY] = previousValue[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY];\n        }\n        return storage.run(runTree, callback);\n    }\n    initializeGlobalInstance(instance) {\n        if ((0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)() === undefined) {\n            (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.setGlobalAsyncLocalStorageInstance)(instance);\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscURBQXFELEdBQ2pCO0FBQzJGO0FBQ2xFO0FBQ3RELE1BQU1LO0lBQ1RDLFdBQVc7UUFDUCxPQUFPQztJQUNYO0lBQ0FDLElBQUlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO1FBQ2xCLE9BQU9BO0lBQ1g7SUFDQUMsVUFBVUYsTUFBTSxFQUFFO1FBQ2QsT0FBT0Y7SUFDWDtBQUNKO0FBQ0EsTUFBTUssd0JBQXdCLElBQUlQO0FBQ2xDLE1BQU1RLGVBQWVDLE9BQU9DLEdBQUcsQ0FBQztBQUNoQyxNQUFNQztJQUNGQyxjQUFjO1FBQ1YsT0FBT2hCLCtFQUFrQ0EsTUFBTVc7SUFDbkQ7SUFDQU0sb0JBQW9CO1FBQ2hCLE1BQU1DLFVBQVUsSUFBSSxDQUFDRixXQUFXO1FBQ2hDLCtCQUErQjtRQUMvQix3RUFBd0U7UUFDeEUsZ0NBQWdDO1FBQ2hDLE9BQU9FLFFBQVFiLFFBQVEsSUFBSWMsT0FBTyxDQUFDUCxhQUFhO0lBQ3BEO0lBQ0FRLGNBQWNDLE1BQU0sRUFBRVosUUFBUSxFQUFFYSx3QkFBd0IsRUFBRTtRQUN0RCxNQUFNQyxrQkFBa0JwQixrRUFBZUEsQ0FBQ3FCLGNBQWMsQ0FBQ0gsUUFBUUksV0FBV25CLFdBQVdlLFFBQVFLLE1BQU1wQixXQUFXZSxRQUFRTTtRQUN0SCxNQUFNVCxVQUFVLElBQUksQ0FBQ0YsV0FBVztRQUNoQyxNQUFNWSxnQkFBZ0JWLFFBQVFiLFFBQVE7UUFDdEMsTUFBTXdCLGNBQWNOLGlCQUFpQk87UUFDckMsTUFBTUMsa0JBQWtCUixpQkFBaUJTLFVBQVVDLEtBQUssQ0FBQ0MsVUFBWUEsU0FBU0MsU0FBUztRQUN2RixJQUFJQztRQUNKLElBQUlMLG1CQUFtQkYsYUFBYTtZQUNoQ08sVUFBVUwsZ0JBQWdCTSwyQkFBMkIsQ0FBQ1I7UUFDMUQsT0FDSyxJQUFJLENBQUNQLDBCQUEwQjtZQUNoQ2MsVUFBVSxJQUFJckMsOENBQU9BLENBQUM7Z0JBQ2xCb0MsTUFBTTtnQkFDTkcsZ0JBQWdCO1lBQ3BCO1FBQ0o7UUFDQSxJQUFJRixTQUFTO1lBQ1RBLFFBQVFqQixLQUFLLEdBQUc7Z0JBQUUsR0FBR2lCLFFBQVFqQixLQUFLO2dCQUFFLENBQUNQLGFBQWEsRUFBRVM7WUFBTztRQUMvRDtRQUNBLElBQUlPLGtCQUFrQnRCLGFBQ2xCc0IsYUFBYSxDQUFDMUIsK0RBQXNCQSxDQUFDLEtBQUtJLFdBQVc7WUFDckQsSUFBSThCLFlBQVk5QixXQUFXO2dCQUN2QjhCLFVBQVUsQ0FBQztZQUNmO1lBQ0FBLE9BQU8sQ0FBQ2xDLCtEQUFzQkEsQ0FBQyxHQUMzQjBCLGFBQWEsQ0FBQzFCLCtEQUFzQkEsQ0FBQztRQUM3QztRQUNBLE9BQU9nQixRQUFRWCxHQUFHLENBQUM2QixTQUFTM0I7SUFDaEM7SUFDQThCLHlCQUF5QkMsUUFBUSxFQUFFO1FBQy9CLElBQUl4QywrRUFBa0NBLE9BQU9NLFdBQVc7WUFDcERMLCtFQUFrQ0EsQ0FBQ3VDO1FBQ3ZDO0lBQ0o7QUFDSjtBQUNBLE1BQU1DLHFDQUFxQyxJQUFJMUI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL2FzeW5jX2xvY2FsX3N0b3JhZ2UvaW5kZXguanM/MmMyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBSdW5UcmVlIH0gZnJvbSBcImxhbmdzbWl0aFwiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSwgc2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSwgX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSwgfSBmcm9tIFwiLi9nbG9iYWxzLmpzXCI7XG5pbXBvcnQgeyBDYWxsYmFja01hbmFnZXIgfSBmcm9tIFwiLi4vLi4vY2FsbGJhY2tzL21hbmFnZXIuanNcIjtcbmV4cG9ydCBjbGFzcyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGdldFN0b3JlKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBydW4oX3N0b3JlLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgZW50ZXJXaXRoKF9zdG9yZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmNvbnN0IG1vY2tBc3luY0xvY2FsU3RvcmFnZSA9IG5ldyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbmNvbnN0IExDX0NISUxEX0tFWSA9IFN5bWJvbC5mb3IoXCJsYzpjaGlsZF9jb25maWdcIik7XG5jbGFzcyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIHtcbiAgICBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UoKSA/PyBtb2NrQXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfVxuICAgIGdldFJ1bm5hYmxlQ29uZmlnKCkge1xuICAgICAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAvLyB0aGlzIGhhcyB0aGUgcnVubmFibGUgY29uZmlnXG4gICAgICAgIC8vIHdoaWNoIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIGFsc28gaGF2ZSBhbiBpbnN0YW5jZSBvZiBhIExhbmdDaGFpblRyYWNlclxuICAgICAgICAvLyB3aXRoIHRoZSBydW4gbWFwIHByZXBvcHVsYXRlZFxuICAgICAgICByZXR1cm4gc3RvcmFnZS5nZXRTdG9yZSgpPy5leHRyYT8uW0xDX0NISUxEX0tFWV07XG4gICAgfVxuICAgIHJ1bldpdGhDb25maWcoY29uZmlnLCBjYWxsYmFjaywgYXZvaWRDcmVhdGluZ1Jvb3RSdW5UcmVlKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrTWFuYWdlciA9IENhbGxiYWNrTWFuYWdlci5fY29uZmlndXJlU3luYyhjb25maWc/LmNhbGxiYWNrcywgdW5kZWZpbmVkLCBjb25maWc/LnRhZ3MsIHVuZGVmaW5lZCwgY29uZmlnPy5tZXRhZGF0YSk7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBzdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgIGNvbnN0IHBhcmVudFJ1bklkID0gY2FsbGJhY2tNYW5hZ2VyPy5nZXRQYXJlbnRSdW5JZCgpO1xuICAgICAgICBjb25zdCBsYW5nQ2hhaW5UcmFjZXIgPSBjYWxsYmFja01hbmFnZXI/LmhhbmRsZXJzPy5maW5kKChoYW5kbGVyKSA9PiBoYW5kbGVyPy5uYW1lID09PSBcImxhbmdjaGFpbl90cmFjZXJcIik7XG4gICAgICAgIGxldCBydW5UcmVlO1xuICAgICAgICBpZiAobGFuZ0NoYWluVHJhY2VyICYmIHBhcmVudFJ1bklkKSB7XG4gICAgICAgICAgICBydW5UcmVlID0gbGFuZ0NoYWluVHJhY2VyLmdldFJ1blRyZWVXaXRoVHJhY2luZ0NvbmZpZyhwYXJlbnRSdW5JZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWF2b2lkQ3JlYXRpbmdSb290UnVuVHJlZSkge1xuICAgICAgICAgICAgcnVuVHJlZSA9IG5ldyBSdW5UcmVlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIjxydW5uYWJsZV9sYW1iZGE+XCIsXG4gICAgICAgICAgICAgICAgdHJhY2luZ0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1blRyZWUpIHtcbiAgICAgICAgICAgIHJ1blRyZWUuZXh0cmEgPSB7IC4uLnJ1blRyZWUuZXh0cmEsIFtMQ19DSElMRF9LRVldOiBjb25maWcgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldmlvdXNWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlW19DT05URVhUX1ZBUklBQkxFU19LRVldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChydW5UcmVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBydW5UcmVlID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5UcmVlW19DT05URVhUX1ZBUklBQkxFU19LRVldID1cbiAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlW19DT05URVhUX1ZBUklBQkxFU19LRVldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdG9yYWdlLnJ1bihydW5UcmVlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGluaXRpYWxpemVHbG9iYWxJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgICAgICBpZiAoZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSgpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiA9IG5ldyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyKCk7XG5leHBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIH07XG4iXSwibmFtZXMiOlsiUnVuVHJlZSIsImdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UiLCJzZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlIiwiX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSIsIkNhbGxiYWNrTWFuYWdlciIsIk1vY2tBc3luY0xvY2FsU3RvcmFnZSIsImdldFN0b3JlIiwidW5kZWZpbmVkIiwicnVuIiwiX3N0b3JlIiwiY2FsbGJhY2siLCJlbnRlcldpdGgiLCJtb2NrQXN5bmNMb2NhbFN0b3JhZ2UiLCJMQ19DSElMRF9LRVkiLCJTeW1ib2wiLCJmb3IiLCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIiwiZ2V0SW5zdGFuY2UiLCJnZXRSdW5uYWJsZUNvbmZpZyIsInN0b3JhZ2UiLCJleHRyYSIsInJ1bldpdGhDb25maWciLCJjb25maWciLCJhdm9pZENyZWF0aW5nUm9vdFJ1blRyZWUiLCJjYWxsYmFja01hbmFnZXIiLCJfY29uZmlndXJlU3luYyIsImNhbGxiYWNrcyIsInRhZ3MiLCJtZXRhZGF0YSIsInByZXZpb3VzVmFsdWUiLCJwYXJlbnRSdW5JZCIsImdldFBhcmVudFJ1bklkIiwibGFuZ0NoYWluVHJhY2VyIiwiaGFuZGxlcnMiLCJmaW5kIiwiaGFuZGxlciIsIm5hbWUiLCJydW5UcmVlIiwiZ2V0UnVuVHJlZVdpdGhUcmFjaW5nQ29uZmlnIiwidHJhY2luZ0VuYWJsZWQiLCJpbml0aWFsaXplR2xvYmFsSW5zdGFuY2UiLCJpbnN0YW5jZSIsIkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/callbacks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback),\n/* harmony export */   getQueue: () => (/* binding */ getQueue)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var _async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_local_storage/globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n/* harmony import */ var _tracer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracer.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\nfunction getQueue() {\n    if (typeof queue === \"undefined\") {\n        queue = createQueue();\n    }\n    return queue;\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promiseFn Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        // Clear config since callbacks are not part of the root run\n        // Avoid using global singleton due to circuluar dependency issues\n        const asyncLocalStorageInstance = (0,_async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n        if (asyncLocalStorageInstance !== undefined) {\n            await asyncLocalStorageInstance.run(undefined, async ()=>promiseFn());\n        } else {\n            await promiseFn();\n        }\n    } else {\n        queue = getQueue();\n        void queue.add(async ()=>{\n            const asyncLocalStorageInstance = (0,_async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n            if (asyncLocalStorageInstance !== undefined) {\n                await asyncLocalStorageInstance.run(undefined, async ()=>promiseFn());\n            } else {\n                await promiseFn();\n            }\n        });\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ async function awaitAllCallbacks() {\n    const defaultClient = (0,_tracer_js__WEBPACK_IMPORTED_MODULE_2__.getDefaultLangChainClientSingleton)();\n    await Promise.allSettled([\n        typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve(),\n        defaultClient.awaitPendingTraceBatches()\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9jYWxsYmFja3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBQXFELEdBQ3JCO0FBQ3NEO0FBQ3JCO0FBQ2pFLElBQUlHO0FBQ0o7Ozs7Q0FJQyxHQUNELFNBQVNDO0lBQ0wsTUFBTUMsU0FBUyxLQUFzQkwsR0FBR0EsK0NBQWlCLEdBQUdBLG9DQUFTQTtJQUNyRSxPQUFPLElBQUlLLE9BQU87UUFDZEUsV0FBVztRQUNYQyxhQUFhO0lBQ2pCO0FBQ0o7QUFDTyxTQUFTQztJQUNaLElBQUksT0FBT04sVUFBVSxhQUFhO1FBQzlCQSxRQUFRQztJQUNaO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxlQUFlTyxnQkFBZ0JDLFNBQVMsRUFBRUMsSUFBSTtJQUNqRCxJQUFJQSxTQUFTLE1BQU07UUFDZiw0REFBNEQ7UUFDNUQsa0VBQWtFO1FBQ2xFLE1BQU1DLDRCQUE0QlosbUdBQWtDQTtRQUNwRSxJQUFJWSw4QkFBOEJDLFdBQVc7WUFDekMsTUFBTUQsMEJBQTBCRSxHQUFHLENBQUNELFdBQVcsVUFBWUg7UUFDL0QsT0FDSztZQUNELE1BQU1BO1FBQ1Y7SUFDSixPQUNLO1FBQ0RSLFFBQVFNO1FBQ1IsS0FBS04sTUFBTWEsR0FBRyxDQUFDO1lBQ1gsTUFBTUgsNEJBQTRCWixtR0FBa0NBO1lBQ3BFLElBQUlZLDhCQUE4QkMsV0FBVztnQkFDekMsTUFBTUQsMEJBQTBCRSxHQUFHLENBQUNELFdBQVcsVUFBWUg7WUFDL0QsT0FDSztnQkFDRCxNQUFNQTtZQUNWO1FBQ0o7SUFDSjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sZUFBZU07SUFDbEIsTUFBTUMsZ0JBQWdCaEIsOEVBQWtDQTtJQUN4RCxNQUFNaUIsUUFBUUMsVUFBVSxDQUFDO1FBQ3JCLE9BQU9qQixVQUFVLGNBQWNBLE1BQU1rQixNQUFNLEtBQUtGLFFBQVFHLE9BQU87UUFDL0RKLGNBQWNLLHdCQUF3QjtLQUN6QztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvY2FsbGJhY2tzLmpzPzdhNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IFBRdWV1ZU1vZCBmcm9tIFwicC1xdWV1ZVwiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSB9IGZyb20gXCIuL2FzeW5jX2xvY2FsX3N0b3JhZ2UvZ2xvYmFscy5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiB9IGZyb20gXCIuL3RyYWNlci5qc1wiO1xubGV0IHF1ZXVlO1xuLyoqXG4gKiBDcmVhdGVzIGEgcXVldWUgdXNpbmcgdGhlIHAtcXVldWUgbGlicmFyeS4gVGhlIHF1ZXVlIGlzIGNvbmZpZ3VyZWQgdG9cbiAqIGF1dG8tc3RhcnQgYW5kIGhhcyBhIGNvbmN1cnJlbmN5IG9mIDEsIG1lYW5pbmcgaXQgd2lsbCBwcm9jZXNzIHRhc2tzXG4gKiBvbmUgYXQgYSB0aW1lLlxuICovXG5mdW5jdGlvbiBjcmVhdGVRdWV1ZSgpIHtcbiAgICBjb25zdCBQUXVldWUgPSBcImRlZmF1bHRcIiBpbiBQUXVldWVNb2QgPyBQUXVldWVNb2QuZGVmYXVsdCA6IFBRdWV1ZU1vZDtcbiAgICByZXR1cm4gbmV3IFBRdWV1ZSh7XG4gICAgICAgIGF1dG9TdGFydDogdHJ1ZSxcbiAgICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVldWUoKSB7XG4gICAgaWYgKHR5cGVvZiBxdWV1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBxdWV1ZSA9IGNyZWF0ZVF1ZXVlKCk7XG4gICAgfVxuICAgIHJldHVybiBxdWV1ZTtcbn1cbi8qKlxuICogQ29uc3VtZSBhIHByb21pc2UsIGVpdGhlciBhZGRpbmcgaXQgdG8gdGhlIHF1ZXVlIG9yIHdhaXRpbmcgZm9yIGl0IHRvIHJlc29sdmVcbiAqIEBwYXJhbSBwcm9taXNlRm4gUHJvbWlzZSB0byBjb25zdW1lXG4gKiBAcGFyYW0gd2FpdCBXaGV0aGVyIHRvIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgb3IgcmVzb2x2ZSBpbW1lZGlhdGVseVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uc3VtZUNhbGxiYWNrKHByb21pc2VGbiwgd2FpdCkge1xuICAgIGlmICh3YWl0ID09PSB0cnVlKSB7XG4gICAgICAgIC8vIENsZWFyIGNvbmZpZyBzaW5jZSBjYWxsYmFja3MgYXJlIG5vdCBwYXJ0IG9mIHRoZSByb290IHJ1blxuICAgICAgICAvLyBBdm9pZCB1c2luZyBnbG9iYWwgc2luZ2xldG9uIGR1ZSB0byBjaXJjdWx1YXIgZGVwZW5kZW5jeSBpc3N1ZXNcbiAgICAgICAgY29uc3QgYXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UoKTtcbiAgICAgICAgaWYgKGFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYXdhaXQgYXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZS5ydW4odW5kZWZpbmVkLCBhc3luYyAoKSA9PiBwcm9taXNlRm4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9taXNlRm4oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcXVldWUgPSBnZXRRdWV1ZSgpO1xuICAgICAgICB2b2lkIHF1ZXVlLmFkZChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlID0gZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSgpO1xuICAgICAgICAgICAgaWYgKGFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UucnVuKHVuZGVmaW5lZCwgYXN5bmMgKCkgPT4gcHJvbWlzZUZuKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcHJvbWlzZUZuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogV2FpdHMgZm9yIGFsbCBwcm9taXNlcyBpbiB0aGUgcXVldWUgdG8gcmVzb2x2ZS4gSWYgdGhlIHF1ZXVlIGlzXG4gKiB1bmRlZmluZWQsIGl0IGltbWVkaWF0ZWx5IHJlc29sdmVzIGEgcHJvbWlzZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF3YWl0QWxsQ2FsbGJhY2tzKCkge1xuICAgIGNvbnN0IGRlZmF1bHRDbGllbnQgPSBnZXREZWZhdWx0TGFuZ0NoYWluQ2xpZW50U2luZ2xldG9uKCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFtcbiAgICAgICAgdHlwZW9mIHF1ZXVlICE9PSBcInVuZGVmaW5lZFwiID8gcXVldWUub25JZGxlKCkgOiBQcm9taXNlLnJlc29sdmUoKSxcbiAgICAgICAgZGVmYXVsdENsaWVudC5hd2FpdFBlbmRpbmdUcmFjZUJhdGNoZXMoKSxcbiAgICBdKTtcbn1cbiJdLCJuYW1lcyI6WyJQUXVldWVNb2QiLCJnZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlIiwiZ2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiIsInF1ZXVlIiwiY3JlYXRlUXVldWUiLCJQUXVldWUiLCJkZWZhdWx0IiwiYXV0b1N0YXJ0IiwiY29uY3VycmVuY3kiLCJnZXRRdWV1ZSIsImNvbnN1bWVDYWxsYmFjayIsInByb21pc2VGbiIsIndhaXQiLCJhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlIiwidW5kZWZpbmVkIiwicnVuIiwiYWRkIiwiYXdhaXRBbGxDYWxsYmFja3MiLCJkZWZhdWx0Q2xpZW50IiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJvbklkbGUiLCJyZXNvbHZlIiwiYXdhaXRQZW5kaW5nVHJhY2VCYXRjaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* reexport safe */ _async_local_storage_index_js__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* reexport safe */ _async_local_storage_index_js__WEBPACK_IMPORTED_MODULE_0__.MockAsyncLocalStorage),\n/* harmony export */   _CONTEXT_VARIABLES_KEY: () => (/* reexport safe */ _async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY)\n/* harmony export */ });\n/* harmony import */ var _async_local_storage_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./async_local_storage/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js\");\n/* harmony import */ var _async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_local_storage/globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RztBQUNsQztBQUNKO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvaW5kZXguanM/NjRkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLCBNb2NrQXN5bmNMb2NhbFN0b3JhZ2UsIH0gZnJvbSBcIi4vYXN5bmNfbG9jYWxfc3RvcmFnZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSB9IGZyb20gXCIuL2FzeW5jX2xvY2FsX3N0b3JhZ2UvZ2xvYmFscy5qc1wiO1xuZXhwb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiwgTW9ja0FzeW5jTG9jYWxTdG9yYWdlLCB9O1xuZXhwb3J0IHsgX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSB9O1xuIl0sIm5hbWVzIjpbIkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24iLCJNb2NrQXN5bmNMb2NhbFN0b3JhZ2UiLCJfQ09OVEVYVF9WQVJJQUJMRVNfS0VZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/tracer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultLangChainClientSingleton: () => (/* binding */ getDefaultLangChainClientSingleton),\n/* harmony export */   setDefaultLangChainClientSingleton: () => (/* binding */ setDefaultLangChainClientSingleton)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n\nlet client;\nconst getDefaultLangChainClientSingleton = ()=>{\n    if (client === undefined) {\n        const clientParams = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\" ? {\n            // LangSmith has its own backgrounding system\n            blockOnRootRunFinalization: true\n        } : {};\n        client = new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client(clientParams);\n    }\n    return client;\n};\nconst setDefaultLangChainClientSingleton = (newClient)=>{\n    client = newClient;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy90cmFjZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUNzQjtBQUN6RCxJQUFJRTtBQUNHLE1BQU1DLHFDQUFxQztJQUM5QyxJQUFJRCxXQUFXRSxXQUFXO1FBQ3RCLE1BQU1DLGVBQWVKLHFFQUFzQkEsQ0FBQyxzQ0FBc0MsVUFDNUU7WUFDRSw2Q0FBNkM7WUFDN0NLLDRCQUE0QjtRQUNoQyxJQUNFLENBQUM7UUFDUEosU0FBUyxJQUFJRiw2Q0FBTUEsQ0FBQ0s7SUFDeEI7SUFDQSxPQUFPSDtBQUNYLEVBQUU7QUFDSyxNQUFNSyxxQ0FBcUMsQ0FBQ0M7SUFDL0NOLFNBQVNNO0FBQ2IsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL3RyYWNlci5qcz80MWMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCB9IGZyb20gXCJsYW5nc21pdGhcIjtcbmltcG9ydCB7IGdldEVudmlyb25tZW50VmFyaWFibGUgfSBmcm9tIFwiLi4vdXRpbHMvZW52LmpzXCI7XG5sZXQgY2xpZW50O1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24gPSAoKSA9PiB7XG4gICAgaWYgKGNsaWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudFBhcmFtcyA9IGdldEVudmlyb25tZW50VmFyaWFibGUoXCJMQU5HQ0hBSU5fQ0FMTEJBQ0tTX0JBQ0tHUk9VTkRcIikgPT09IFwiZmFsc2VcIlxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLy8gTGFuZ1NtaXRoIGhhcyBpdHMgb3duIGJhY2tncm91bmRpbmcgc3lzdGVtXG4gICAgICAgICAgICAgICAgYmxvY2tPblJvb3RSdW5GaW5hbGl6YXRpb246IHRydWUsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHt9O1xuICAgICAgICBjbGllbnQgPSBuZXcgQ2xpZW50KGNsaWVudFBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBjbGllbnQ7XG59O1xuZXhwb3J0IGNvbnN0IHNldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24gPSAobmV3Q2xpZW50KSA9PiB7XG4gICAgY2xpZW50ID0gbmV3Q2xpZW50O1xufTtcbiJdLCJuYW1lcyI6WyJDbGllbnQiLCJnZXRFbnZpcm9ubWVudFZhcmlhYmxlIiwiY2xpZW50IiwiZ2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiIsInVuZGVmaW5lZCIsImNsaWVudFBhcmFtcyIsImJsb2NrT25Sb290UnVuRmluYWxpemF0aW9uIiwic2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiIsIm5ld0NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isLangChainTool: () => (/* binding */ isLangChainTool),\n/* harmony export */   isRunnableToolLike: () => (/* binding */ isRunnableToolLike),\n/* harmony export */   isStructuredTool: () => (/* binding */ isStructuredTool),\n/* harmony export */   isStructuredToolParams: () => (/* binding */ isStructuredToolParams)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _utils_types_zod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/types/zod.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\");\n\n\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | JSONSchema | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */ function isStructuredTool(tool) {\n    return tool !== undefined && Array.isArray(tool.lc_namespace);\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */ function isRunnableToolLike(tool) {\n    return tool !== undefined && _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable.isRunnable(tool) && \"lc_name\" in tool.constructor && typeof tool.constructor.lc_name === \"function\" && tool.constructor.lc_name() === \"RunnableToolLike\";\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */ function isStructuredToolParams(tool) {\n    return !!tool && typeof tool === \"object\" && \"name\" in tool && \"schema\" in tool && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((0,_utils_types_zod_js__WEBPACK_IMPORTED_MODULE_1__.isInteropZodSchema)(tool.schema) || tool.schema != null && typeof tool.schema === \"object\" && \"type\" in tool.schema && typeof tool.schema.type === \"string\" && [\n        \"null\",\n        \"boolean\",\n        \"object\",\n        \"array\",\n        \"number\",\n        \"string\"\n    ].includes(tool.schema.type));\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */ function isLangChainTool(tool) {\n    return isStructuredToolParams(tool) || isRunnableToolLike(tool) || // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isStructuredTool(tool);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlEO0FBQ1c7QUFDNUQ7Ozs7O0NBS0MsR0FDTSxTQUFTRSxpQkFBaUJDLElBQUk7SUFDakMsT0FBUUEsU0FBU0MsYUFDYkMsTUFBTUMsT0FBTyxDQUFDSCxLQUFLSSxZQUFZO0FBQ3ZDO0FBQ0E7Ozs7O0NBS0MsR0FDTSxTQUFTQyxtQkFBbUJMLElBQUk7SUFDbkMsT0FBUUEsU0FBU0MsYUFDYkosd0RBQVFBLENBQUNTLFVBQVUsQ0FBQ04sU0FDcEIsYUFBYUEsS0FBS08sV0FBVyxJQUM3QixPQUFPUCxLQUFLTyxXQUFXLENBQUNDLE9BQU8sS0FBSyxjQUNwQ1IsS0FBS08sV0FBVyxDQUFDQyxPQUFPLE9BQU87QUFDdkM7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLHVCQUF1QlQsSUFBSTtJQUN2QyxPQUFRLENBQUMsQ0FBQ0EsUUFDTixPQUFPQSxTQUFTLFlBQ2hCLFVBQVVBLFFBQ1YsWUFBWUEsUUFDWiw4REFBOEQ7SUFDN0RGLENBQUFBLHVFQUFrQkEsQ0FBQ0UsS0FBS1UsTUFBTSxLQUMxQlYsS0FBS1UsTUFBTSxJQUFJLFFBQ1osT0FBT1YsS0FBS1UsTUFBTSxLQUFLLFlBQ3ZCLFVBQVVWLEtBQUtVLE1BQU0sSUFDckIsT0FBT1YsS0FBS1UsTUFBTSxDQUFDQyxJQUFJLEtBQUssWUFDNUI7UUFBQztRQUFRO1FBQVc7UUFBVTtRQUFTO1FBQVU7S0FBUyxDQUFDQyxRQUFRLENBQUNaLEtBQUtVLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO0FBQ3JHO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLGdCQUFnQmIsSUFBSTtJQUNoQyxPQUFRUyx1QkFBdUJULFNBQzNCSyxtQkFBbUJMLFNBQ25CLDhEQUE4RDtJQUM5REQsaUJBQWlCQztBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90b29scy90eXBlcy5qcz9lNTRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1bm5hYmxlLCB9IGZyb20gXCIuLi9ydW5uYWJsZXMvYmFzZS5qc1wiO1xuaW1wb3J0IHsgaXNJbnRlcm9wWm9kU2NoZW1hLCB9IGZyb20gXCIuLi91dGlscy90eXBlcy96b2QuanNcIjtcbi8qKlxuICogQ29uZmlybSB3aGV0aGVyIHRoZSBpbnB1dHRlZCB0b29sIGlzIGFuIGluc3RhbmNlIG9mIGBTdHJ1Y3R1cmVkVG9vbEludGVyZmFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJ1Y3R1cmVkVG9vbEludGVyZmFjZSB8IEpTT05TY2hlbWEgfCB1bmRlZmluZWR9IHRvb2wgVGhlIHRvb2wgdG8gY2hlY2sgaWYgaXQgaXMgYW4gaW5zdGFuY2Ugb2YgYFN0cnVjdHVyZWRUb29sSW50ZXJmYWNlYC5cbiAqIEByZXR1cm5zIHt0b29sIGlzIFN0cnVjdHVyZWRUb29sSW50ZXJmYWNlfSBXaGV0aGVyIHRoZSBpbnB1dHRlZCB0b29sIGlzIGFuIGluc3RhbmNlIG9mIGBTdHJ1Y3R1cmVkVG9vbEludGVyZmFjZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cnVjdHVyZWRUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gKHRvb2wgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KHRvb2wubGNfbmFtZXNwYWNlKSk7XG59XG4vKipcbiAqIENvbmZpcm0gd2hldGhlciB0aGUgaW5wdXR0ZWQgdG9vbCBpcyBhbiBpbnN0YW5jZSBvZiBgUnVubmFibGVUb29sTGlrZWAuXG4gKlxuICogQHBhcmFtIHt1bmtub3duIHwgdW5kZWZpbmVkfSB0b29sIFRoZSB0b29sIHRvIGNoZWNrIGlmIGl0IGlzIGFuIGluc3RhbmNlIG9mIGBSdW5uYWJsZVRvb2xMaWtlYC5cbiAqIEByZXR1cm5zIHt0b29sIGlzIFJ1bm5hYmxlVG9vbExpa2V9IFdoZXRoZXIgdGhlIGlucHV0dGVkIHRvb2wgaXMgYW4gaW5zdGFuY2Ugb2YgYFJ1bm5hYmxlVG9vbExpa2VgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZVRvb2xMaWtlKHRvb2wpIHtcbiAgICByZXR1cm4gKHRvb2wgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBSdW5uYWJsZS5pc1J1bm5hYmxlKHRvb2wpICYmXG4gICAgICAgIFwibGNfbmFtZVwiIGluIHRvb2wuY29uc3RydWN0b3IgJiZcbiAgICAgICAgdHlwZW9mIHRvb2wuY29uc3RydWN0b3IubGNfbmFtZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHRvb2wuY29uc3RydWN0b3IubGNfbmFtZSgpID09PSBcIlJ1bm5hYmxlVG9vbExpa2VcIik7XG59XG4vKipcbiAqIENvbmZpcm0gd2hldGhlciBvciBub3QgdGhlIHRvb2wgY29udGFpbnMgdGhlIG5lY2Vzc2FyeSBwcm9wZXJ0aWVzIHRvIGJlIGNvbnNpZGVyZWQgYSBgU3RydWN0dXJlZFRvb2xQYXJhbXNgLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93biB8IHVuZGVmaW5lZH0gdG9vbCBUaGUgb2JqZWN0IHRvIGNoZWNrIGlmIGl0IGlzIGEgYFN0cnVjdHVyZWRUb29sUGFyYW1zYC5cbiAqIEByZXR1cm5zIHt0b29sIGlzIFN0cnVjdHVyZWRUb29sUGFyYW1zfSBXaGV0aGVyIHRoZSBpbnB1dHRlZCBvYmplY3QgaXMgYSBgU3RydWN0dXJlZFRvb2xQYXJhbXNgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJ1Y3R1cmVkVG9vbFBhcmFtcyh0b29sKSB7XG4gICAgcmV0dXJuICghIXRvb2wgJiZcbiAgICAgICAgdHlwZW9mIHRvb2wgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJuYW1lXCIgaW4gdG9vbCAmJlxuICAgICAgICBcInNjaGVtYVwiIGluIHRvb2wgJiZcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgKGlzSW50ZXJvcFpvZFNjaGVtYSh0b29sLnNjaGVtYSkgfHxcbiAgICAgICAgICAgICh0b29sLnNjaGVtYSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRvb2wuc2NoZW1hID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCIgaW4gdG9vbC5zY2hlbWEgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdG9vbC5zY2hlbWEudHlwZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIFtcIm51bGxcIiwgXCJib29sZWFuXCIsIFwib2JqZWN0XCIsIFwiYXJyYXlcIiwgXCJudW1iZXJcIiwgXCJzdHJpbmdcIl0uaW5jbHVkZXModG9vbC5zY2hlbWEudHlwZSkpKSk7XG59XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoZSB0b29sIGlzIG9uZSBvZiBTdHJ1Y3R1cmVkVG9vbCwgUnVubmFibGVUb29sIG9yIFN0cnVjdHVyZWRUb29sUGFyYW1zLlxuICogSXQgcmV0dXJucyBgaXMgU3RydWN0dXJlZFRvb2xQYXJhbXNgIHNpbmNlIHRoYXQgaXMgdGhlIG1vc3QgbWluaW1hbCBpbnRlcmZhY2Ugb2YgdGhlIHRocmVlLFxuICogd2hpbGUgc3RpbGwgY29udGFpbmluZyB0aGUgbmVjZXNzYXJ5IHByb3BlcnRpZXMgdG8gYmUgcGFzc2VkIHRvIGEgTExNIGZvciB0b29sIGNhbGxpbmcuXG4gKlxuICogQHBhcmFtIHt1bmtub3duIHwgdW5kZWZpbmVkfSB0b29sIFRoZSB0b29sIHRvIGNoZWNrIGlmIGl0IGlzIGEgTGFuZ0NoYWluIHRvb2wuXG4gKiBAcmV0dXJucyB7dG9vbCBpcyBTdHJ1Y3R1cmVkVG9vbFBhcmFtc30gV2hldGhlciB0aGUgaW5wdXR0ZWQgdG9vbCBpcyBhIExhbmdDaGFpbiB0b29sLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMYW5nQ2hhaW5Ub29sKHRvb2wpIHtcbiAgICByZXR1cm4gKGlzU3RydWN0dXJlZFRvb2xQYXJhbXModG9vbCkgfHxcbiAgICAgICAgaXNSdW5uYWJsZVRvb2xMaWtlKHRvb2wpIHx8XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGlzU3RydWN0dXJlZFRvb2wodG9vbCkpO1xufVxuIl0sIm5hbWVzIjpbIlJ1bm5hYmxlIiwiaXNJbnRlcm9wWm9kU2NoZW1hIiwiaXNTdHJ1Y3R1cmVkVG9vbCIsInRvb2wiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJsY19uYW1lc3BhY2UiLCJpc1J1bm5hYmxlVG9vbExpa2UiLCJpc1J1bm5hYmxlIiwiY29uc3RydWN0b3IiLCJsY19uYW1lIiwiaXNTdHJ1Y3R1cmVkVG9vbFBhcmFtcyIsInNjaGVtYSIsInR5cGUiLCJpbmNsdWRlcyIsImlzTGFuZ0NoYWluVG9vbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolInputParsingException: () => (/* binding */ ToolInputParsingException),\n/* harmony export */   _configHasToolCallId: () => (/* binding */ _configHasToolCallId),\n/* harmony export */   _isToolCall: () => (/* binding */ _isToolCall)\n/* harmony export */ });\nfunction _isToolCall(toolCall) {\n    return !!(toolCall && typeof toolCall === \"object\" && \"type\" in toolCall && toolCall.type === \"tool_call\");\n}\nfunction _configHasToolCallId(config) {\n    return !!(config && typeof config === \"object\" && \"toolCall\" in config && config.toolCall != null && typeof config.toolCall === \"object\" && \"id\" in config.toolCall && typeof config.toolCall.id === \"string\");\n}\n/**\n * Custom error class used to handle exceptions related to tool input parsing.\n * It extends the built-in `Error` class and adds an optional `output`\n * property that can hold the output that caused the exception.\n */ class ToolInputParsingException extends Error {\n    constructor(message, output){\n        super(message);\n        Object.defineProperty(this, \"output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.output = output;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sU0FBU0EsWUFBWUMsUUFBUTtJQUNoQyxPQUFPLENBQUMsQ0FBRUEsQ0FBQUEsWUFDTixPQUFPQSxhQUFhLFlBQ3BCLFVBQVVBLFlBQ1ZBLFNBQVNDLElBQUksS0FBSyxXQUFVO0FBQ3BDO0FBQ08sU0FBU0MscUJBQXFCQyxNQUFNO0lBQ3ZDLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxVQUNOLE9BQU9BLFdBQVcsWUFDbEIsY0FBY0EsVUFDZEEsT0FBT0gsUUFBUSxJQUFJLFFBQ25CLE9BQU9HLE9BQU9ILFFBQVEsS0FBSyxZQUMzQixRQUFRRyxPQUFPSCxRQUFRLElBQ3ZCLE9BQU9HLE9BQU9ILFFBQVEsQ0FBQ0ksRUFBRSxLQUFLLFFBQU87QUFDN0M7QUFDQTs7OztDQUlDLEdBQ00sTUFBTUMsa0NBQWtDQztJQUMzQ0MsWUFBWUMsT0FBTyxFQUFFQyxNQUFNLENBQUU7UUFDekIsS0FBSyxDQUFDRDtRQUNORSxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ04sTUFBTSxHQUFHQTtJQUNsQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3Rvb2xzL3V0aWxzLmpzP2U5NDkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIF9pc1Rvb2xDYWxsKHRvb2xDYWxsKSB7XG4gICAgcmV0dXJuICEhKHRvb2xDYWxsICYmXG4gICAgICAgIHR5cGVvZiB0b29sQ2FsbCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcInR5cGVcIiBpbiB0b29sQ2FsbCAmJlxuICAgICAgICB0b29sQ2FsbC50eXBlID09PSBcInRvb2xfY2FsbFwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfY29uZmlnSGFzVG9vbENhbGxJZChjb25maWcpIHtcbiAgICByZXR1cm4gISEoY29uZmlnICYmXG4gICAgICAgIHR5cGVvZiBjb25maWcgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJ0b29sQ2FsbFwiIGluIGNvbmZpZyAmJlxuICAgICAgICBjb25maWcudG9vbENhbGwgIT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgY29uZmlnLnRvb2xDYWxsID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIFwiaWRcIiBpbiBjb25maWcudG9vbENhbGwgJiZcbiAgICAgICAgdHlwZW9mIGNvbmZpZy50b29sQ2FsbC5pZCA9PT0gXCJzdHJpbmdcIik7XG59XG4vKipcbiAqIEN1c3RvbSBlcnJvciBjbGFzcyB1c2VkIHRvIGhhbmRsZSBleGNlcHRpb25zIHJlbGF0ZWQgdG8gdG9vbCBpbnB1dCBwYXJzaW5nLlxuICogSXQgZXh0ZW5kcyB0aGUgYnVpbHQtaW4gYEVycm9yYCBjbGFzcyBhbmQgYWRkcyBhbiBvcHRpb25hbCBgb3V0cHV0YFxuICogcHJvcGVydHkgdGhhdCBjYW4gaG9sZCB0aGUgb3V0cHV0IHRoYXQgY2F1c2VkIHRoZSBleGNlcHRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG91dHB1dCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3V0cHV0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJfaXNUb29sQ2FsbCIsInRvb2xDYWxsIiwidHlwZSIsIl9jb25maWdIYXNUb29sQ2FsbElkIiwiY29uZmlnIiwiaWQiLCJUb29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvdXRwdXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer),\n/* harmony export */   isBaseTracer: () => (/* binding */ isBaseTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.js\");\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n// TODO: Remove and just use base LangSmith Run type\nconst convertRunTreeToRun = (runTree)=>{\n    if (!runTree) {\n        return undefined;\n    }\n    // Important that we return the raw run tree object since the reference\n    // is mutated in other places.\n    // TODO: Remove places where this is being done.\n    // eslint-disable-next-line no-param-reassign\n    runTree.events = runTree.events ?? [];\n    // eslint-disable-next-line no-param-reassign\n    runTree.child_runs = runTree.child_runs ?? [];\n    // TODO: Remove this cast and just use the LangSmith RunTree type.\n    return runTree;\n};\nfunction convertRunToRunTree(run, parentRun) {\n    if (!run) {\n        return undefined;\n    }\n    return new langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.RunTree({\n        ...run,\n        start_time: run._serialized_start_time ?? run.start_time,\n        parent_run: convertRunToRunTree(parentRun),\n        child_runs: run.child_runs.map((r)=>convertRunToRunTree(r)).filter((r)=>r !== undefined),\n        extra: {\n            ...run.extra,\n            runtime: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_2__.getRuntimeEnvironmentSync)()\n        },\n        tracingEnabled: false\n    });\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nfunction isBaseTracer(x) {\n    return typeof x._addRunToRunMap === \"function\";\n}\nclass BaseTracer extends _callbacks_base_js__WEBPACK_IMPORTED_MODULE_1__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        /** @deprecated Use `runTreeMap` instead. */ Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"runTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"usesRunTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    copy() {\n        return this;\n    }\n    getRunById(runId) {\n        if (runId === undefined) {\n            return undefined;\n        }\n        return this.usesRunTreeMap ? convertRunTreeToRun(this.runTreeMap.get(runId)) : this.runMap.get(runId);\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    _addRunToRunMap(run) {\n        const { dottedOrder: currentDottedOrder, microsecondPrecisionDatestring } = (0,langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.convertToDottedOrderFormat)(new Date(run.start_time).getTime(), run.id, run.execution_order);\n        const storedRun = {\n            ...run\n        };\n        const parentRun = this.getRunById(storedRun.parent_run_id);\n        if (storedRun.parent_run_id !== undefined) {\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder\n                    ].join(\".\");\n                    storedRun._serialized_start_time = microsecondPrecisionDatestring;\n                } else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            } else {\n            // This can happen naturally for callbacks added within a run\n            // console.debug(\n            //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n            // );\n            }\n        } else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n            storedRun._serialized_start_time = microsecondPrecisionDatestring;\n        }\n        if (this.usesRunTreeMap) {\n            const runTree = convertRunToRunTree(storedRun, parentRun);\n            if (runTree !== undefined) {\n                this.runTreeMap.set(storedRun.id, runTree);\n            }\n        } else {\n            this.runMap.set(storedRun.id, storedRun);\n        }\n        return storedRun;\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.getRunById(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        await this.onRunUpdate?.(run);\n        if (this.usesRunTreeMap) {\n            this.runTreeMap.delete(run.id);\n        } else {\n            this.runMap.delete(run.id);\n        }\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.getRunById(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    /**\n     * Create and add a run to the run map for LLM start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.getRunById(runId) ?? this._createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chat model start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.getRunById(runId) ?? this._createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId, _parentRunId, _tags, extraParams) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        run.extra = {\n            ...run.extra,\n            ...extraParams\n        };\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId, _parentRunId, _tags, extraParams) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        run.extra = {\n            ...run.extra,\n            ...extraParams\n        };\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chain start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const run = this.getRunById(runId) ?? this._createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name);\n        await this.onRunCreate?.(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.getRunById(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.getRunById(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for tool start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const run = this.getRunById(runId) ?? this._createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    /**\n     * Create and add a run to the run map for retriever start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const run = this.getRunById(runId) ?? this._createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run, token, {\n            chunk: fields?.chunk\n        });\n        return run;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/console.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/console.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction formatKVMapItem(value) {\n    if (typeof value === \"string\") {\n        return value.trim();\n    }\n    if (value === null || value === undefined) {\n        return value;\n    }\n    return tryJsonStringify(value, value.toString());\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */ class ConsoleCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${formatKVMapItem(run.inputs.input)}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${formatKVMapItem(run.outputs?.output)}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/event_stream.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStreamCallbackHandler: () => (/* binding */ EventStreamCallbackHandler),\n/* harmony export */   isStreamEventsHandler: () => (/* binding */ isStreamEventsHandler)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_ai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n\n\n\nfunction assignName({ name, serialized }) {\n    if (name !== undefined) {\n        return name;\n    }\n    if (serialized?.name !== undefined) {\n        return serialized.name;\n    } else if (serialized?.id !== undefined && Array.isArray(serialized?.id)) {\n        return serialized.id[serialized.id.length - 1];\n    }\n    return \"Unnamed\";\n}\nconst isStreamEventsHandler = (handler)=>handler.name === \"event_stream_tracer\";\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class EventStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"runInfoMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"tappedPromises\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"event_stream_tracer\"\n        });\n        Object.defineProperty(this, \"lc_prefer_streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.runType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.runType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, outputStream) {\n        const firstChunk = await outputStream.next();\n        if (firstChunk.done) {\n            return;\n        }\n        const runInfo = this.runInfoMap.get(runId);\n        // Run has finished, don't issue any stream events.\n        // An example of this is for runnables that use the default\n        // implementation of .stream(), which delegates to .invoke()\n        // and calls .onChainEnd() before passing it to the iterator.\n        if (runInfo === undefined) {\n            yield firstChunk.value;\n            return;\n        }\n        // Match format from handlers below\n        function _formatOutputChunk(eventType, data) {\n            if (eventType === \"llm\" && typeof data === \"string\") {\n                return new _outputs_js__WEBPACK_IMPORTED_MODULE_3__.GenerationChunk({\n                    text: data\n                });\n            }\n            return data;\n        }\n        let tappedPromise = this.tappedPromises.get(runId);\n        // if we are the first to tap, issue stream events\n        if (tappedPromise === undefined) {\n            let tappedPromiseResolver;\n            tappedPromise = new Promise((resolve)=>{\n                tappedPromiseResolver = resolve;\n            });\n            this.tappedPromises.set(runId, tappedPromise);\n            try {\n                const event = {\n                    event: `on_${runInfo.runType}_stream`,\n                    run_id: runId,\n                    name: runInfo.name,\n                    tags: runInfo.tags,\n                    metadata: runInfo.metadata,\n                    data: {}\n                };\n                await this.send({\n                    ...event,\n                    data: {\n                        chunk: _formatOutputChunk(runInfo.runType, firstChunk.value)\n                    }\n                }, runInfo);\n                yield firstChunk.value;\n                for await (const chunk of outputStream){\n                    // Don't yield tool and retriever stream events\n                    if (runInfo.runType !== \"tool\" && runInfo.runType !== \"retriever\") {\n                        await this.send({\n                            ...event,\n                            data: {\n                                chunk: _formatOutputChunk(runInfo.runType, chunk)\n                            }\n                        }, runInfo);\n                    }\n                    yield chunk;\n                }\n            } finally{\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tappedPromiseResolver();\n            // Don't delete from the promises map to keep track of which runs have been tapped.\n            }\n        } else {\n            // otherwise just pass through\n            yield firstChunk.value;\n            for await (const chunk of outputStream){\n                yield chunk;\n            }\n        }\n    }\n    async send(payload, run) {\n        if (this._includeRun(run)) {\n            await this.writer.write(payload);\n        }\n    }\n    async sendEndEvent(payload, run) {\n        const tappedPromise = this.tappedPromises.get(payload.run_id);\n        if (tappedPromise !== undefined) {\n            void tappedPromise.then(()=>{\n                void this.send(payload, run);\n            });\n        } else {\n            await this.send(payload, run);\n        }\n    }\n    async onLLMStart(run) {\n        const runName = assignName(run);\n        const runType = run.inputs.messages !== undefined ? \"chat_model\" : \"llm\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType,\n            inputs: run.inputs\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        const eventName = `on_${runType}_start`;\n        await this.send({\n            event: eventName,\n            data: {\n                input: run.inputs\n            },\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onLLMNewToken(run, token, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    kwargs) {\n        const runInfo = this.runInfoMap.get(run.id);\n        let chunk;\n        let eventName;\n        if (runInfo === undefined) {\n            throw new Error(`onLLMNewToken: Run ID ${run.id} not found in run map.`);\n        }\n        // Top-level streaming events are covered by tapOutputIterable\n        if (this.runInfoMap.size === 1) {\n            return;\n        }\n        if (runInfo.runType === \"chat_model\") {\n            eventName = \"on_chat_model_stream\";\n            if (kwargs?.chunk === undefined) {\n                chunk = new _messages_ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n                    content: token,\n                    id: `run-${run.id}`\n                });\n            } else {\n                chunk = kwargs.chunk.message;\n            }\n        } else if (runInfo.runType === \"llm\") {\n            eventName = \"on_llm_stream\";\n            if (kwargs?.chunk === undefined) {\n                chunk = new _outputs_js__WEBPACK_IMPORTED_MODULE_3__.GenerationChunk({\n                    text: token\n                });\n            } else {\n                chunk = kwargs.chunk;\n            }\n        } else {\n            throw new Error(`Unexpected run type ${runInfo.runType}`);\n        }\n        await this.send({\n            event: eventName,\n            data: {\n                chunk\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    async onLLMEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        let eventName;\n        if (runInfo === undefined) {\n            throw new Error(`onLLMEnd: Run ID ${run.id} not found in run map.`);\n        }\n        const generations = run.outputs?.generations;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let output;\n        if (runInfo.runType === \"chat_model\") {\n            for (const generation of generations ?? []){\n                if (output !== undefined) {\n                    break;\n                }\n                output = generation[0]?.message;\n            }\n            eventName = \"on_chat_model_end\";\n        } else if (runInfo.runType === \"llm\") {\n            output = {\n                generations: generations?.map((generation)=>{\n                    return generation.map((chunk)=>{\n                        return {\n                            text: chunk.text,\n                            generationInfo: chunk.generationInfo\n                        };\n                    });\n                }),\n                llmOutput: run.outputs?.llmOutput ?? {}\n            };\n            eventName = \"on_llm_end\";\n        } else {\n            throw new Error(`onLLMEnd: Unexpected run type: ${runInfo.runType}`);\n        }\n        await this.sendEndEvent({\n            event: eventName,\n            data: {\n                output,\n                input: runInfo.inputs\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    async onChainStart(run) {\n        const runName = assignName(run);\n        const runType = run.run_type ?? \"chain\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType: run.run_type\n        };\n        let eventData = {};\n        // Workaround Runnable core code not sending input when transform streaming.\n        if (run.inputs.input === \"\" && Object.keys(run.inputs).length === 1) {\n            eventData = {};\n            runInfo.inputs = {};\n        } else if (run.inputs.input !== undefined) {\n            eventData.input = run.inputs.input;\n            runInfo.inputs = run.inputs.input;\n        } else {\n            eventData.input = run.inputs;\n            runInfo.inputs = run.inputs;\n        }\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: `on_${runType}_start`,\n            data: eventData,\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onChainEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onChainEnd: Run ID ${run.id} not found in run map.`);\n        }\n        const eventName = `on_${run.run_type}_end`;\n        const inputs = run.inputs ?? runInfo.inputs ?? {};\n        const outputs = run.outputs?.output ?? run.outputs;\n        const data = {\n            output: outputs,\n            input: inputs\n        };\n        if (inputs.input && Object.keys(inputs).length === 1) {\n            data.input = inputs.input;\n            runInfo.inputs = inputs.input;\n        }\n        await this.sendEndEvent({\n            event: eventName,\n            data,\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata ?? {}\n        }, runInfo);\n    }\n    async onToolStart(run) {\n        const runName = assignName(run);\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType: \"tool\",\n            inputs: run.inputs ?? {}\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: \"on_tool_start\",\n            data: {\n                input: run.inputs ?? {}\n            },\n            name: runName,\n            run_id: run.id,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onToolEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onToolEnd: Run ID ${run.id} not found in run map.`);\n        }\n        if (runInfo.inputs === undefined) {\n            throw new Error(`onToolEnd: Run ID ${run.id} is a tool call, and is expected to have traced inputs.`);\n        }\n        const output = run.outputs?.output === undefined ? run.outputs : run.outputs.output;\n        await this.sendEndEvent({\n            event: \"on_tool_end\",\n            data: {\n                output,\n                input: runInfo.inputs\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    async onRetrieverStart(run) {\n        const runName = assignName(run);\n        const runType = \"retriever\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType,\n            inputs: {\n                query: run.inputs.query\n            }\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: \"on_retriever_start\",\n            data: {\n                input: {\n                    query: run.inputs.query\n                }\n            },\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onRetrieverEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onRetrieverEnd: Run ID ${run.id} not found in run map.`);\n        }\n        await this.sendEndEvent({\n            event: \"on_retriever_end\",\n            data: {\n                output: run.outputs?.documents ?? run.outputs,\n                input: runInfo.inputs\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleCustomEvent(eventName, data, runId) {\n        const runInfo = this.runInfoMap.get(runId);\n        if (runInfo === undefined) {\n            throw new Error(`handleCustomEvent: Run ID ${runId} not found in run map.`);\n        }\n        await this.send({\n            event: \"on_custom_event\",\n            run_id: runId,\n            name: eventName,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n            data\n        }, runInfo);\n    }\n    async finish() {\n        const pendingPromises = [\n            ...this.tappedPromises.values()\n        ];\n        void Promise.all(pendingPromises).finally(()=>{\n            void this.writer.close();\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/log_stream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogStreamCallbackHandler: () => (/* binding */ LogStreamCallbackHandler),\n/* harmony export */   RunLog: () => (/* binding */ RunLog),\n/* harmony export */   RunLogPatch: () => (/* binding */ RunLogPatch),\n/* harmony export */   isLogStreamHandler: () => (/* binding */ isLogStreamHandler)\n/* harmony export */ });\n/* harmony import */ var _utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_ai_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n\n\n\n\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */ class RunLogPatch {\n    constructor(fields){\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nclass RunLog extends RunLogPatch {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)(this.state, other.ops);\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nconst isLogStreamHandler = (handler)=>handler.name === \"log_stream_tracer\";\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */ async function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" + \"When inputs are added to streamLog they should be added with \" + \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined && Object.keys(outputs).length === 1 && outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class LogStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        Object.defineProperty(this, \"lc_prefer_streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output){\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk\n                            }\n                        ]\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {}\n                        }\n                    }\n                ]\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] = count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry\n                }\n            ]\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat)\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat)\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString()\n                });\n            }\n            const patch = new RunLogPatch({\n                ops\n            });\n            await this.writer.write(patch);\n        } finally{\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat)\n                        }\n                    ]\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            } else {\n                streamedOutputValue = new _messages_ai_js__WEBPACK_IMPORTED_MODULE_3__.AIMessageChunk({\n                    id: `run-${run.id}`,\n                    content: token\n                });\n            }\n        } else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue\n                }\n            ]\n        });\n        await this.writer.write(patch);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/root_listener.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootListenersTracer: () => (/* binding */ RootListenersTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\nclass RootListenersTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor({ config, onStart, onEnd, onError }){\n        super({\n            _awaitHandler: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */ Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */ persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            await this.argOnStart(run, this.config);\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                await this.argOnEnd(run, this.config);\n            }\n        } else if (this.argOnError) {\n            await this.argOnError(run, this.config);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBQ2hDLE1BQU1DLDRCQUE0QkQsZ0RBQVVBO0lBQy9DRSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRyxDQUFFO1FBQzlDLEtBQUssQ0FBQztZQUFFQyxlQUFlO1FBQUs7UUFDNUJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsNEJBQTRCLEdBQzVCTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1YsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ1csVUFBVSxHQUFHVjtRQUNsQixJQUFJLENBQUNXLFFBQVEsR0FBR1Y7UUFDaEIsSUFBSSxDQUFDVyxVQUFVLEdBQUdWO0lBQ3RCO0lBQ0E7Ozs7S0FJQyxHQUNEVyxXQUFXQyxDQUFDLEVBQUU7UUFDVixPQUFPQyxRQUFRQyxPQUFPO0lBQzFCO0lBQ0EsTUFBTUMsWUFBWUMsR0FBRyxFQUFFO1FBQ25CLElBQUksSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDYjtRQUNKO1FBQ0EsSUFBSSxDQUFDQSxNQUFNLEdBQUdELElBQUlFLEVBQUU7UUFDcEIsSUFBSSxJQUFJLENBQUNWLFVBQVUsRUFBRTtZQUNqQixNQUFNLElBQUksQ0FBQ0EsVUFBVSxDQUFDUSxLQUFLLElBQUksQ0FBQ25CLE1BQU07UUFDMUM7SUFDSjtJQUNBLE1BQU1zQixZQUFZSCxHQUFHLEVBQUU7UUFDbkIsSUFBSUEsSUFBSUUsRUFBRSxLQUFLLElBQUksQ0FBQ0QsTUFBTSxFQUFFO1lBQ3hCO1FBQ0o7UUFDQSxJQUFJLENBQUNELElBQUlJLEtBQUssRUFBRTtZQUNaLElBQUksSUFBSSxDQUFDWCxRQUFRLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLENBQUNBLFFBQVEsQ0FBQ08sS0FBSyxJQUFJLENBQUNuQixNQUFNO1lBQ3hDO1FBQ0osT0FDSyxJQUFJLElBQUksQ0FBQ2EsVUFBVSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxDQUFDQSxVQUFVLENBQUNNLEtBQUssSUFBSSxDQUFDbkIsTUFBTTtRQUMxQztJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzPzBkNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYWNlciB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCBjbGFzcyBSb290TGlzdGVuZXJzVHJhY2VyIGV4dGVuZHMgQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoeyBjb25maWcsIG9uU3RhcnQsIG9uRW5kLCBvbkVycm9yLCB9KSB7XG4gICAgICAgIHN1cGVyKHsgX2F3YWl0SGFuZGxlcjogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJSb290TGlzdGVuZXJzVHJhY2VyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBUaGUgUnVuJ3MgSUQuIFR5cGUgVVVJRCAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb290SWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29uZmlnXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFyZ09uU3RhcnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25FbmRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25FcnJvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5hcmdPblN0YXJ0ID0gb25TdGFydDtcbiAgICAgICAgdGhpcy5hcmdPbkVuZCA9IG9uRW5kO1xuICAgICAgICB0aGlzLmFyZ09uRXJyb3IgPSBvbkVycm9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgbGVnYWN5IG1ldGhvZCBvbmx5IGNhbGxlZCBvbmNlIGZvciBhbiBlbnRpcmUgcnVuIHRyZWVcbiAgICAgKiB0aGVyZWZvcmUgbm90IHVzZWZ1bCBoZXJlXG4gICAgICogQHBhcmFtIHtSdW59IF8gTm90IHVzZWRcbiAgICAgKi9cbiAgICBwZXJzaXN0UnVuKF8pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBhc3luYyBvblJ1bkNyZWF0ZShydW4pIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290SWQgPSBydW4uaWQ7XG4gICAgICAgIGlmICh0aGlzLmFyZ09uU3RhcnQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25TdGFydChydW4sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBvblJ1blVwZGF0ZShydW4pIHtcbiAgICAgICAgaWYgKHJ1bi5pZCAhPT0gdGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bi5lcnJvcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25FbmQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRW5kKHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYXJnT25FcnJvcikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPbkVycm9yKHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VUcmFjZXIiLCJSb290TGlzdGVuZXJzVHJhY2VyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJvblN0YXJ0Iiwib25FbmQiLCJvbkVycm9yIiwiX2F3YWl0SGFuZGxlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJhcmdPblN0YXJ0IiwiYXJnT25FbmQiLCJhcmdPbkVycm9yIiwicGVyc2lzdFJ1biIsIl8iLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9uUnVuQ3JlYXRlIiwicnVuIiwicm9vdElkIiwiaWQiLCJvblJ1blVwZGF0ZSIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var langsmith_run_trees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.js\");\n/* harmony import */ var langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! langsmith/singletons/traceable */ \"(rsc)/./node_modules/langsmith/singletons/traceable.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _singletons_tracer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../singletons/tracer.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js\");\n\n\n\n\n\nclass LangChainTracer extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"replicas\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"usesRunTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        const { exampleId, projectName, client, replicas } = fields;\n        this.projectName = projectName ?? (0,langsmith__WEBPACK_IMPORTED_MODULE_0__.getDefaultProjectName)();\n        this.replicas = replicas;\n        this.exampleId = exampleId;\n        this.client = client ?? (0,_singletons_tracer_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultLangChainClientSingleton)();\n        const traceableTree = LangChainTracer.getTraceableRunTree();\n        if (traceableTree) {\n            this.updateFromRunTree(traceableTree);\n        }\n    }\n    async persistRun(_run) {}\n    async onRunCreate(run) {\n        const runTree = this.getRunTreeWithTracingConfig(run.id);\n        await runTree?.postRun();\n    }\n    async onRunUpdate(run) {\n        const runTree = this.getRunTreeWithTracingConfig(run.id);\n        await runTree?.patchRun();\n    }\n    getRun(id) {\n        return this.runTreeMap.get(id);\n    }\n    updateFromRunTree(runTree) {\n        let rootRun = runTree;\n        const visited = new Set();\n        while(rootRun.parent_run){\n            if (visited.has(rootRun.id)) break;\n            visited.add(rootRun.id);\n            if (!rootRun.parent_run) break;\n            rootRun = rootRun.parent_run;\n        }\n        visited.clear();\n        const queue = [\n            rootRun\n        ];\n        while(queue.length > 0){\n            const current = queue.shift();\n            if (!current || visited.has(current.id)) continue;\n            visited.add(current.id);\n            this.runTreeMap.set(current.id, current);\n            if (current.child_runs) {\n                queue.push(...current.child_runs);\n            }\n        }\n        this.client = runTree.client ?? this.client;\n        this.replicas = runTree.replicas ?? this.replicas;\n        this.projectName = runTree.project_name ?? this.projectName;\n        this.exampleId = runTree.reference_example_id ?? this.exampleId;\n    }\n    getRunTreeWithTracingConfig(id) {\n        const runTree = this.runTreeMap.get(id);\n        if (!runTree) return undefined;\n        return new langsmith_run_trees__WEBPACK_IMPORTED_MODULE_1__.RunTree({\n            ...runTree,\n            client: this.client,\n            project_name: this.projectName,\n            replicas: this.replicas,\n            reference_example_id: this.exampleId,\n            tracingEnabled: true\n        });\n    }\n    static getTraceableRunTree() {\n        try {\n            return(// The type cast here provides forward compatibility. Old versions of LangSmith will just\n            // ignore the permitAbsentRunTree arg.\n            (0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_2__.getCurrentRunTree)(true));\n        } catch  {\n            return undefined;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/async_caller.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/callbacks.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTracingEnabled: () => (/* binding */ isTracingEnabled)\n/* harmony export */ });\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\nconst isTracingEnabled = (tracingEnabled)=>{\n    if (tracingEnabled !== undefined) {\n        return tracingEnabled;\n    }\n    const envVars = [\n        \"LANGSMITH_TRACING_V2\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGSMITH_TRACING\",\n        \"LANGCHAIN_TRACING\"\n    ];\n    return !!envVars.find((envVar)=>(0,_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(envVar) === \"true\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQzNDLE1BQU1DLG1CQUFtQixDQUFDQztJQUM3QixJQUFJQSxtQkFBbUJDLFdBQVc7UUFDOUIsT0FBT0Q7SUFDWDtJQUNBLE1BQU1FLFVBQVU7UUFDWjtRQUNBO1FBQ0E7UUFDQTtLQUNIO0lBQ0QsT0FBTyxDQUFDLENBQUNBLFFBQVFDLElBQUksQ0FBQyxDQUFDQyxTQUFXTiwrREFBc0JBLENBQUNNLFlBQVk7QUFDekUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9jYWxsYmFja3MuanM/YzczNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlIH0gZnJvbSBcIi4vZW52LmpzXCI7XG5leHBvcnQgY29uc3QgaXNUcmFjaW5nRW5hYmxlZCA9ICh0cmFjaW5nRW5hYmxlZCkgPT4ge1xuICAgIGlmICh0cmFjaW5nRW5hYmxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nRW5hYmxlZDtcbiAgICB9XG4gICAgY29uc3QgZW52VmFycyA9IFtcbiAgICAgICAgXCJMQU5HU01JVEhfVFJBQ0lOR19WMlwiLFxuICAgICAgICBcIkxBTkdDSEFJTl9UUkFDSU5HX1YyXCIsXG4gICAgICAgIFwiTEFOR1NNSVRIX1RSQUNJTkdcIixcbiAgICAgICAgXCJMQU5HQ0hBSU5fVFJBQ0lOR1wiLFxuICAgIF07XG4gICAgcmV0dXJuICEhZW52VmFycy5maW5kKChlbnZWYXIpID0+IGdldEVudmlyb25tZW50VmFyaWFibGUoZW52VmFyKSA9PT0gXCJ0cnVlXCIpO1xufTtcbiJdLCJuYW1lcyI6WyJnZXRFbnZpcm9ubWVudFZhcmlhYmxlIiwiaXNUcmFjaW5nRW5hYmxlZCIsInRyYWNpbmdFbmFibGVkIiwidW5kZWZpbmVkIiwiZW52VmFycyIsImZpbmQiLCJlbnZWYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/chunk_array.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* binding */ chunkArray)\n/* harmony export */ });\nconst chunkArray = (arr, chunkSize)=>arr.reduce((chunks, elem, index)=>{\n        const chunkIndex = Math.floor(index / chunkSize);\n        const chunk = chunks[chunkIndex] || [];\n        // eslint-disable-next-line no-param-reassign\n        chunks[chunkIndex] = chunk.concat([\n            elem\n        ]);\n        return chunks;\n    }, []);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGFBQWEsQ0FBQ0MsS0FBS0MsWUFBY0QsSUFBSUUsTUFBTSxDQUFDLENBQUNDLFFBQVFDLE1BQU1DO1FBQ3BFLE1BQU1DLGFBQWFDLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUUo7UUFDdEMsTUFBTVEsUUFBUU4sTUFBTSxDQUFDRyxXQUFXLElBQUksRUFBRTtRQUN0Qyw2Q0FBNkM7UUFDN0NILE1BQU0sQ0FBQ0csV0FBVyxHQUFHRyxNQUFNQyxNQUFNLENBQUM7WUFBQ047U0FBSztRQUN4QyxPQUFPRDtJQUNYLEdBQUcsRUFBRSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2NodW5rX2FycmF5LmpzP2MwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNodW5rQXJyYXkgPSAoYXJyLCBjaHVua1NpemUpID0+IGFyci5yZWR1Y2UoKGNodW5rcywgZWxlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBjaHVua0luZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIGNodW5rU2l6ZSk7XG4gICAgY29uc3QgY2h1bmsgPSBjaHVua3NbY2h1bmtJbmRleF0gfHwgW107XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgY2h1bmtzW2NodW5rSW5kZXhdID0gY2h1bmsuY29uY2F0KFtlbGVtXSk7XG4gICAgcmV0dXJuIGNodW5rcztcbn0sIFtdKTtcbiJdLCJuYW1lcyI6WyJjaHVua0FycmF5IiwiYXJyIiwiY2h1bmtTaXplIiwicmVkdWNlIiwiY2h1bmtzIiwiZWxlbSIsImluZGV4IiwiY2h1bmtJbmRleCIsIk1hdGgiLCJmbG9vciIsImNodW5rIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/env.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/env.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   getRuntimeEnvironmentSync: () => (/* binding */ getRuntimeEnvironmentSync),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && navigator.userAgent.includes(\"jsdom\");\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\n/**\n * @deprecated Use getRuntimeEnvironmentSync instead\n */ async function getRuntimeEnvironment() {\n    return getRuntimeEnvironmentSync();\n}\nfunction getRuntimeEnvironmentSync() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        if (typeof process !== \"undefined\") {\n            // eslint-disable-next-line no-process-env\n            return process.env?.[name];\n        } else if (isDeno()) {\n            return Deno?.env.get(name);\n        } else {\n            return undefined;\n        }\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLFlBQVksSUFBTSxNQUE2QixJQUFJLENBQXNDLENBQUM7QUFDaEcsTUFBTUcsY0FBYyxJQUFNLE9BQU9DLGVBQWUsWUFDbkRBLFdBQVdDLFdBQVcsSUFDdEJELFdBQVdDLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLLDZCQUE2QjtBQUMxRCxNQUFNQyxVQUFVLElBQU0sTUFBMEQsSUFDbEYsT0FBT0MsY0FBYyxlQUFlQSxVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxTQUFVO0FBQ2hGLHlEQUF5RDtBQUN6RCw2QkFBNkI7QUFDdEIsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFNBQVMsWUFBWTtBQUN4RCxnREFBZ0Q7QUFDekMsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFlBQVksZUFDM0MsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLLGVBQ2pDLENBQUNMLFNBQVM7QUFDUCxNQUFNTSxTQUFTO0lBQ2xCLElBQUlDO0lBQ0osSUFBSWxCLGFBQWE7UUFDYmtCLE1BQU07SUFDVixPQUNLLElBQUlMLFVBQVU7UUFDZkssTUFBTTtJQUNWLE9BQ0ssSUFBSWYsZUFBZTtRQUNwQmUsTUFBTTtJQUNWLE9BQ0ssSUFBSVgsV0FBVztRQUNoQlcsTUFBTTtJQUNWLE9BQ0ssSUFBSVAsVUFBVTtRQUNmTyxNQUFNO0lBQ1YsT0FDSztRQUNEQSxNQUFNO0lBQ1Y7SUFDQSxPQUFPQTtBQUNYLEVBQUU7QUFDRixJQUFJQztBQUNKOztDQUVDLEdBQ00sZUFBZUM7SUFDbEIsT0FBT0M7QUFDWDtBQUNPLFNBQVNBO0lBQ1osSUFBSUYsdUJBQXVCRyxXQUFXO1FBQ2xDLE1BQU1KLE1BQU1EO1FBQ1pFLHFCQUFxQjtZQUNqQkksU0FBUztZQUNUQyxTQUFTTjtRQUNiO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0FBQ08sU0FBU00sdUJBQXVCbkIsSUFBSTtJQUN2QyxxRkFBcUY7SUFDckYsMERBQTBEO0lBQzFELElBQUk7UUFDQSxJQUFJLE9BQU9RLFlBQVksYUFBYTtZQUNoQywwQ0FBMEM7WUFDMUMsT0FBT0EsUUFBUUksR0FBRyxFQUFFLENBQUNaLEtBQUs7UUFDOUIsT0FDSyxJQUFJSyxVQUFVO1lBQ2YsT0FBT0MsTUFBTU0sSUFBSVEsSUFBSXBCO1FBQ3pCLE9BQ0s7WUFDRCxPQUFPZ0I7UUFDWDtJQUNKLEVBQ0EsT0FBT0ssR0FBRztRQUNOLE9BQU9MO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9lbnYuanM/NDJmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNCcm93c2VyID0gKCkgPT4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuZXhwb3J0IGNvbnN0IGlzV2ViV29ya2VyID0gKCkgPT4gdHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIgJiZcbiAgICBnbG9iYWxUaGlzLmNvbnN0cnVjdG9yICYmXG4gICAgZ2xvYmFsVGhpcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkRlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXCI7XG5leHBvcnQgY29uc3QgaXNKc0RvbSA9ICgpID0+ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5uYW1lID09PSBcIm5vZGVqc1wiKSB8fFxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJqc2RvbVwiKSk7XG4vLyBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uIHByb3ZpZGVzIGEgYERlbm9gIGdsb2JhbCBvYmplY3Rcbi8vIHdpdGhvdXQgYHZlcnNpb25gIHByb3BlcnR5XG5leHBvcnQgY29uc3QgaXNEZW5vID0gKCkgPT4gdHlwZW9mIERlbm8gIT09IFwidW5kZWZpbmVkXCI7XG4vLyBNYXJrIG5vdC1hcy1ub2RlIGlmIGluIFN1cGFiYXNlIEVkZ2UgRnVuY3Rpb25cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAoKSA9PiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICFpc0Rlbm8oKTtcbmV4cG9ydCBjb25zdCBnZXRFbnYgPSAoKSA9PiB7XG4gICAgbGV0IGVudjtcbiAgICBpZiAoaXNCcm93c2VyKCkpIHtcbiAgICAgICAgZW52ID0gXCJicm93c2VyXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZSgpKSB7XG4gICAgICAgIGVudiA9IFwibm9kZVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1dlYldvcmtlcigpKSB7XG4gICAgICAgIGVudiA9IFwid2Vid29ya2VyXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzSnNEb20oKSkge1xuICAgICAgICBlbnYgPSBcImpzZG9tXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRGVubygpKSB7XG4gICAgICAgIGVudiA9IFwiZGVub1wiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW52ID0gXCJvdGhlclwiO1xuICAgIH1cbiAgICByZXR1cm4gZW52O1xufTtcbmxldCBydW50aW1lRW52aXJvbm1lbnQ7XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBnZXRSdW50aW1lRW52aXJvbm1lbnRTeW5jIGluc3RlYWRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJ1bnRpbWVFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gZ2V0UnVudGltZUVudmlyb25tZW50U3luYygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJ1bnRpbWVFbnZpcm9ubWVudFN5bmMoKSB7XG4gICAgaWYgKHJ1bnRpbWVFbnZpcm9ubWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVudiA9IGdldEVudigpO1xuICAgICAgICBydW50aW1lRW52aXJvbm1lbnQgPSB7XG4gICAgICAgICAgICBsaWJyYXJ5OiBcImxhbmdjaGFpbi1qc1wiLFxuICAgICAgICAgICAgcnVudGltZTogZW52LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcnVudGltZUVudmlyb25tZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudmlyb25tZW50VmFyaWFibGUobmFtZSkge1xuICAgIC8vIENlcnRhaW4gRGVubyBzZXR1cHMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB5b3UgdHJ5IHRvIGFjY2VzcyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbGFuZ2NoYWluLWFpL2xhbmdjaGFpbmpzL2lzc3Vlcy8xNDEyXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLmVudj8uW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRGVubygpKSB7XG4gICAgICAgICAgICByZXR1cm4gRGVubz8uZW52LmdldChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJpc1dlYldvcmtlciIsImdsb2JhbFRoaXMiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJpc0pzRG9tIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0Rlbm8iLCJEZW5vIiwiaXNOb2RlIiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsImdldEVudiIsImVudiIsInJ1bnRpbWVFbnZpcm9ubWVudCIsImdldFJ1bnRpbWVFbnZpcm9ubWVudCIsImdldFJ1bnRpbWVFbnZpcm9ubWVudFN5bmMiLCJ1bmRlZmluZWQiLCJsaWJyYXJ5IiwicnVudGltZSIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJnZXQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError),\n/* harmony export */   _areEquals: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__._areEquals),\n/* harmony export */   applyOperation: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyOperation),\n/* harmony export */   applyPatch: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   applyReducer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyReducer),\n/* harmony export */   compare: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.compare),\n/* harmony export */   deepClone: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   escapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent),\n/* harmony export */   generate: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.generate),\n/* harmony export */   getValueByPointer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.getValueByPointer),\n/* harmony export */   observe: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.observe),\n/* harmony export */   unescapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent),\n/* harmony export */   unobserve: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.unobserve),\n/* harmony export */   validate: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validate),\n/* harmony export */   validator: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validator)\n/* harmony export */ });\n/* harmony import */ var _src_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n/* harmony import */ var _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/duplex.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\");\n/* harmony import */ var _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n\n\n\n/**\n * Default export for backwards compat\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ..._src_core_js__WEBPACK_IMPORTED_MODULE_0__,\n    // ...duplex,\n    JsonPatchError: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError,\n    deepClone: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone,\n    escapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent,\n    unescapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDRTtBQUNzRztBQUN0STs7Q0FFQyxHQUNxQztBQUNnRztBQUN0SSxpRUFBZTtJQUNYLEdBQUdNLHlDQUFJO0lBQ1AsYUFBYTtJQUNiTCxjQUFjQSx5REFBQUE7SUFDZEUsU0FBU0EseURBQUFBO0lBQ1RDLG1CQUFtQkEsa0VBQUFBO0lBQ25CQyxxQkFBcUJBLG9FQUFBQTtBQUN6QixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzPzRjOTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3JjL2NvcmUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NyYy9kdXBsZXguanNcIjtcbmV4cG9ydCB7IFBhdGNoRXJyb3IgYXMgSnNvblBhdGNoRXJyb3IsIF9kZWVwQ2xvbmUgYXMgZGVlcENsb25lLCBlc2NhcGVQYXRoQ29tcG9uZW50LCB1bmVzY2FwZVBhdGhDb21wb25lbnQsIH0gZnJvbSBcIi4vc3JjL2hlbHBlcnMuanNcIjtcbi8qKlxuICogRGVmYXVsdCBleHBvcnQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwiLi9zcmMvY29yZS5qc1wiO1xuaW1wb3J0IHsgUGF0Y2hFcnJvciBhcyBKc29uUGF0Y2hFcnJvciwgX2RlZXBDbG9uZSBhcyBkZWVwQ2xvbmUsIGVzY2FwZVBhdGhDb21wb25lbnQsIHVuZXNjYXBlUGF0aENvbXBvbmVudCwgfSBmcm9tIFwiLi9zcmMvaGVscGVycy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIC4uLmNvcmUsXG4gICAgLy8gLi4uZHVwbGV4LFxuICAgIEpzb25QYXRjaEVycm9yLFxuICAgIGRlZXBDbG9uZSxcbiAgICBlc2NhcGVQYXRoQ29tcG9uZW50LFxuICAgIHVuZXNjYXBlUGF0aENvbXBvbmVudCxcbn07XG4iXSwibmFtZXMiOlsiUGF0Y2hFcnJvciIsIkpzb25QYXRjaEVycm9yIiwiX2RlZXBDbG9uZSIsImRlZXBDbG9uZSIsImVzY2FwZVBhdGhDb21wb25lbnQiLCJ1bmVzY2FwZVBhdGhDb21wb25lbnQiLCJjb3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* binding */ JsonPatchError),\n/* harmony export */   _areEquals: () => (/* binding */ _areEquals),\n/* harmony export */   applyOperation: () => (/* binding */ applyOperation),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyReducer: () => (/* binding */ applyReducer),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   getValueByPointer: () => (/* binding */ getValueByPointer),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n// @ts-nocheck\n\nconst JsonPatchError = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.PatchError;\nconst deepClone = _helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */ /* The operations applicable to an object */ const objOps = {\n    add: function(obj, key, document) {\n        obj[key] = this.value;\n        return {\n            newDocument: document\n        };\n    },\n    remove: function(obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    replace: function(obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: function(obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */ let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue\n        });\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    copy: function(obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(valueToCopy)\n        });\n        return {\n            newDocument: document\n        };\n    },\n    test: function(obj, key, document) {\n        return {\n            newDocument: document,\n            test: _areEquals(obj[key], this.value)\n        };\n    },\n    _get: function(obj, key, document) {\n        this.value = obj[key];\n        return {\n            newDocument: document\n        };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */ var arrOps = {\n    add: function(arr, i, document) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        } else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return {\n            newDocument: document,\n            index: i\n        };\n    },\n    remove: function(arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return {\n            newDocument: document,\n            removed: removedList[0]\n        };\n    },\n    replace: function(arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */ function getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = {\n        op: \"_get\",\n        path: pointer\n    };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */ function applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        } else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */ if (operation.path === \"\") {\n        let returnValue = {\n            newDocument: document\n        };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        } else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        } else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        } else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        } else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        } else {\n            /* bad operation */ if (validateOperation) {\n                throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            } else {\n                return returnValue;\n            }\n        }\n    } else {\n        if (!mutateDocument) {\n            document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        } else {\n            validateFunction = validator;\n        }\n        while(true){\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications && (key == \"__proto__\" || key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\")) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    } else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                } else {\n                    if (validateOperation && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            } else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */ function applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for(let i = 0, length = patch.length; i < length; i++){\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */ function applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */ function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    } else if (!objOps[operation.op]) {\n        throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    } else if (typeof operation.path !== \"string\") {\n        throw new JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if ((operation.op === \"move\" || operation.op === \"copy\") && typeof operation.from !== \"string\") {\n        throw new JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && operation.value === undefined) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasUndefined)(operation.value)) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    } else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        } else if (operation.op === \"replace\" || operation.op === \"remove\" || operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined\n            };\n            var error = validate([\n                existingValue\n            ], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */ function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document), (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(sequence), externalValidator || true);\n        } else {\n            externalValidator = externalValidator || validator;\n            for(var i = 0; i < sequence.length; i++){\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    } catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        } else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!_areEquals(a[i], b[i])) return false;\n            return true;\n        }\n        if (arrA != arrB) return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            key = keys[i];\n            if (!_areEquals(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   unobserve: () => (/* binding */ unobserve)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */ \n\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj){\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer){\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */ function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */ function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    } else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = ()=>{\n            generate(observer);\n        };\n        var fastCheck = ()=>{\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (false) {}\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = ()=>{\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (false) {}\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */ function generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(obj);\n    var oldKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for(var t = oldKeys.length - 1; t >= 0; t--){\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key), invertible);\n            } else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                        value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(newVal)\n                    });\n                }\n            }\n        } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                    value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key)\n            });\n            deleted = true; // property has been deleted\n        } else {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path,\n                    value: mirror\n                });\n            }\n            patches.push({\n                op: \"replace\",\n                path,\n                value: obj\n            });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for(var t = 0; t < newKeys.length; t++){\n        var key = newKeys[t];\n        if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj[key])\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */ function compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PatchError: () => (/* binding */ PatchError),\n/* harmony export */   _deepClone: () => (/* binding */ _deepClone),\n/* harmony export */   _getPathRecursive: () => (/* binding */ _getPathRecursive),\n/* harmony export */   _objectKeys: () => (/* binding */ _objectKeys),\n/* harmony export */   escapePathComponent: () => (/* binding */ escapePathComponent),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   hasUndefined: () => (/* binding */ hasUndefined),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   unescapePathComponent: () => (/* binding */ unescapePathComponent)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */ const _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for(let k = 0; k < keys.length; k++){\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for(let i in obj){\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */ function _deepClone(obj) {\n    switch(typeof obj){\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while(i < len){\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */ function escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */ function unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for(let key in root){\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            } else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */ function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for(let i = 0, len = obj.length; i < len; i++){\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        } else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for(var i = 0; i < objKeysLength; i++){\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [\n        message\n    ];\n    for(const key in args){\n        const value = typeof args[key] === \"object\" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree){\n        super(patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/function_calling.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIFunction: () => (/* binding */ convertToOpenAIFunction),\n/* harmony export */   convertToOpenAITool: () => (/* binding */ convertToOpenAITool),\n/* harmony export */   isLangChainTool: () => (/* reexport safe */ _tools_types_js__WEBPACK_IMPORTED_MODULE_0__.isLangChainTool),\n/* harmony export */   isRunnableToolLike: () => (/* reexport safe */ _tools_types_js__WEBPACK_IMPORTED_MODULE_0__.isRunnableToolLike),\n/* harmony export */   isStructuredTool: () => (/* reexport safe */ _tools_types_js__WEBPACK_IMPORTED_MODULE_0__.isStructuredTool),\n/* harmony export */   isStructuredToolParams: () => (/* reexport safe */ _tools_types_js__WEBPACK_IMPORTED_MODULE_0__.isStructuredToolParams)\n/* harmony export */ });\n/* harmony import */ var _tools_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/types.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/types.js\");\n/* harmony import */ var _json_schema_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./json_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n\n// These utility functions were moved to a more appropriate location,\n// but we still export them here for backwards compatibility.\n\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\n * that is compatible with OpenAI function calling. If `StructuredTool` or\n * `RunnableToolLike` has a zod schema, the output will be converted into a\n * JSON schema, which is then used as the parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\n */ function convertToOpenAIFunction(tool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: (0,_json_schema_js__WEBPACK_IMPORTED_MODULE_1__.toJsonSchema)(tool.schema),\n        // Do not include the `strict` field if it is `undefined`.\n        ...fieldsCopy?.strict !== undefined ? {\n            strict: fieldsCopy.strict\n        } : {}\n    };\n}\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\n * format that is compatible with OpenAI tool calling. If `StructuredTool` or\n * `RunnableToolLike` has a zod schema, the output will be converted into a\n * JSON schema, which is then used as the parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */ function convertToOpenAITool(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    let toolDef;\n    if ((0,_tools_types_js__WEBPACK_IMPORTED_MODULE_0__.isLangChainTool)(tool)) {\n        toolDef = {\n            type: \"function\",\n            function: convertToOpenAIFunction(tool)\n        };\n    } else {\n        toolDef = tool;\n    }\n    if (fieldsCopy?.strict !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        toolDef.function.strict = fieldsCopy.strict;\n    }\n    return toolDef;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZnVuY3Rpb25fY2FsbGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFxRDtBQUNMO0FBQ2hELHFFQUFxRTtBQUNyRSw2REFBNkQ7QUFDc0Q7QUFDbkg7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTSyx3QkFBd0JDLElBQUksRUFBRUMsTUFBTTtJQUNoRCx5Q0FBeUM7SUFDekMsTUFBTUMsYUFBYSxPQUFPRCxXQUFXLFdBQVdFLFlBQVlGO0lBQzVELE9BQU87UUFDSEcsTUFBTUosS0FBS0ksSUFBSTtRQUNmQyxhQUFhTCxLQUFLSyxXQUFXO1FBQzdCQyxZQUFZWCw2REFBWUEsQ0FBQ0ssS0FBS08sTUFBTTtRQUNwQywwREFBMEQ7UUFDMUQsR0FBSUwsWUFBWU0sV0FBV0wsWUFBWTtZQUFFSyxRQUFRTixXQUFXTSxNQUFNO1FBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0U7QUFDSjtBQUNBOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0Msb0JBQ2hCLDhEQUE4RDtBQUM5RFQsSUFBSSxFQUFFQyxNQUFNO0lBQ1IseUNBQXlDO0lBQ3pDLE1BQU1DLGFBQWEsT0FBT0QsV0FBVyxXQUFXRSxZQUFZRjtJQUM1RCxJQUFJUztJQUNKLElBQUloQixnRUFBZUEsQ0FBQ00sT0FBTztRQUN2QlUsVUFBVTtZQUNOQyxNQUFNO1lBQ05DLFVBQVViLHdCQUF3QkM7UUFDdEM7SUFDSixPQUNLO1FBQ0RVLFVBQVVWO0lBQ2Q7SUFDQSxJQUFJRSxZQUFZTSxXQUFXTCxXQUFXO1FBQ2xDLDhEQUE4RDtRQUM5RE8sUUFBUUUsUUFBUSxDQUFDSixNQUFNLEdBQUdOLFdBQVdNLE1BQU07SUFDL0M7SUFDQSxPQUFPRTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuanM/OTQ0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0xhbmdDaGFpblRvb2wsIH0gZnJvbSBcIi4uL3Rvb2xzL3R5cGVzLmpzXCI7XG5pbXBvcnQgeyB0b0pzb25TY2hlbWEgfSBmcm9tIFwiLi9qc29uX3NjaGVtYS5qc1wiO1xuLy8gVGhlc2UgdXRpbGl0eSBmdW5jdGlvbnMgd2VyZSBtb3ZlZCB0byBhIG1vcmUgYXBwcm9wcmlhdGUgbG9jYXRpb24sXG4vLyBidXQgd2Ugc3RpbGwgZXhwb3J0IHRoZW0gaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5leHBvcnQgeyBpc1N0cnVjdHVyZWRUb29sLCBpc1N0cnVjdHVyZWRUb29sUGFyYW1zLCBpc1J1bm5hYmxlVG9vbExpa2UsIGlzTGFuZ0NoYWluVG9vbCwgfSBmcm9tIFwiLi4vdG9vbHMvdHlwZXMuanNcIjtcbi8qKlxuICogRm9ybWF0cyBhIGBTdHJ1Y3R1cmVkVG9vbGAgb3IgYFJ1bm5hYmxlVG9vbExpa2VgIGluc3RhbmNlIGludG8gYSBmb3JtYXRcbiAqIHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIE9wZW5BSSBmdW5jdGlvbiBjYWxsaW5nLiBJZiBgU3RydWN0dXJlZFRvb2xgIG9yXG4gKiBgUnVubmFibGVUb29sTGlrZWAgaGFzIGEgem9kIHNjaGVtYSwgdGhlIG91dHB1dCB3aWxsIGJlIGNvbnZlcnRlZCBpbnRvIGFcbiAqIEpTT04gc2NoZW1hLCB3aGljaCBpcyB0aGVuIHVzZWQgYXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBPcGVuQUkgdG9vbC5cbiAqXG4gKiBAcGFyYW0ge1N0cnVjdHVyZWRUb29sSW50ZXJmYWNlIHwgUnVubmFibGVUb29sTGlrZX0gdG9vbCBUaGUgdG9vbCB0byBjb252ZXJ0IHRvIGFuIE9wZW5BSSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbkRlZmluaXRpb259IFRoZSBpbnB1dHRlZCB0b29sIGluIE9wZW5BSSBmdW5jdGlvbiBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9PcGVuQUlGdW5jdGlvbih0b29sLCBmaWVsZHMpIHtcbiAgICAvLyBAVE9ETyAwLjMuMCBSZW1vdmUgdGhlIGBudW1iZXJgIHR5cGluZ1xuICAgIGNvbnN0IGZpZWxkc0NvcHkgPSB0eXBlb2YgZmllbGRzID09PSBcIm51bWJlclwiID8gdW5kZWZpbmVkIDogZmllbGRzO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgIHBhcmFtZXRlcnM6IHRvSnNvblNjaGVtYSh0b29sLnNjaGVtYSksXG4gICAgICAgIC8vIERvIG5vdCBpbmNsdWRlIHRoZSBgc3RyaWN0YCBmaWVsZCBpZiBpdCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgICAgLi4uKGZpZWxkc0NvcHk/LnN0cmljdCAhPT0gdW5kZWZpbmVkID8geyBzdHJpY3Q6IGZpZWxkc0NvcHkuc3RyaWN0IH0gOiB7fSksXG4gICAgfTtcbn1cbi8qKlxuICogRm9ybWF0cyBhIGBTdHJ1Y3R1cmVkVG9vbGAgb3IgYFJ1bm5hYmxlVG9vbExpa2VgIGluc3RhbmNlIGludG8gYVxuICogZm9ybWF0IHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIE9wZW5BSSB0b29sIGNhbGxpbmcuIElmIGBTdHJ1Y3R1cmVkVG9vbGAgb3JcbiAqIGBSdW5uYWJsZVRvb2xMaWtlYCBoYXMgYSB6b2Qgc2NoZW1hLCB0aGUgb3V0cHV0IHdpbGwgYmUgY29udmVydGVkIGludG8gYVxuICogSlNPTiBzY2hlbWEsIHdoaWNoIGlzIHRoZW4gdXNlZCBhcyB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIE9wZW5BSSB0b29sLlxuICpcbiAqIEBwYXJhbSB7U3RydWN0dXJlZFRvb2xJbnRlcmZhY2UgfCBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgUnVubmFibGVUb29sTGlrZX0gdG9vbCBUaGUgdG9vbCB0byBjb252ZXJ0IHRvIGFuIE9wZW5BSSB0b29sLlxuICogQHJldHVybnMge1Rvb2xEZWZpbml0aW9ufSBUaGUgaW5wdXR0ZWQgdG9vbCBpbiBPcGVuQUkgdG9vbCBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9PcGVuQUlUb29sKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnRvb2wsIGZpZWxkcykge1xuICAgIC8vIEBUT0RPIDAuMy4wIFJlbW92ZSB0aGUgYG51bWJlcmAgdHlwaW5nXG4gICAgY29uc3QgZmllbGRzQ29weSA9IHR5cGVvZiBmaWVsZHMgPT09IFwibnVtYmVyXCIgPyB1bmRlZmluZWQgOiBmaWVsZHM7XG4gICAgbGV0IHRvb2xEZWY7XG4gICAgaWYgKGlzTGFuZ0NoYWluVG9vbCh0b29sKSkge1xuICAgICAgICB0b29sRGVmID0ge1xuICAgICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgICAgZnVuY3Rpb246IGNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uKHRvb2wpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdG9vbERlZiA9IHRvb2w7XG4gICAgfVxuICAgIGlmIChmaWVsZHNDb3B5Py5zdHJpY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0b29sRGVmLmZ1bmN0aW9uLnN0cmljdCA9IGZpZWxkc0NvcHkuc3RyaWN0O1xuICAgIH1cbiAgICByZXR1cm4gdG9vbERlZjtcbn1cbiJdLCJuYW1lcyI6WyJpc0xhbmdDaGFpblRvb2wiLCJ0b0pzb25TY2hlbWEiLCJpc1N0cnVjdHVyZWRUb29sIiwiaXNTdHJ1Y3R1cmVkVG9vbFBhcmFtcyIsImlzUnVubmFibGVUb29sTGlrZSIsImNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uIiwidG9vbCIsImZpZWxkcyIsImZpZWxkc0NvcHkiLCJ1bmRlZmluZWQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJwYXJhbWV0ZXJzIiwic2NoZW1hIiwic3RyaWN0IiwiY29udmVydFRvT3BlbkFJVG9vbCIsInRvb2xEZWYiLCJ0eXBlIiwiZnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/hash.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/hash.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* reexport safe */ _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash),\n/* harmony export */   sha256: () => (/* reexport safe */ _js_sha256_hash_js__WEBPACK_IMPORTED_MODULE_1__.sha256)\n/* harmony export */ });\n/* harmony import */ var _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-sha1/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\");\n/* harmony import */ var _js_sha256_hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js-sha256/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha256/hash.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5qcz80YjRiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGluc2VjdXJlSGFzaCB9IGZyb20gXCIuL2pzLXNoYTEvaGFzaC5qc1wiO1xuZXhwb3J0IHsgc2hhMjU2IH0gZnJvbSBcIi4vanMtc2hhMjU2L2hhc2guanNcIjtcbiJdLCJuYW1lcyI6WyJpbnNlY3VyZUhhc2giLCJzaGEyNTYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha1/hash.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* binding */ insecureHash)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */ /*jslint bitwise: true */ \nvar root =  false ? 0 : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [\n    -2147483648,\n    8388608,\n    32768,\n    128\n];\nvar SHIFT = [\n    24,\n    16,\n    8,\n    0\n];\nvar OUTPUT_TYPES = [\n    \"hex\",\n    \"array\",\n    \"digest\",\n    \"arrayBuffer\"\n];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        this.blocks = blocks;\n    } else {\n        this.blocks = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function(message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while(index < length){\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        if (notString) {\n            for(i = this.start; index < length && i < 64; ++index){\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = this.start; index < length && i < 64; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        } else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += this.bytes / 4294967296 << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function() {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function() {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for(j = 16; j < 80; ++j){\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = t << 1 | t >>> 31;\n    }\n    for(j = 0; j < 20; j += 5){\n        f = b & c | ~b & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1518500249 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | ~a & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | ~e & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | ~d & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | ~c & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 40; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1859775393 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 60; j += 5){\n        f = b & c | b & d | c & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 1894007588 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | a & c | b & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | e & b | a & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | d & a | e & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | c & e | d & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 80; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 899497514 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 899497514 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 899497514 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 899497514 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 899497514 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n};\nSha1.prototype.hex = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return HEX_CHARS[h0 >> 28 & 0x0f] + HEX_CHARS[h0 >> 24 & 0x0f] + HEX_CHARS[h0 >> 20 & 0x0f] + HEX_CHARS[h0 >> 16 & 0x0f] + HEX_CHARS[h0 >> 12 & 0x0f] + HEX_CHARS[h0 >> 8 & 0x0f] + HEX_CHARS[h0 >> 4 & 0x0f] + HEX_CHARS[h0 & 0x0f] + HEX_CHARS[h1 >> 28 & 0x0f] + HEX_CHARS[h1 >> 24 & 0x0f] + HEX_CHARS[h1 >> 20 & 0x0f] + HEX_CHARS[h1 >> 16 & 0x0f] + HEX_CHARS[h1 >> 12 & 0x0f] + HEX_CHARS[h1 >> 8 & 0x0f] + HEX_CHARS[h1 >> 4 & 0x0f] + HEX_CHARS[h1 & 0x0f] + HEX_CHARS[h2 >> 28 & 0x0f] + HEX_CHARS[h2 >> 24 & 0x0f] + HEX_CHARS[h2 >> 20 & 0x0f] + HEX_CHARS[h2 >> 16 & 0x0f] + HEX_CHARS[h2 >> 12 & 0x0f] + HEX_CHARS[h2 >> 8 & 0x0f] + HEX_CHARS[h2 >> 4 & 0x0f] + HEX_CHARS[h2 & 0x0f] + HEX_CHARS[h3 >> 28 & 0x0f] + HEX_CHARS[h3 >> 24 & 0x0f] + HEX_CHARS[h3 >> 20 & 0x0f] + HEX_CHARS[h3 >> 16 & 0x0f] + HEX_CHARS[h3 >> 12 & 0x0f] + HEX_CHARS[h3 >> 8 & 0x0f] + HEX_CHARS[h3 >> 4 & 0x0f] + HEX_CHARS[h3 & 0x0f] + HEX_CHARS[h4 >> 28 & 0x0f] + HEX_CHARS[h4 >> 24 & 0x0f] + HEX_CHARS[h4 >> 20 & 0x0f] + HEX_CHARS[h4 >> 16 & 0x0f] + HEX_CHARS[h4 >> 12 & 0x0f] + HEX_CHARS[h4 >> 8 & 0x0f] + HEX_CHARS[h4 >> 4 & 0x0f] + HEX_CHARS[h4 & 0x0f];\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        h0 >> 24 & 0xff,\n        h0 >> 16 & 0xff,\n        h0 >> 8 & 0xff,\n        h0 & 0xff,\n        h1 >> 24 & 0xff,\n        h1 >> 16 & 0xff,\n        h1 >> 8 & 0xff,\n        h1 & 0xff,\n        h2 >> 24 & 0xff,\n        h2 >> 16 & 0xff,\n        h2 >> 8 & 0xff,\n        h2 & 0xff,\n        h3 >> 24 & 0xff,\n        h3 >> 16 & 0xff,\n        h3 >> 8 & 0xff,\n        h3 & 0xff,\n        h4 >> 24 & 0xff,\n        h4 >> 16 & 0xff,\n        h4 >> 8 & 0xff,\n        h4 & 0xff\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function() {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nlet hasLoggedWarning = false;\n/**\n * @deprecated Use `makeDefaultKeyEncoder()` to create a custom key encoder.\n * This function will be removed in a future version.\n */ const insecureHash = (message)=>{\n    if (!hasLoggedWarning) {\n        console.warn([\n            `The default method for hashing keys is insecure and will be replaced in a future version,`,\n            `but hasn't been replaced yet as to not break existing caches. It's recommended that you use`,\n            `a more secure hashing algorithm to avoid cache poisoning.`,\n            ``,\n            `See this page for more information:`,\n            `|`,\n            `└> https://js.langchain.com/docs/troubleshooting/warnings/insecure-cache-algorithm`\n        ].join(\"\\n\"));\n        hasLoggedWarning = true;\n    }\n    return new Sha1(true).update(message)[\"hex\"]();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha256/hash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha256/hash.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.11.1\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2025\n * @license MIT\n */ /*jslint bitwise: true */ \nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [\n    -2147483648,\n    8388608,\n    32768,\n    128\n];\nvar SHIFT = [\n    24,\n    16,\n    8,\n    0\n];\nvar K = [\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n];\nvar OUTPUT_TYPES = [\n    \"hex\",\n    \"array\",\n    \"digest\",\n    \"arrayBuffer\"\n];\nvar blocks = [];\nfunction Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        this.blocks = blocks;\n    } else {\n        this.blocks = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    if (is224) {\n        this.h0 = 0xc1059ed8;\n        this.h1 = 0x367cd507;\n        this.h2 = 0x3070dd17;\n        this.h3 = 0xf70e5939;\n        this.h4 = 0xffc00b31;\n        this.h5 = 0x68581511;\n        this.h6 = 0x64f98fa7;\n        this.h7 = 0xbefa4fa4;\n    } else {\n        // 256\n        this.h0 = 0x6a09e667;\n        this.h1 = 0xbb67ae85;\n        this.h2 = 0x3c6ef372;\n        this.h3 = 0xa54ff53a;\n        this.h4 = 0x510e527f;\n        this.h5 = 0x9b05688c;\n        this.h6 = 0x1f83d9ab;\n        this.h7 = 0x5be0cd19;\n    }\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n}\nSha256.prototype.update = function(message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString, type = typeof message;\n    if (type !== \"string\") {\n        if (type === \"object\") {\n            if (message === null) {\n                throw new Error(ERROR);\n            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                message = new Uint8Array(message);\n            } else if (!Array.isArray(message)) {\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                    throw new Error(ERROR);\n                }\n            }\n        } else {\n            throw new Error(ERROR);\n        }\n        notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    while(index < length){\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            this.block = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        if (notString) {\n            for(i = this.start; index < length && i < 64; ++index){\n                blocks[i >>> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = this.start; index < length && i < 64; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >>> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >>> 2] |= (0xc0 | code >>> 6) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >>> 2] |= (0xe0 | code >>> 12) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | code >>> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >>> 2] |= (0xf0 | code >>> 18) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | code >>> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | code >>> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        } else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += this.bytes / 4294967296 << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha256.prototype.finalize = function() {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >>> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha256.prototype.hash = function() {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n    for(j = 16; j < 64; ++j){\n        // rightrotate\n        t1 = blocks[j - 15];\n        s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;\n        t1 = blocks[j - 2];\n        s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;\n        blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n    bc = b & c;\n    for(j = 0; j < 64; j += 4){\n        if (this.first) {\n            if (this.is224) {\n                ab = 300032;\n                t1 = blocks[0] - 1413257819;\n                h = t1 - 150054599 << 0;\n                d = t1 + 24177077 << 0;\n            } else {\n                ab = 704751109;\n                t1 = blocks[0] - 210244248;\n                h = t1 - 1521486534 << 0;\n                d = t1 + 143694565 << 0;\n            }\n            this.first = false;\n        } else {\n            s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);\n            s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);\n            ab = a & b;\n            maj = ab ^ a & c ^ bc;\n            ch = e & f ^ ~e & g;\n            t1 = h + s1 + ch + K[j] + blocks[j];\n            t2 = s0 + maj;\n            h = d + t1 << 0;\n            d = t1 + t2 << 0;\n        }\n        s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);\n        s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);\n        da = d & a;\n        maj = da ^ d & b ^ ab;\n        ch = g & h ^ ~g & e;\n        t1 = f + s1 + ch + K[j + 1] + blocks[j + 1];\n        t2 = s0 + maj;\n        g = c + t1 << 0;\n        c = t1 + t2 << 0;\n        s0 = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10);\n        s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);\n        cd = c & d;\n        maj = cd ^ c & a ^ da;\n        ch = f & g ^ ~f & h;\n        t1 = e + s1 + ch + K[j + 2] + blocks[j + 2];\n        t2 = s0 + maj;\n        f = b + t1 << 0;\n        b = t1 + t2 << 0;\n        s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);\n        s1 = (f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7);\n        bc = b & c;\n        maj = bc ^ b & d ^ cd;\n        ch = f & g ^ ~f & h;\n        t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n        t2 = s0 + maj;\n        e = a + t1 << 0;\n        a = t1 + t2 << 0;\n        this.chromeBugWorkAround = true;\n    }\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n};\nSha256.prototype.hex = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n    var hex = HEX_CHARS[h0 >>> 28 & 0x0f] + HEX_CHARS[h0 >>> 24 & 0x0f] + HEX_CHARS[h0 >>> 20 & 0x0f] + HEX_CHARS[h0 >>> 16 & 0x0f] + HEX_CHARS[h0 >>> 12 & 0x0f] + HEX_CHARS[h0 >>> 8 & 0x0f] + HEX_CHARS[h0 >>> 4 & 0x0f] + HEX_CHARS[h0 & 0x0f] + HEX_CHARS[h1 >>> 28 & 0x0f] + HEX_CHARS[h1 >>> 24 & 0x0f] + HEX_CHARS[h1 >>> 20 & 0x0f] + HEX_CHARS[h1 >>> 16 & 0x0f] + HEX_CHARS[h1 >>> 12 & 0x0f] + HEX_CHARS[h1 >>> 8 & 0x0f] + HEX_CHARS[h1 >>> 4 & 0x0f] + HEX_CHARS[h1 & 0x0f] + HEX_CHARS[h2 >>> 28 & 0x0f] + HEX_CHARS[h2 >>> 24 & 0x0f] + HEX_CHARS[h2 >>> 20 & 0x0f] + HEX_CHARS[h2 >>> 16 & 0x0f] + HEX_CHARS[h2 >>> 12 & 0x0f] + HEX_CHARS[h2 >>> 8 & 0x0f] + HEX_CHARS[h2 >>> 4 & 0x0f] + HEX_CHARS[h2 & 0x0f] + HEX_CHARS[h3 >>> 28 & 0x0f] + HEX_CHARS[h3 >>> 24 & 0x0f] + HEX_CHARS[h3 >>> 20 & 0x0f] + HEX_CHARS[h3 >>> 16 & 0x0f] + HEX_CHARS[h3 >>> 12 & 0x0f] + HEX_CHARS[h3 >>> 8 & 0x0f] + HEX_CHARS[h3 >>> 4 & 0x0f] + HEX_CHARS[h3 & 0x0f] + HEX_CHARS[h4 >>> 28 & 0x0f] + HEX_CHARS[h4 >>> 24 & 0x0f] + HEX_CHARS[h4 >>> 20 & 0x0f] + HEX_CHARS[h4 >>> 16 & 0x0f] + HEX_CHARS[h4 >>> 12 & 0x0f] + HEX_CHARS[h4 >>> 8 & 0x0f] + HEX_CHARS[h4 >>> 4 & 0x0f] + HEX_CHARS[h4 & 0x0f] + HEX_CHARS[h5 >>> 28 & 0x0f] + HEX_CHARS[h5 >>> 24 & 0x0f] + HEX_CHARS[h5 >>> 20 & 0x0f] + HEX_CHARS[h5 >>> 16 & 0x0f] + HEX_CHARS[h5 >>> 12 & 0x0f] + HEX_CHARS[h5 >>> 8 & 0x0f] + HEX_CHARS[h5 >>> 4 & 0x0f] + HEX_CHARS[h5 & 0x0f] + HEX_CHARS[h6 >>> 28 & 0x0f] + HEX_CHARS[h6 >>> 24 & 0x0f] + HEX_CHARS[h6 >>> 20 & 0x0f] + HEX_CHARS[h6 >>> 16 & 0x0f] + HEX_CHARS[h6 >>> 12 & 0x0f] + HEX_CHARS[h6 >>> 8 & 0x0f] + HEX_CHARS[h6 >>> 4 & 0x0f] + HEX_CHARS[h6 & 0x0f];\n    if (!this.is224) {\n        hex += HEX_CHARS[h7 >>> 28 & 0x0f] + HEX_CHARS[h7 >>> 24 & 0x0f] + HEX_CHARS[h7 >>> 20 & 0x0f] + HEX_CHARS[h7 >>> 16 & 0x0f] + HEX_CHARS[h7 >>> 12 & 0x0f] + HEX_CHARS[h7 >>> 8 & 0x0f] + HEX_CHARS[h7 >>> 4 & 0x0f] + HEX_CHARS[h7 & 0x0f];\n    }\n    return hex;\n};\nSha256.prototype.toString = Sha256.prototype.hex;\nSha256.prototype.digest = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n    var arr = [\n        h0 >>> 24 & 0xff,\n        h0 >>> 16 & 0xff,\n        h0 >>> 8 & 0xff,\n        h0 & 0xff,\n        h1 >>> 24 & 0xff,\n        h1 >>> 16 & 0xff,\n        h1 >>> 8 & 0xff,\n        h1 & 0xff,\n        h2 >>> 24 & 0xff,\n        h2 >>> 16 & 0xff,\n        h2 >>> 8 & 0xff,\n        h2 & 0xff,\n        h3 >>> 24 & 0xff,\n        h3 >>> 16 & 0xff,\n        h3 >>> 8 & 0xff,\n        h3 & 0xff,\n        h4 >>> 24 & 0xff,\n        h4 >>> 16 & 0xff,\n        h4 >>> 8 & 0xff,\n        h4 & 0xff,\n        h5 >>> 24 & 0xff,\n        h5 >>> 16 & 0xff,\n        h5 >>> 8 & 0xff,\n        h5 & 0xff,\n        h6 >>> 24 & 0xff,\n        h6 >>> 16 & 0xff,\n        h6 >>> 8 & 0xff,\n        h6 & 0xff\n    ];\n    if (!this.is224) {\n        arr.push(h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 & 0xff);\n    }\n    return arr;\n};\nSha256.prototype.array = Sha256.prototype.digest;\nSha256.prototype.arrayBuffer = function() {\n    this.finalize();\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n        dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n};\nconst sha256 = (...strings)=>{\n    return new Sha256(false, true).update(strings.join(\"\")).hex();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha256/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseJsonMarkdown: () => (/* binding */ parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson)\n/* harmony export */ });\nfunction parseJsonMarkdown(s, parser = parsePartialJson) {\n    // eslint-disable-next-line no-param-reassign\n    s = s.trim();\n    const firstFenceIndex = s.indexOf(\"```\");\n    if (firstFenceIndex === -1) {\n        return parser(s);\n    }\n    let contentAfterFence = s.substring(firstFenceIndex + 3);\n    if (contentAfterFence.startsWith(\"json\\n\")) {\n        contentAfterFence = contentAfterFence.substring(5);\n    } else if (contentAfterFence.startsWith(\"json\")) {\n        contentAfterFence = contentAfterFence.substring(4);\n    } else if (contentAfterFence.startsWith(\"\\n\")) {\n        contentAfterFence = contentAfterFence.substring(1);\n    }\n    const closingFenceIndex = contentAfterFence.indexOf(\"```\");\n    let finalContent = contentAfterFence;\n    if (closingFenceIndex !== -1) {\n        finalContent = contentAfterFence.substring(0, closingFenceIndex);\n    }\n    return parser(finalContent.trim());\n}\n// Adapted from https://github.com/KillianLucas/open-interpreter/blob/main/interpreter/core/llm/utils/parse_partial_json.py\n// MIT License\nfunction parsePartialJson(s) {\n    // If the input is undefined, return null to indicate failure.\n    if (typeof s === \"undefined\") {\n        return null;\n    }\n    // Attempt to parse the string as-is.\n    try {\n        return JSON.parse(s);\n    } catch (error) {\n    // Pass\n    }\n    // Initialize variables.\n    let new_s = \"\";\n    const stack = [];\n    let isInsideString = false;\n    let escaped = false;\n    // Process each character in the string one at a time.\n    for (let char of s){\n        if (isInsideString) {\n            if (char === '\"' && !escaped) {\n                isInsideString = false;\n            } else if (char === \"\\n\" && !escaped) {\n                char = \"\\\\n\"; // Replace the newline character with the escape sequence.\n            } else if (char === \"\\\\\") {\n                escaped = !escaped;\n            } else {\n                escaped = false;\n            }\n        } else {\n            if (char === '\"') {\n                isInsideString = true;\n                escaped = false;\n            } else if (char === \"{\") {\n                stack.push(\"}\");\n            } else if (char === \"[\") {\n                stack.push(\"]\");\n            } else if (char === \"}\" || char === \"]\") {\n                if (stack && stack[stack.length - 1] === char) {\n                    stack.pop();\n                } else {\n                    // Mismatched closing character; the input is malformed.\n                    return null;\n                }\n            }\n        }\n        // Append the processed character to the new string.\n        new_s += char;\n    }\n    // If we're still inside a string at the end of processing,\n    // we need to close the string.\n    if (isInsideString) {\n        new_s += '\"';\n    }\n    // Close any remaining open structures in the reverse order that they were opened.\n    for(let i = stack.length - 1; i >= 0; i -= 1){\n        new_s += stack[i];\n    }\n    // Attempt to parse the modified string as JSON.\n    try {\n        return JSON.parse(new_s);\n    } catch (error) {\n        // If we still can't parse the string as JSON, return null to indicate failure.\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLGtCQUFrQkMsQ0FBQyxFQUFFQyxTQUFTQyxnQkFBZ0I7SUFDMUQsNkNBQTZDO0lBQzdDRixJQUFJQSxFQUFFRyxJQUFJO0lBQ1YsTUFBTUMsa0JBQWtCSixFQUFFSyxPQUFPLENBQUM7SUFDbEMsSUFBSUQsb0JBQW9CLENBQUMsR0FBRztRQUN4QixPQUFPSCxPQUFPRDtJQUNsQjtJQUNBLElBQUlNLG9CQUFvQk4sRUFBRU8sU0FBUyxDQUFDSCxrQkFBa0I7SUFDdEQsSUFBSUUsa0JBQWtCRSxVQUFVLENBQUMsV0FBVztRQUN4Q0Ysb0JBQW9CQSxrQkFBa0JDLFNBQVMsQ0FBQztJQUNwRCxPQUNLLElBQUlELGtCQUFrQkUsVUFBVSxDQUFDLFNBQVM7UUFDM0NGLG9CQUFvQkEsa0JBQWtCQyxTQUFTLENBQUM7SUFDcEQsT0FDSyxJQUFJRCxrQkFBa0JFLFVBQVUsQ0FBQyxPQUFPO1FBQ3pDRixvQkFBb0JBLGtCQUFrQkMsU0FBUyxDQUFDO0lBQ3BEO0lBQ0EsTUFBTUUsb0JBQW9CSCxrQkFBa0JELE9BQU8sQ0FBQztJQUNwRCxJQUFJSyxlQUFlSjtJQUNuQixJQUFJRyxzQkFBc0IsQ0FBQyxHQUFHO1FBQzFCQyxlQUFlSixrQkFBa0JDLFNBQVMsQ0FBQyxHQUFHRTtJQUNsRDtJQUNBLE9BQU9SLE9BQU9TLGFBQWFQLElBQUk7QUFDbkM7QUFDQSwySEFBMkg7QUFDM0gsY0FBYztBQUNQLFNBQVNELGlCQUFpQkYsQ0FBQztJQUM5Qiw4REFBOEQ7SUFDOUQsSUFBSSxPQUFPQSxNQUFNLGFBQWE7UUFDMUIsT0FBTztJQUNYO0lBQ0EscUNBQXFDO0lBQ3JDLElBQUk7UUFDQSxPQUFPVyxLQUFLQyxLQUFLLENBQUNaO0lBQ3RCLEVBQ0EsT0FBT2EsT0FBTztJQUNWLE9BQU87SUFDWDtJQUNBLHdCQUF3QjtJQUN4QixJQUFJQyxRQUFRO0lBQ1osTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLElBQUlDLGlCQUFpQjtJQUNyQixJQUFJQyxVQUFVO0lBQ2Qsc0RBQXNEO0lBQ3RELEtBQUssSUFBSUMsUUFBUWxCLEVBQUc7UUFDaEIsSUFBSWdCLGdCQUFnQjtZQUNoQixJQUFJRSxTQUFTLE9BQU8sQ0FBQ0QsU0FBUztnQkFDMUJELGlCQUFpQjtZQUNyQixPQUNLLElBQUlFLFNBQVMsUUFBUSxDQUFDRCxTQUFTO2dCQUNoQ0MsT0FBTyxPQUFPLDBEQUEwRDtZQUM1RSxPQUNLLElBQUlBLFNBQVMsTUFBTTtnQkFDcEJELFVBQVUsQ0FBQ0E7WUFDZixPQUNLO2dCQUNEQSxVQUFVO1lBQ2Q7UUFDSixPQUNLO1lBQ0QsSUFBSUMsU0FBUyxLQUFLO2dCQUNkRixpQkFBaUI7Z0JBQ2pCQyxVQUFVO1lBQ2QsT0FDSyxJQUFJQyxTQUFTLEtBQUs7Z0JBQ25CSCxNQUFNSSxJQUFJLENBQUM7WUFDZixPQUNLLElBQUlELFNBQVMsS0FBSztnQkFDbkJILE1BQU1JLElBQUksQ0FBQztZQUNmLE9BQ0ssSUFBSUQsU0FBUyxPQUFPQSxTQUFTLEtBQUs7Z0JBQ25DLElBQUlILFNBQVNBLEtBQUssQ0FBQ0EsTUFBTUssTUFBTSxHQUFHLEVBQUUsS0FBS0YsTUFBTTtvQkFDM0NILE1BQU1NLEdBQUc7Z0JBQ2IsT0FDSztvQkFDRCx3REFBd0Q7b0JBQ3hELE9BQU87Z0JBQ1g7WUFDSjtRQUNKO1FBQ0Esb0RBQW9EO1FBQ3BEUCxTQUFTSTtJQUNiO0lBQ0EsMkRBQTJEO0lBQzNELCtCQUErQjtJQUMvQixJQUFJRixnQkFBZ0I7UUFDaEJGLFNBQVM7SUFDYjtJQUNBLGtGQUFrRjtJQUNsRixJQUFLLElBQUlRLElBQUlQLE1BQU1LLE1BQU0sR0FBRyxHQUFHRSxLQUFLLEdBQUdBLEtBQUssRUFBRztRQUMzQ1IsU0FBU0MsS0FBSyxDQUFDTyxFQUFFO0lBQ3JCO0lBQ0EsZ0RBQWdEO0lBQ2hELElBQUk7UUFDQSxPQUFPWCxLQUFLQyxLQUFLLENBQUNFO0lBQ3RCLEVBQ0EsT0FBT0QsT0FBTztRQUNWLCtFQUErRTtRQUMvRSxPQUFPO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9qc29uLmpzP2E2ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnNvbk1hcmtkb3duKHMsIHBhcnNlciA9IHBhcnNlUGFydGlhbEpzb24pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBzID0gcy50cmltKCk7XG4gICAgY29uc3QgZmlyc3RGZW5jZUluZGV4ID0gcy5pbmRleE9mKFwiYGBgXCIpO1xuICAgIGlmIChmaXJzdEZlbmNlSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIocyk7XG4gICAgfVxuICAgIGxldCBjb250ZW50QWZ0ZXJGZW5jZSA9IHMuc3Vic3RyaW5nKGZpcnN0RmVuY2VJbmRleCArIDMpO1xuICAgIGlmIChjb250ZW50QWZ0ZXJGZW5jZS5zdGFydHNXaXRoKFwianNvblxcblwiKSkge1xuICAgICAgICBjb250ZW50QWZ0ZXJGZW5jZSA9IGNvbnRlbnRBZnRlckZlbmNlLnN1YnN0cmluZyg1KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udGVudEFmdGVyRmVuY2Uuc3RhcnRzV2l0aChcImpzb25cIikpIHtcbiAgICAgICAgY29udGVudEFmdGVyRmVuY2UgPSBjb250ZW50QWZ0ZXJGZW5jZS5zdWJzdHJpbmcoNCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnRlbnRBZnRlckZlbmNlLnN0YXJ0c1dpdGgoXCJcXG5cIikpIHtcbiAgICAgICAgY29udGVudEFmdGVyRmVuY2UgPSBjb250ZW50QWZ0ZXJGZW5jZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGNvbnN0IGNsb3NpbmdGZW5jZUluZGV4ID0gY29udGVudEFmdGVyRmVuY2UuaW5kZXhPZihcImBgYFwiKTtcbiAgICBsZXQgZmluYWxDb250ZW50ID0gY29udGVudEFmdGVyRmVuY2U7XG4gICAgaWYgKGNsb3NpbmdGZW5jZUluZGV4ICE9PSAtMSkge1xuICAgICAgICBmaW5hbENvbnRlbnQgPSBjb250ZW50QWZ0ZXJGZW5jZS5zdWJzdHJpbmcoMCwgY2xvc2luZ0ZlbmNlSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VyKGZpbmFsQ29udGVudC50cmltKCkpO1xufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9LaWxsaWFuTHVjYXMvb3Blbi1pbnRlcnByZXRlci9ibG9iL21haW4vaW50ZXJwcmV0ZXIvY29yZS9sbG0vdXRpbHMvcGFyc2VfcGFydGlhbF9qc29uLnB5XG4vLyBNSVQgTGljZW5zZVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGFydGlhbEpzb24ocykge1xuICAgIC8vIElmIHRoZSBpbnB1dCBpcyB1bmRlZmluZWQsIHJldHVybiBudWxsIHRvIGluZGljYXRlIGZhaWx1cmUuXG4gICAgaWYgKHR5cGVvZiBzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIHRoZSBzdHJpbmcgYXMtaXMuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uocyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBQYXNzXG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdmFyaWFibGVzLlxuICAgIGxldCBuZXdfcyA9IFwiXCI7XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICBsZXQgaXNJbnNpZGVTdHJpbmcgPSBmYWxzZTtcbiAgICBsZXQgZXNjYXBlZCA9IGZhbHNlO1xuICAgIC8vIFByb2Nlc3MgZWFjaCBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZyBvbmUgYXQgYSB0aW1lLlxuICAgIGZvciAobGV0IGNoYXIgb2Ygcykge1xuICAgICAgICBpZiAoaXNJbnNpZGVTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChjaGFyID09PSAnXCInICYmICFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgaXNJbnNpZGVTdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiXFxuXCIgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICBjaGFyID0gXCJcXFxcblwiOyAvLyBSZXBsYWNlIHRoZSBuZXdsaW5lIGNoYXJhY3RlciB3aXRoIHRoZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaGFyID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgaXNJbnNpZGVTdHJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwie1wiKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChcIn1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIltcIikge1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goXCJdXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJ9XCIgfHwgY2hhciA9PT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2sgJiYgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPT09IGNoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNaXNtYXRjaGVkIGNsb3NpbmcgY2hhcmFjdGVyOyB0aGUgaW5wdXQgaXMgbWFsZm9ybWVkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwZW5kIHRoZSBwcm9jZXNzZWQgY2hhcmFjdGVyIHRvIHRoZSBuZXcgc3RyaW5nLlxuICAgICAgICBuZXdfcyArPSBjaGFyO1xuICAgIH1cbiAgICAvLyBJZiB3ZSdyZSBzdGlsbCBpbnNpZGUgYSBzdHJpbmcgYXQgdGhlIGVuZCBvZiBwcm9jZXNzaW5nLFxuICAgIC8vIHdlIG5lZWQgdG8gY2xvc2UgdGhlIHN0cmluZy5cbiAgICBpZiAoaXNJbnNpZGVTdHJpbmcpIHtcbiAgICAgICAgbmV3X3MgKz0gJ1wiJztcbiAgICB9XG4gICAgLy8gQ2xvc2UgYW55IHJlbWFpbmluZyBvcGVuIHN0cnVjdHVyZXMgaW4gdGhlIHJldmVyc2Ugb3JkZXIgdGhhdCB0aGV5IHdlcmUgb3BlbmVkLlxuICAgIGZvciAobGV0IGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBuZXdfcyArPSBzdGFja1tpXTtcbiAgICB9XG4gICAgLy8gQXR0ZW1wdCB0byBwYXJzZSB0aGUgbW9kaWZpZWQgc3RyaW5nIGFzIEpTT04uXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobmV3X3MpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSWYgd2Ugc3RpbGwgY2FuJ3QgcGFyc2UgdGhlIHN0cmluZyBhcyBKU09OLCByZXR1cm4gbnVsbCB0byBpbmRpY2F0ZSBmYWlsdXJlLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsicGFyc2VKc29uTWFya2Rvd24iLCJzIiwicGFyc2VyIiwicGFyc2VQYXJ0aWFsSnNvbiIsInRyaW0iLCJmaXJzdEZlbmNlSW5kZXgiLCJpbmRleE9mIiwiY29udGVudEFmdGVyRmVuY2UiLCJzdWJzdHJpbmciLCJzdGFydHNXaXRoIiwiY2xvc2luZ0ZlbmNlSW5kZXgiLCJmaW5hbENvbnRlbnQiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsIm5ld19zIiwic3RhY2siLCJpc0luc2lkZVN0cmluZyIsImVzY2FwZWQiLCJjaGFyIiwicHVzaCIsImxlbmd0aCIsInBvcCIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json_patch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* reexport safe */ _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   compare: () => (/* reexport safe */ _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.compare)\n/* harmony export */ });\n/* harmony import */ var _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5qcz9jNGE1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGNvbXBhcmUsIGFwcGx5UGF0Y2gsIH0gZnJvbSBcIi4vZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzXCI7XG4iXSwibmFtZXMiOlsiY29tcGFyZSIsImFwcGx5UGF0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json_schema.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: () => (/* reexport safe */ _cfworker_json_schema__WEBPACK_IMPORTED_MODULE_1__.Validator),\n/* harmony export */   deepCompareStrict: () => (/* reexport safe */ _cfworker_json_schema__WEBPACK_IMPORTED_MODULE_1__.deepCompareStrict),\n/* harmony export */   toJsonSchema: () => (/* binding */ toJsonSchema),\n/* harmony export */   validatesOnlyStrings: () => (/* binding */ validatesOnlyStrings)\n/* harmony export */ });\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/to-json-schema.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _cfworker_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/index.js\");\n/* harmony import */ var _types_zod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/zod.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\");\n\n\n\n\n\n/**\n * Converts a Zod schema or JSON schema to a JSON schema.\n * @param schema - The schema to convert.\n * @returns The converted schema.\n */ function toJsonSchema(schema) {\n    if ((0,_types_zod_js__WEBPACK_IMPORTED_MODULE_2__.isZodSchemaV4)(schema)) {\n        const inputSchema = (0,_types_zod_js__WEBPACK_IMPORTED_MODULE_2__.interopZodTransformInputSchema)(schema, true);\n        if ((0,_types_zod_js__WEBPACK_IMPORTED_MODULE_2__.isZodObjectV4)(inputSchema)) {\n            const strictSchema = (0,_types_zod_js__WEBPACK_IMPORTED_MODULE_2__.interopZodObjectStrict)(inputSchema, true);\n            return (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_3__.toJSONSchema)(strictSchema);\n        } else {\n            return (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_3__.toJSONSchema)(schema);\n        }\n    }\n    if ((0,_types_zod_js__WEBPACK_IMPORTED_MODULE_2__.isZodSchemaV3)(schema)) {\n        return (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n    }\n    return schema;\n}\n/**\n * Validates if a JSON schema validates only strings. May return false negatives in some edge cases\n * (like recursive or unresolvable refs).\n *\n * @param schema - The schema to validate.\n * @returns `true` if the schema validates only strings, `false` otherwise.\n */ function validatesOnlyStrings(schema) {\n    // Null, undefined, or empty schema\n    if (!schema || typeof schema !== \"object\" || Object.keys(schema).length === 0 || Array.isArray(schema)) {\n        return false; // Validates anything, not just strings\n    }\n    // Explicit type constraint\n    if (\"type\" in schema) {\n        if (typeof schema.type === \"string\") {\n            return schema.type === \"string\";\n        }\n        if (Array.isArray(schema.type)) {\n            // not sure why someone would do `\"type\": [\"string\"]` or especially `\"type\": [\"string\",\n            // \"string\", \"string\", ...]` but we're not here to judge\n            return schema.type.every((t)=>t === \"string\");\n        }\n        return false; // Invalid or non-string type\n    }\n    // Enum with only string values\n    if (\"enum\" in schema) {\n        return Array.isArray(schema.enum) && schema.enum.length > 0 && schema.enum.every((val)=>typeof val === \"string\");\n    }\n    // String constant\n    if (\"const\" in schema) {\n        return typeof schema.const === \"string\";\n    }\n    // Schema combinations\n    if (\"allOf\" in schema && Array.isArray(schema.allOf)) {\n        // If any subschema validates only strings, then the overall schema validates only strings\n        return schema.allOf.some((subschema)=>validatesOnlyStrings(subschema));\n    }\n    if (\"anyOf\" in schema && Array.isArray(schema.anyOf) || \"oneOf\" in schema && Array.isArray(schema.oneOf)) {\n        const subschemas = \"anyOf\" in schema ? schema.anyOf : schema.oneOf;\n        // All subschemas must validate only strings\n        return subschemas.length > 0 && subschemas.every((subschema)=>validatesOnlyStrings(subschema));\n    }\n    // We're not going to try on this one, it's too complex - we just assume if it has a \"not\" key and hasn't matched one of the above checks, it's not a string schema.\n    if (\"not\" in schema) {\n        return false; // The not case can validate non-strings\n    }\n    if (\"$ref\" in schema && typeof schema.$ref === \"string\") {\n        const ref = schema.$ref;\n        const resolved = (0,_cfworker_json_schema__WEBPACK_IMPORTED_MODULE_1__.dereference)(schema);\n        if (resolved[ref]) {\n            return validatesOnlyStrings(resolved[ref]);\n        }\n        return false;\n    }\n    // ignore recursive refs and other cases where type is omitted for now\n    // ignore other cases for now where type is omitted\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9zY2hlbWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBMkM7QUFDVTtBQUNEO0FBQ2tGO0FBQ2pFO0FBQ3JFOzs7O0NBSUMsR0FDTSxTQUFTVSxhQUFhQyxNQUFNO0lBQy9CLElBQUlQLDREQUFhQSxDQUFDTyxTQUFTO1FBQ3ZCLE1BQU1DLGNBQWNMLDZFQUE4QkEsQ0FBQ0ksUUFBUTtRQUMzRCxJQUFJTCw0REFBYUEsQ0FBQ00sY0FBYztZQUM1QixNQUFNQyxlQUFlUixxRUFBc0JBLENBQUNPLGFBQWE7WUFDekQsT0FBT1oseURBQVlBLENBQUNhO1FBQ3hCLE9BQ0s7WUFDRCxPQUFPYix5REFBWUEsQ0FBQ1c7UUFDeEI7SUFDSjtJQUNBLElBQUlSLDREQUFhQSxDQUFDUSxTQUFTO1FBQ3ZCLE9BQU9WLG1FQUFlQSxDQUFDVTtJQUMzQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRyxxQkFBcUJILE1BQU07SUFDdkMsbUNBQW1DO0lBQ25DLElBQUksQ0FBQ0EsVUFDRCxPQUFPQSxXQUFXLFlBQ2xCSSxPQUFPQyxJQUFJLENBQUNMLFFBQVFNLE1BQU0sS0FBSyxLQUMvQkMsTUFBTUMsT0FBTyxDQUFDUixTQUFTO1FBQ3ZCLE9BQU8sT0FBTyx1Q0FBdUM7SUFDekQ7SUFDQSwyQkFBMkI7SUFDM0IsSUFBSSxVQUFVQSxRQUFRO1FBQ2xCLElBQUksT0FBT0EsT0FBT1MsSUFBSSxLQUFLLFVBQVU7WUFDakMsT0FBT1QsT0FBT1MsSUFBSSxLQUFLO1FBQzNCO1FBQ0EsSUFBSUYsTUFBTUMsT0FBTyxDQUFDUixPQUFPUyxJQUFJLEdBQUc7WUFDNUIsdUZBQXVGO1lBQ3ZGLHdEQUF3RDtZQUN4RCxPQUFPVCxPQUFPUyxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDQyxJQUFNQSxNQUFNO1FBQzFDO1FBQ0EsT0FBTyxPQUFPLDZCQUE2QjtJQUMvQztJQUNBLCtCQUErQjtJQUMvQixJQUFJLFVBQVVYLFFBQVE7UUFDbEIsT0FBUU8sTUFBTUMsT0FBTyxDQUFDUixPQUFPWSxJQUFJLEtBQzdCWixPQUFPWSxJQUFJLENBQUNOLE1BQU0sR0FBRyxLQUNyQk4sT0FBT1ksSUFBSSxDQUFDRixLQUFLLENBQUMsQ0FBQ0csTUFBUSxPQUFPQSxRQUFRO0lBQ2xEO0lBQ0Esa0JBQWtCO0lBQ2xCLElBQUksV0FBV2IsUUFBUTtRQUNuQixPQUFPLE9BQU9BLE9BQU9jLEtBQUssS0FBSztJQUNuQztJQUNBLHNCQUFzQjtJQUN0QixJQUFJLFdBQVdkLFVBQVVPLE1BQU1DLE9BQU8sQ0FBQ1IsT0FBT2UsS0FBSyxHQUFHO1FBQ2xELDBGQUEwRjtRQUMxRixPQUFPZixPQUFPZSxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDQyxZQUFjZCxxQkFBcUJjO0lBQ2pFO0lBQ0EsSUFBSSxXQUFZakIsVUFBVU8sTUFBTUMsT0FBTyxDQUFDUixPQUFPa0IsS0FBSyxLQUMvQyxXQUFXbEIsVUFBVU8sTUFBTUMsT0FBTyxDQUFDUixPQUFPbUIsS0FBSyxHQUFJO1FBQ3BELE1BQU1DLGFBQWMsV0FBV3BCLFNBQVNBLE9BQU9rQixLQUFLLEdBQUdsQixPQUFPbUIsS0FBSztRQUNuRSw0Q0FBNEM7UUFDNUMsT0FBUUMsV0FBV2QsTUFBTSxHQUFHLEtBQ3hCYyxXQUFXVixLQUFLLENBQUMsQ0FBQ08sWUFBY2QscUJBQXFCYztJQUM3RDtJQUNBLG9LQUFvSztJQUNwSyxJQUFJLFNBQVNqQixRQUFRO1FBQ2pCLE9BQU8sT0FBTyx3Q0FBd0M7SUFDMUQ7SUFDQSxJQUFJLFVBQVVBLFVBQVUsT0FBT0EsT0FBT3FCLElBQUksS0FBSyxVQUFVO1FBQ3JELE1BQU1DLE1BQU10QixPQUFPcUIsSUFBSTtRQUN2QixNQUFNRSxXQUFXaEMsa0VBQVdBLENBQUNTO1FBQzdCLElBQUl1QixRQUFRLENBQUNELElBQUksRUFBRTtZQUNmLE9BQU9uQixxQkFBcUJvQixRQUFRLENBQUNELElBQUk7UUFDN0M7UUFDQSxPQUFPO0lBQ1g7SUFDQSxzRUFBc0U7SUFDdEUsbURBQW1EO0lBQ25ELE9BQU87QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9qc29uX3NjaGVtYS5qcz80ZjIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvSlNPTlNjaGVtYSB9IGZyb20gXCJ6b2QvdjQvY29yZVwiO1xuaW1wb3J0IHsgem9kVG9Kc29uU2NoZW1hIH0gZnJvbSBcInpvZC10by1qc29uLXNjaGVtYVwiO1xuaW1wb3J0IHsgZGVyZWZlcmVuY2UgfSBmcm9tIFwiQGNmd29ya2VyL2pzb24tc2NoZW1hXCI7XG5pbXBvcnQgeyBpc1pvZFNjaGVtYVYzLCBpc1pvZFNjaGVtYVY0LCBpbnRlcm9wWm9kT2JqZWN0U3RyaWN0LCBpc1pvZE9iamVjdFY0LCBpbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWEsIH0gZnJvbSBcIi4vdHlwZXMvem9kLmpzXCI7XG5leHBvcnQgeyBkZWVwQ29tcGFyZVN0cmljdCwgVmFsaWRhdG9yIH0gZnJvbSBcIkBjZndvcmtlci9qc29uLXNjaGVtYVwiO1xuLyoqXG4gKiBDb252ZXJ0cyBhIFpvZCBzY2hlbWEgb3IgSlNPTiBzY2hlbWEgdG8gYSBKU09OIHNjaGVtYS5cbiAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgc2NoZW1hIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBUaGUgY29udmVydGVkIHNjaGVtYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnNvblNjaGVtYShzY2hlbWEpIHtcbiAgICBpZiAoaXNab2RTY2hlbWFWNChzY2hlbWEpKSB7XG4gICAgICAgIGNvbnN0IGlucHV0U2NoZW1hID0gaW50ZXJvcFpvZFRyYW5zZm9ybUlucHV0U2NoZW1hKHNjaGVtYSwgdHJ1ZSk7XG4gICAgICAgIGlmIChpc1pvZE9iamVjdFY0KGlucHV0U2NoZW1hKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaWN0U2NoZW1hID0gaW50ZXJvcFpvZE9iamVjdFN0cmljdChpbnB1dFNjaGVtYSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdG9KU09OU2NoZW1hKHN0cmljdFNjaGVtYSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdG9KU09OU2NoZW1hKHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzWm9kU2NoZW1hVjMoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gem9kVG9Kc29uU2NoZW1hKHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG4vKipcbiAqIFZhbGlkYXRlcyBpZiBhIEpTT04gc2NoZW1hIHZhbGlkYXRlcyBvbmx5IHN0cmluZ3MuIE1heSByZXR1cm4gZmFsc2UgbmVnYXRpdmVzIGluIHNvbWUgZWRnZSBjYXNlc1xuICogKGxpa2UgcmVjdXJzaXZlIG9yIHVucmVzb2x2YWJsZSByZWZzKS5cbiAqXG4gKiBAcGFyYW0gc2NoZW1hIC0gVGhlIHNjaGVtYSB0byB2YWxpZGF0ZS5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgc2NoZW1hIHZhbGlkYXRlcyBvbmx5IHN0cmluZ3MsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVzT25seVN0cmluZ3Moc2NoZW1hKSB7XG4gICAgLy8gTnVsbCwgdW5kZWZpbmVkLCBvciBlbXB0eSBzY2hlbWFcbiAgICBpZiAoIXNjaGVtYSB8fFxuICAgICAgICB0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiIHx8XG4gICAgICAgIE9iamVjdC5rZXlzKHNjaGVtYSkubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIEFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFZhbGlkYXRlcyBhbnl0aGluZywgbm90IGp1c3Qgc3RyaW5nc1xuICAgIH1cbiAgICAvLyBFeHBsaWNpdCB0eXBlIGNvbnN0cmFpbnRcbiAgICBpZiAoXCJ0eXBlXCIgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWEudHlwZSA9PT0gXCJzdHJpbmdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEudHlwZSkpIHtcbiAgICAgICAgICAgIC8vIG5vdCBzdXJlIHdoeSBzb21lb25lIHdvdWxkIGRvIGBcInR5cGVcIjogW1wic3RyaW5nXCJdYCBvciBlc3BlY2lhbGx5IGBcInR5cGVcIjogW1wic3RyaW5nXCIsXG4gICAgICAgICAgICAvLyBcInN0cmluZ1wiLCBcInN0cmluZ1wiLCAuLi5dYCBidXQgd2UncmUgbm90IGhlcmUgdG8ganVkZ2VcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWEudHlwZS5ldmVyeSgodCkgPT4gdCA9PT0gXCJzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJbnZhbGlkIG9yIG5vbi1zdHJpbmcgdHlwZVxuICAgIH1cbiAgICAvLyBFbnVtIHdpdGggb25seSBzdHJpbmcgdmFsdWVzXG4gICAgaWYgKFwiZW51bVwiIGluIHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkoc2NoZW1hLmVudW0pICYmXG4gICAgICAgICAgICBzY2hlbWEuZW51bS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBzY2hlbWEuZW51bS5ldmVyeSgodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiKSk7XG4gICAgfVxuICAgIC8vIFN0cmluZyBjb25zdGFudFxuICAgIGlmIChcImNvbnN0XCIgaW4gc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygc2NoZW1hLmNvbnN0ID09PSBcInN0cmluZ1wiO1xuICAgIH1cbiAgICAvLyBTY2hlbWEgY29tYmluYXRpb25zXG4gICAgaWYgKFwiYWxsT2ZcIiBpbiBzY2hlbWEgJiYgQXJyYXkuaXNBcnJheShzY2hlbWEuYWxsT2YpKSB7XG4gICAgICAgIC8vIElmIGFueSBzdWJzY2hlbWEgdmFsaWRhdGVzIG9ubHkgc3RyaW5ncywgdGhlbiB0aGUgb3ZlcmFsbCBzY2hlbWEgdmFsaWRhdGVzIG9ubHkgc3RyaW5nc1xuICAgICAgICByZXR1cm4gc2NoZW1hLmFsbE9mLnNvbWUoKHN1YnNjaGVtYSkgPT4gdmFsaWRhdGVzT25seVN0cmluZ3Moc3Vic2NoZW1hKSk7XG4gICAgfVxuICAgIGlmICgoXCJhbnlPZlwiIGluIHNjaGVtYSAmJiBBcnJheS5pc0FycmF5KHNjaGVtYS5hbnlPZikpIHx8XG4gICAgICAgIChcIm9uZU9mXCIgaW4gc2NoZW1hICYmIEFycmF5LmlzQXJyYXkoc2NoZW1hLm9uZU9mKSkpIHtcbiAgICAgICAgY29uc3Qgc3Vic2NoZW1hcyA9IChcImFueU9mXCIgaW4gc2NoZW1hID8gc2NoZW1hLmFueU9mIDogc2NoZW1hLm9uZU9mKTtcbiAgICAgICAgLy8gQWxsIHN1YnNjaGVtYXMgbXVzdCB2YWxpZGF0ZSBvbmx5IHN0cmluZ3NcbiAgICAgICAgcmV0dXJuIChzdWJzY2hlbWFzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIHN1YnNjaGVtYXMuZXZlcnkoKHN1YnNjaGVtYSkgPT4gdmFsaWRhdGVzT25seVN0cmluZ3Moc3Vic2NoZW1hKSkpO1xuICAgIH1cbiAgICAvLyBXZSdyZSBub3QgZ29pbmcgdG8gdHJ5IG9uIHRoaXMgb25lLCBpdCdzIHRvbyBjb21wbGV4IC0gd2UganVzdCBhc3N1bWUgaWYgaXQgaGFzIGEgXCJub3RcIiBrZXkgYW5kIGhhc24ndCBtYXRjaGVkIG9uZSBvZiB0aGUgYWJvdmUgY2hlY2tzLCBpdCdzIG5vdCBhIHN0cmluZyBzY2hlbWEuXG4gICAgaWYgKFwibm90XCIgaW4gc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gVGhlIG5vdCBjYXNlIGNhbiB2YWxpZGF0ZSBub24tc3RyaW5nc1xuICAgIH1cbiAgICBpZiAoXCIkcmVmXCIgaW4gc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEuJHJlZiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCByZWYgPSBzY2hlbWEuJHJlZjtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBkZXJlZmVyZW5jZShzY2hlbWEpO1xuICAgICAgICBpZiAocmVzb2x2ZWRbcmVmXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlc09ubHlTdHJpbmdzKHJlc29sdmVkW3JlZl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gaWdub3JlIHJlY3Vyc2l2ZSByZWZzIGFuZCBvdGhlciBjYXNlcyB3aGVyZSB0eXBlIGlzIG9taXR0ZWQgZm9yIG5vd1xuICAgIC8vIGlnbm9yZSBvdGhlciBjYXNlcyBmb3Igbm93IHdoZXJlIHR5cGUgaXMgb21pdHRlZFxuICAgIHJldHVybiBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6WyJ0b0pTT05TY2hlbWEiLCJ6b2RUb0pzb25TY2hlbWEiLCJkZXJlZmVyZW5jZSIsImlzWm9kU2NoZW1hVjMiLCJpc1pvZFNjaGVtYVY0IiwiaW50ZXJvcFpvZE9iamVjdFN0cmljdCIsImlzWm9kT2JqZWN0VjQiLCJpbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWEiLCJkZWVwQ29tcGFyZVN0cmljdCIsIlZhbGlkYXRvciIsInRvSnNvblNjaGVtYSIsInNjaGVtYSIsImlucHV0U2NoZW1hIiwic3RyaWN0U2NoZW1hIiwidmFsaWRhdGVzT25seVN0cmluZ3MiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwidHlwZSIsImV2ZXJ5IiwidCIsImVudW0iLCJ2YWwiLCJjb25zdCIsImFsbE9mIiwic29tZSIsInN1YnNjaGVtYSIsImFueU9mIiwib25lT2YiLCJzdWJzY2hlbWFzIiwiJHJlZiIsInJlZiIsInJlc29sdmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/sax-js/sax.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sax: () => (/* binding */ sax)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues\n// Originally from: https://github.com/isaacs/sax-js\nconst initializeSax = function() {\n    const sax = {};\n    sax.parser = function(strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    const buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\"\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function(o) {\n            function F() {}\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function(o) {\n            var a = [];\n            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for(var i = 0, l = buffers.length; i < l; i++){\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch(buffers[i]){\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for(var i = 0, l = buffers.length; i < l; i++){\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function() {\n            end(this);\n        },\n        write: write,\n        resume: function() {\n            this.error = null;\n            return this;\n        },\n        close: function() {\n            return this.write(null);\n        },\n        flush: function() {\n            flushBuffers(this);\n        }\n    };\n    var Stream = ReadableStream;\n    if (!Stream) Stream = function() {};\n    var streamWraps = sax.EVENTS.filter(function(ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function() {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function(er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function(ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function() {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function(h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream\n        }\n    });\n    SAXStream.prototype.write = function(data) {\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function() {\n                var args = arguments.length === 1 ? [\n                    arguments[0]\n                ] : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = {\n        xml: XML_NAMESPACE,\n        xmlns: XMLNS_NAMESPACE\n    };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++,\n        BEGIN_WHITESPACE: S++,\n        TEXT: S++,\n        TEXT_ENTITY: S++,\n        OPEN_WAKA: S++,\n        SGML_DECL: S++,\n        SGML_DECL_QUOTED: S++,\n        DOCTYPE: S++,\n        DOCTYPE_QUOTED: S++,\n        DOCTYPE_DTD: S++,\n        DOCTYPE_DTD_QUOTED: S++,\n        COMMENT_STARTING: S++,\n        COMMENT: S++,\n        COMMENT_ENDING: S++,\n        COMMENT_ENDED: S++,\n        CDATA: S++,\n        CDATA_ENDING: S++,\n        CDATA_ENDING_2: S++,\n        PROC_INST: S++,\n        PROC_INST_BODY: S++,\n        PROC_INST_ENDING: S++,\n        OPEN_TAG: S++,\n        OPEN_TAG_SLASH: S++,\n        ATTRIB: S++,\n        ATTRIB_NAME: S++,\n        ATTRIB_NAME_SAW_WHITE: S++,\n        ATTRIB_VALUE: S++,\n        ATTRIB_VALUE_QUOTED: S++,\n        ATTRIB_VALUE_CLOSED: S++,\n        ATTRIB_VALUE_UNQUOTED: S++,\n        ATTRIB_VALUE_ENTITY_Q: S++,\n        ATTRIB_VALUE_ENTITY_U: S++,\n        CLOSE_TAG: S++,\n        CLOSE_TAG_SAW_WHITE: S++,\n        SCRIPT: S++,\n        SCRIPT_ENDING: S++\n    };\n    sax.XML_ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\"\n    };\n    sax.ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n        AElig: 198,\n        Aacute: 193,\n        Acirc: 194,\n        Agrave: 192,\n        Aring: 197,\n        Atilde: 195,\n        Auml: 196,\n        Ccedil: 199,\n        ETH: 208,\n        Eacute: 201,\n        Ecirc: 202,\n        Egrave: 200,\n        Euml: 203,\n        Iacute: 205,\n        Icirc: 206,\n        Igrave: 204,\n        Iuml: 207,\n        Ntilde: 209,\n        Oacute: 211,\n        Ocirc: 212,\n        Ograve: 210,\n        Oslash: 216,\n        Otilde: 213,\n        Ouml: 214,\n        THORN: 222,\n        Uacute: 218,\n        Ucirc: 219,\n        Ugrave: 217,\n        Uuml: 220,\n        Yacute: 221,\n        aacute: 225,\n        acirc: 226,\n        aelig: 230,\n        agrave: 224,\n        aring: 229,\n        atilde: 227,\n        auml: 228,\n        ccedil: 231,\n        eacute: 233,\n        ecirc: 234,\n        egrave: 232,\n        eth: 240,\n        euml: 235,\n        iacute: 237,\n        icirc: 238,\n        igrave: 236,\n        iuml: 239,\n        ntilde: 241,\n        oacute: 243,\n        ocirc: 244,\n        ograve: 242,\n        oslash: 248,\n        otilde: 245,\n        ouml: 246,\n        szlig: 223,\n        thorn: 254,\n        uacute: 250,\n        ucirc: 251,\n        ugrave: 249,\n        uuml: 252,\n        yacute: 253,\n        yuml: 255,\n        copy: 169,\n        reg: 174,\n        nbsp: 160,\n        iexcl: 161,\n        cent: 162,\n        pound: 163,\n        curren: 164,\n        yen: 165,\n        brvbar: 166,\n        sect: 167,\n        uml: 168,\n        ordf: 170,\n        laquo: 171,\n        not: 172,\n        shy: 173,\n        macr: 175,\n        deg: 176,\n        plusmn: 177,\n        sup1: 185,\n        sup2: 178,\n        sup3: 179,\n        acute: 180,\n        micro: 181,\n        para: 182,\n        middot: 183,\n        cedil: 184,\n        ordm: 186,\n        raquo: 187,\n        frac14: 188,\n        frac12: 189,\n        frac34: 190,\n        iquest: 191,\n        times: 215,\n        divide: 247,\n        OElig: 338,\n        oelig: 339,\n        Scaron: 352,\n        scaron: 353,\n        Yuml: 376,\n        fnof: 402,\n        circ: 710,\n        tilde: 732,\n        Alpha: 913,\n        Beta: 914,\n        Gamma: 915,\n        Delta: 916,\n        Epsilon: 917,\n        Zeta: 918,\n        Eta: 919,\n        Theta: 920,\n        Iota: 921,\n        Kappa: 922,\n        Lambda: 923,\n        Mu: 924,\n        Nu: 925,\n        Xi: 926,\n        Omicron: 927,\n        Pi: 928,\n        Rho: 929,\n        Sigma: 931,\n        Tau: 932,\n        Upsilon: 933,\n        Phi: 934,\n        Chi: 935,\n        Psi: 936,\n        Omega: 937,\n        alpha: 945,\n        beta: 946,\n        gamma: 947,\n        delta: 948,\n        epsilon: 949,\n        zeta: 950,\n        eta: 951,\n        theta: 952,\n        iota: 953,\n        kappa: 954,\n        lambda: 955,\n        mu: 956,\n        nu: 957,\n        xi: 958,\n        omicron: 959,\n        pi: 960,\n        rho: 961,\n        sigmaf: 962,\n        sigma: 963,\n        tau: 964,\n        upsilon: 965,\n        phi: 966,\n        chi: 967,\n        psi: 968,\n        omega: 969,\n        thetasym: 977,\n        upsih: 978,\n        piv: 982,\n        ensp: 8194,\n        emsp: 8195,\n        thinsp: 8201,\n        zwnj: 8204,\n        zwj: 8205,\n        lrm: 8206,\n        rlm: 8207,\n        ndash: 8211,\n        mdash: 8212,\n        lsquo: 8216,\n        rsquo: 8217,\n        sbquo: 8218,\n        ldquo: 8220,\n        rdquo: 8221,\n        bdquo: 8222,\n        dagger: 8224,\n        Dagger: 8225,\n        bull: 8226,\n        hellip: 8230,\n        permil: 8240,\n        prime: 8242,\n        Prime: 8243,\n        lsaquo: 8249,\n        rsaquo: 8250,\n        oline: 8254,\n        frasl: 8260,\n        euro: 8364,\n        image: 8465,\n        weierp: 8472,\n        real: 8476,\n        trade: 8482,\n        alefsym: 8501,\n        larr: 8592,\n        uarr: 8593,\n        rarr: 8594,\n        darr: 8595,\n        harr: 8596,\n        crarr: 8629,\n        lArr: 8656,\n        uArr: 8657,\n        rArr: 8658,\n        dArr: 8659,\n        hArr: 8660,\n        forall: 8704,\n        part: 8706,\n        exist: 8707,\n        empty: 8709,\n        nabla: 8711,\n        isin: 8712,\n        notin: 8713,\n        ni: 8715,\n        prod: 8719,\n        sum: 8721,\n        minus: 8722,\n        lowast: 8727,\n        radic: 8730,\n        prop: 8733,\n        infin: 8734,\n        ang: 8736,\n        and: 8743,\n        or: 8744,\n        cap: 8745,\n        cup: 8746,\n        int: 8747,\n        there4: 8756,\n        sim: 8764,\n        cong: 8773,\n        asymp: 8776,\n        ne: 8800,\n        equiv: 8801,\n        le: 8804,\n        ge: 8805,\n        sub: 8834,\n        sup: 8835,\n        nsub: 8836,\n        sube: 8838,\n        supe: 8839,\n        oplus: 8853,\n        otimes: 8855,\n        perp: 8869,\n        sdot: 8901,\n        lceil: 8968,\n        rceil: 8969,\n        lfloor: 8970,\n        rfloor: 8971,\n        lang: 9001,\n        rang: 9002,\n        loz: 9674,\n        spades: 9824,\n        clubs: 9827,\n        hearts: 9829,\n        diams: 9830\n    };\n    Object.keys(sax.ENTITIES).forEach(function(key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for(var s in sax.STATE){\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode) closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim) text = text.trim();\n        if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = parser.tag = {\n            name: parser.tagName,\n            attributes: {}\n        };\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\n            \"\",\n            name\n        ] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return {\n            prefix: prefix,\n            local: local\n        };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([\n                parser.attribName,\n                parser.attribValue\n            ]);\n        } else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function(p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p]\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for(var i = 0, l = parser.attribList.length; i < l; i++){\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            } else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while(t--){\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            } else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while(s-- > t){\n            var tag = parser.tag = parser.tags.pop();\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for(var i in tag.ns){\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function(p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", {\n                        prefix: p,\n                        uri: n\n                    });\n                });\n            }\n        }\n        if (t === 0) parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            } else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        } else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while(true){\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                } else {\n                    parser.column++;\n                }\n            }\n            switch(parser.state){\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while(c && c !== \"<\" && c !== \"&\"){\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                } else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    } else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        } else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    } else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    } else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    } else if (isWhitespace(c)) {\n                    // wait for it...\n                    } else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    } else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    } else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    } else if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    } else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    } else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true; // just remember that we saw it.\n                    } else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        } else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    parser.doctype += c;\n                    if (c === \"]\") {\n                        parser.state = S.DOCTYPE;\n                    } else if (isQuote(c)) {\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    } else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    } else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    } else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    } else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    } else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    } else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    } else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    } else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    } else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        } else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    } else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (isWhitespace(c)) {\n                        continue;\n                    } else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\"\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        } else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    } else {\n                        strictFail(parser, \"Unquoted attribute value\");\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    } else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        } else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            } else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        } else {\n                            parser.tagName = c;\n                        }\n                    } else if (c === \">\") {\n                        closeTag(parser);\n                    } else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    } else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch(parser.state){\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        if (parser.opt.unparsedEntities) {\n                            var parsedEntity = parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                            parser.write(parsedEntity);\n                        } else {\n                            parser[buffer] += parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                        }\n                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    } else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default:\n                    /* istanbul ignore next */ {\n                        throw new Error(parser, \"Unknown state: \" + parser.state);\n                    }\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) {\n        (function() {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function() {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while(++index < length){\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                    codePoint < 0 || // not a valid Unicode code point\n                    codePoint > 0x10ffff || // not a valid Unicode code point\n                    floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xffff) {\n                        // BMP code point\n                        codeUnits.push(codePoint);\n                    } else {\n                        // Astral code point; split in surrogate halves\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xd800;\n                        lowSurrogate = codePoint % 0x400 + 0xdc00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */ if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n    return sax;\n};\nconst sax = /** #__PURE__ */ initializeSax();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/signal.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/signal.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raceWithSignal: () => (/* binding */ raceWithSignal)\n/* harmony export */ });\nasync function raceWithSignal(promise, signal) {\n    if (signal === undefined) {\n        return promise;\n    }\n    let listener;\n    return Promise.race([\n        promise.catch((err)=>{\n            if (!signal?.aborted) {\n                throw err;\n            } else {\n                return undefined;\n            }\n        }),\n        new Promise((_, reject)=>{\n            listener = ()=>{\n                reject(new Error(\"Aborted\"));\n            };\n            signal.addEventListener(\"abort\", listener);\n            // Must be here inside the promise to avoid a race condition\n            if (signal.aborted) {\n                reject(new Error(\"Aborted\"));\n            }\n        })\n    ]).finally(()=>signal.removeEventListener(\"abort\", listener));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvc2lnbmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxlQUFlQSxlQUFlQyxPQUFPLEVBQUVDLE1BQU07SUFDaEQsSUFBSUEsV0FBV0MsV0FBVztRQUN0QixPQUFPRjtJQUNYO0lBQ0EsSUFBSUc7SUFDSixPQUFPQyxRQUFRQyxJQUFJLENBQUM7UUFDaEJMLFFBQVFNLEtBQUssQ0FBQyxDQUFDQztZQUNYLElBQUksQ0FBQ04sUUFBUU8sU0FBUztnQkFDbEIsTUFBTUQ7WUFDVixPQUNLO2dCQUNELE9BQU9MO1lBQ1g7UUFDSjtRQUNBLElBQUlFLFFBQVEsQ0FBQ0ssR0FBR0M7WUFDWlAsV0FBVztnQkFDUE8sT0FBTyxJQUFJQyxNQUFNO1lBQ3JCO1lBQ0FWLE9BQU9XLGdCQUFnQixDQUFDLFNBQVNUO1lBQ2pDLDREQUE0RDtZQUM1RCxJQUFJRixPQUFPTyxPQUFPLEVBQUU7Z0JBQ2hCRSxPQUFPLElBQUlDLE1BQU07WUFDckI7UUFDSjtLQUNILEVBQUVFLE9BQU8sQ0FBQyxJQUFNWixPQUFPYSxtQkFBbUIsQ0FBQyxTQUFTWDtBQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9zaWduYWwuanM/MjkwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYXN5bmMgZnVuY3Rpb24gcmFjZVdpdGhTaWduYWwocHJvbWlzZSwgc2lnbmFsKSB7XG4gICAgaWYgKHNpZ25hbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBsZXQgbGlzdGVuZXI7XG4gICAgcmV0dXJuIFByb21pc2UucmFjZShbXG4gICAgICAgIHByb21pc2UuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKCFzaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkFib3J0ZWRcIikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgLy8gTXVzdCBiZSBoZXJlIGluc2lkZSB0aGUgcHJvbWlzZSB0byBhdm9pZCBhIHJhY2UgY29uZGl0aW9uXG4gICAgICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiQWJvcnRlZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgIF0pLmZpbmFsbHkoKCkgPT4gc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lcikpO1xufVxuIl0sIm5hbWVzIjpbInJhY2VXaXRoU2lnbmFsIiwicHJvbWlzZSIsInNpZ25hbCIsInVuZGVmaW5lZCIsImxpc3RlbmVyIiwiUHJvbWlzZSIsInJhY2UiLCJjYXRjaCIsImVyciIsImFib3J0ZWQiLCJfIiwicmVqZWN0IiwiRXJyb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZmluYWxseSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/signal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncGeneratorWithSetup: () => (/* binding */ AsyncGeneratorWithSetup),\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   atee: () => (/* binding */ atee),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   pipeGeneratorWithSetup: () => (/* binding */ pipeGeneratorWithSetup)\n/* harmony export */ });\n/* harmony import */ var _runnables_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _signal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signal.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/signal.js\");\n\n\n\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ class IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined\n                };\n            } else {\n                return {\n                    done: false,\n                    value: result.value\n                };\n            }\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel () {\n                reader.releaseLock();\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel (reason) {\n                await generator.return(reason);\n            }\n        });\n    }\n}\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({\n        length\n    }, ()=>[]);\n    return buffers.map(async function* makeIter(buffer) {\n        while(true){\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers){\n                    buffer.push(result);\n                }\n            } else if (buffer[0].done) {\n                return;\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    } else if (typeof first === \"string\" && typeof second === \"string\") {\n        return first + second;\n    } else if (typeof first === \"number\" && typeof second === \"number\") {\n        return first + second;\n    } else if (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    } else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = {\n            ...first\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)){\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            } else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    } else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(params){\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"signal\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = params.generator;\n        this.config = params.config;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.signal = params.signal ?? this.config?.signal;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)(params.config), async ()=>{\n                this.firstResult = params.generator.next();\n                if (params.startSetup) {\n                    this.firstResult.then(params.startSetup).then(resolve, reject);\n                } else {\n                    this.firstResult.then((_result)=>resolve(undefined), reject);\n                }\n            }, true);\n        });\n    }\n    async next(...args) {\n        this.signal?.throwIfAborted();\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)(this.config), this.signal ? async ()=>{\n            return (0,_signal_js__WEBPACK_IMPORTED_MODULE_2__.raceWithSignal)(this.generator.next(...args), this.signal);\n        } : async ()=>{\n            return this.generator.next(...args);\n        }, true);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n}\nasync function pipeGeneratorWithSetup(to, generator, startSetup, signal, ...args) {\n    const gen = new AsyncGeneratorWithSetup({\n        generator,\n        startSetup,\n        signal\n    });\n    const setup = await gen.setup;\n    return {\n        output: to(gen, setup, ...args),\n        setup\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/tiktoken.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`).then((res)=>res.json()).then((data)=>new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(data)).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRTtBQUN0QjtBQUNoRCxNQUFNRyxRQUFRLENBQUM7QUFDZixNQUFNQyxTQUFTLGFBQWEsR0FBRyxJQUFJRix5REFBV0EsQ0FBQyxDQUFDO0FBQ3pDLGVBQWVHLFlBQVlDLFFBQVE7SUFDdEMsSUFBSSxDQUFFQSxDQUFBQSxZQUFZSCxLQUFJLEdBQUk7UUFDdEJBLEtBQUssQ0FBQ0csU0FBUyxHQUFHRixPQUNiRyxLQUFLLENBQUMsQ0FBQyw4QkFBOEIsRUFBRUQsU0FBUyxLQUFLLENBQUMsRUFDdERFLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJLElBQ3RCRixJQUFJLENBQUMsQ0FBQ0csT0FBUyxJQUFJWCxzREFBUUEsQ0FBQ1csT0FDNUJDLEtBQUssQ0FBQyxDQUFDQztZQUNSLE9BQU9WLEtBQUssQ0FBQ0csU0FBUztZQUN0QixNQUFNTztRQUNWO0lBQ0o7SUFDQSxPQUFPLE1BQU1WLEtBQUssQ0FBQ0csU0FBUztBQUNoQztBQUNPLGVBQWVRLGlCQUFpQkMsS0FBSztJQUN4QyxPQUFPVixZQUFZSix5RUFBdUJBLENBQUNjO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3Rpa3Rva2VuLmpzPzhlNmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlrdG9rZW4sIGdldEVuY29kaW5nTmFtZUZvck1vZGVsLCB9IGZyb20gXCJqcy10aWt0b2tlbi9saXRlXCI7XG5pbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuL2FzeW5jX2NhbGxlci5qc1wiO1xuY29uc3QgY2FjaGUgPSB7fTtcbmNvbnN0IGNhbGxlciA9IC8qICNfX1BVUkVfXyAqLyBuZXcgQXN5bmNDYWxsZXIoe30pO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgaWYgKCEoZW5jb2RpbmcgaW4gY2FjaGUpKSB7XG4gICAgICAgIGNhY2hlW2VuY29kaW5nXSA9IGNhbGxlclxuICAgICAgICAgICAgLmZldGNoKGBodHRwczovL3Rpa3Rva2VuLnBhZ2VzLmRldi9qcy8ke2VuY29kaW5nfS5qc29uYClcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4gbmV3IFRpa3Rva2VuKGRhdGEpKVxuICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVbZW5jb2RpbmddO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBjYWNoZVtlbmNvZGluZ107XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jb2RpbmdGb3JNb2RlbChtb2RlbCkge1xuICAgIHJldHVybiBnZXRFbmNvZGluZyhnZXRFbmNvZGluZ05hbWVGb3JNb2RlbChtb2RlbCkpO1xufVxuIl0sIm5hbWVzIjpbIlRpa3Rva2VuIiwiZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwiLCJBc3luY0NhbGxlciIsImNhY2hlIiwiY2FsbGVyIiwiZ2V0RW5jb2RpbmciLCJlbmNvZGluZyIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJkYXRhIiwiY2F0Y2giLCJlIiwiZW5jb2RpbmdGb3JNb2RlbCIsIm1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/types/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/types/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendInteropZodObject: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.extendInteropZodObject),\n/* harmony export */   getInteropZodDefaultGetter: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.getInteropZodDefaultGetter),\n/* harmony export */   getInteropZodObjectShape: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.getInteropZodObjectShape),\n/* harmony export */   getSchemaDescription: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.getSchemaDescription),\n/* harmony export */   interopParse: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopParse),\n/* harmony export */   interopParseAsync: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopParseAsync),\n/* harmony export */   interopSafeParse: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopSafeParse),\n/* harmony export */   interopSafeParseAsync: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopSafeParseAsync),\n/* harmony export */   interopZodObjectPartial: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopZodObjectPartial),\n/* harmony export */   interopZodObjectPassthrough: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopZodObjectPassthrough),\n/* harmony export */   interopZodObjectStrict: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopZodObjectStrict),\n/* harmony export */   interopZodTransformInputSchema: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.interopZodTransformInputSchema),\n/* harmony export */   isInteropZodObject: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isInteropZodObject),\n/* harmony export */   isInteropZodSchema: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isInteropZodSchema),\n/* harmony export */   isShapelessZodSchema: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isShapelessZodSchema),\n/* harmony export */   isSimpleStringZodSchema: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleStringZodSchema),\n/* harmony export */   isZodArrayV4: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isZodArrayV4),\n/* harmony export */   isZodObjectV3: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isZodObjectV3),\n/* harmony export */   isZodObjectV4: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isZodObjectV4),\n/* harmony export */   isZodSchema: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isZodSchema),\n/* harmony export */   isZodSchemaV3: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isZodSchemaV3),\n/* harmony export */   isZodSchemaV4: () => (/* reexport safe */ _zod_js__WEBPACK_IMPORTED_MODULE_0__.isZodSchemaV4)\n/* harmony export */ });\n/* harmony import */ var _zod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zod.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvaW5kZXguanM/MTUxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi96b2QuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/types/zod.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendInteropZodObject: () => (/* binding */ extendInteropZodObject),\n/* harmony export */   getInteropZodDefaultGetter: () => (/* binding */ getInteropZodDefaultGetter),\n/* harmony export */   getInteropZodObjectShape: () => (/* binding */ getInteropZodObjectShape),\n/* harmony export */   getSchemaDescription: () => (/* binding */ getSchemaDescription),\n/* harmony export */   interopParse: () => (/* binding */ interopParse),\n/* harmony export */   interopParseAsync: () => (/* binding */ interopParseAsync),\n/* harmony export */   interopSafeParse: () => (/* binding */ interopSafeParse),\n/* harmony export */   interopSafeParseAsync: () => (/* binding */ interopSafeParseAsync),\n/* harmony export */   interopZodObjectPartial: () => (/* binding */ interopZodObjectPartial),\n/* harmony export */   interopZodObjectPassthrough: () => (/* binding */ interopZodObjectPassthrough),\n/* harmony export */   interopZodObjectStrict: () => (/* binding */ interopZodObjectStrict),\n/* harmony export */   interopZodTransformInputSchema: () => (/* binding */ interopZodTransformInputSchema),\n/* harmony export */   isInteropZodObject: () => (/* binding */ isInteropZodObject),\n/* harmony export */   isInteropZodSchema: () => (/* binding */ isInteropZodSchema),\n/* harmony export */   isShapelessZodSchema: () => (/* binding */ isShapelessZodSchema),\n/* harmony export */   isSimpleStringZodSchema: () => (/* binding */ isSimpleStringZodSchema),\n/* harmony export */   isZodArrayV4: () => (/* binding */ isZodArrayV4),\n/* harmony export */   isZodObjectV3: () => (/* binding */ isZodObjectV3),\n/* harmony export */   isZodObjectV4: () => (/* binding */ isZodObjectV4),\n/* harmony export */   isZodSchema: () => (/* binding */ isZodSchema),\n/* harmony export */   isZodSchemaV3: () => (/* binding */ isZodSchemaV3),\n/* harmony export */   isZodSchemaV4: () => (/* binding */ isZodSchemaV4)\n/* harmony export */ });\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/parse.js\");\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/registries.js\");\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/util.js\");\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/schemas.js\");\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/api.js\");\n\nfunction isZodSchemaV4(schema) {\n    if (typeof schema !== \"object\" || schema === null) {\n        return false;\n    }\n    const obj = schema;\n    if (!(\"_zod\" in obj)) {\n        return false;\n    }\n    const zod = obj._zod;\n    return typeof zod === \"object\" && zod !== null && \"def\" in zod;\n}\nfunction isZodSchemaV3(schema) {\n    if (typeof schema !== \"object\" || schema === null) {\n        return false;\n    }\n    const obj = schema;\n    if (!(\"_def\" in obj) || \"_zod\" in obj) {\n        return false;\n    }\n    const def = obj._def;\n    return typeof def === \"object\" && def != null && \"typeName\" in def;\n}\n/** Backward compatible isZodSchema for Zod 3 */ function isZodSchema(schema) {\n    if (isZodSchemaV4(schema)) {\n        console.warn(\"[WARNING] Attempting to use Zod 4 schema in a context where Zod 3 schema is expected. This may cause unexpected behavior.\");\n    }\n    return isZodSchemaV3(schema);\n}\n/**\n * Given either a Zod schema, or plain object, determine if the input is a Zod schema.\n *\n * @param {unknown} input\n * @returns {boolean} Whether or not the provided input is a Zod schema.\n */ function isInteropZodSchema(input) {\n    if (!input) {\n        return false;\n    }\n    if (typeof input !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(input)) {\n        return false;\n    }\n    if (isZodSchemaV4(input) || isZodSchemaV3(input)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Asynchronously parses the input using the provided Zod schema (v3 or v4) and returns a safe parse result.\n * This function handles both Zod v3 and v4 schemas, returning a result object indicating success or failure.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {Promise<InteropZodSafeParseResult<T>>} A promise that resolves to a safe parse result object.\n * @throws {Error} If the schema is not a recognized Zod v3 or v4 schema.\n */ async function interopSafeParseAsync(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        try {\n            const data = await (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_0__.parseAsync)(schema, input);\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error\n            };\n        }\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.safeParse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Asynchronously parses the input using the provided Zod schema (v3 or v4) and returns the parsed value.\n * Throws an error if parsing fails or if the schema is not a recognized Zod v3 or v4 schema.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {Promise<T>} A promise that resolves to the parsed value.\n * @throws {Error} If parsing fails or the schema is not a recognized Zod v3 or v4 schema.\n */ async function interopParseAsync(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        return (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_0__.parse)(schema, input);\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.parse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Safely parses the input using the provided Zod schema (v3 or v4) and returns a result object\n * indicating success or failure. This function is compatible with both Zod v3 and v4 schemas.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {InteropZodSafeParseResult<T>} An object with either the parsed data (on success)\n *   or the error (on failure).\n * @throws {Error} If the schema is not a recognized Zod v3 or v4 schema.\n */ function interopSafeParse(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        try {\n            const data = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_0__.parse)(schema, input);\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error\n            };\n        }\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.safeParse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Parses the input using the provided Zod schema (v3 or v4) and returns the parsed value.\n * Throws an error if parsing fails or if the schema is not a recognized Zod v3 or v4 schema.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {T} The parsed value.\n * @throws {Error} If parsing fails or the schema is not a recognized Zod v3 or v4 schema.\n */ function interopParse(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        return (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_0__.parse)(schema, input);\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.parse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Retrieves the description from a schema definition (v3, v4, or plain object), if available.\n *\n * @param {unknown} schema - The schema to extract the description from.\n * @returns {string | undefined} The description of the schema, or undefined if not present.\n */ function getSchemaDescription(schema) {\n    if (isZodSchemaV4(schema)) {\n        return zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.get(schema)?.description;\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.description;\n    }\n    if (\"description\" in schema && typeof schema.description === \"string\") {\n        return schema.description;\n    }\n    return undefined;\n}\n/**\n * Determines if the provided Zod schema is \"shapeless\".\n * A shapeless schema is one that does not define any object shape,\n * such as ZodString, ZodNumber, ZodBoolean, ZodAny, etc.\n * For ZodObject, it must have no shape keys to be considered shapeless.\n * ZodRecord schemas are considered shapeless since they define dynamic\n * key-value mappings without fixed keys.\n *\n * @param schema The Zod schema to check.\n * @returns {boolean} True if the schema is shapeless, false otherwise.\n */ function isShapelessZodSchema(schema) {\n    if (!isInteropZodSchema(schema)) {\n        return false;\n    }\n    // Check for v3 schemas\n    if (isZodSchemaV3(schema)) {\n        // @ts-expect-error - zod v3 types are not compatible with zod v4 types\n        const def = schema._def;\n        // ZodObject is only shaped if it has actual shape keys\n        if (def.typeName === \"ZodObject\") {\n            const obj = schema;\n            return !obj.shape || Object.keys(obj.shape).length === 0;\n        }\n        // ZodRecord is shapeless (dynamic key-value mapping)\n        if (def.typeName === \"ZodRecord\") {\n            return true;\n        }\n    }\n    // Check for v4 schemas\n    if (isZodSchemaV4(schema)) {\n        const def = schema._zod.def;\n        // Object type is only shaped if it has actual shape keys\n        if (def.type === \"object\") {\n            const obj = schema;\n            return !obj.shape || Object.keys(obj.shape).length === 0;\n        }\n        // Record type is shapeless (dynamic key-value mapping)\n        if (def.type === \"record\") {\n            return true;\n        }\n    }\n    // For other schemas, check if they have a `shape` property\n    // If they don't have shape, they're likely shapeless\n    if (typeof schema === \"object\" && schema !== null && !(\"shape\" in schema)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if the provided Zod schema should be treated as a simple string schema\n * that maps to DynamicTool. This aligns with the type-level constraint of\n * InteropZodType<string | undefined> which only matches basic string schemas.\n * If the provided schema is just z.string(), we can make the determination that\n * the tool is just a generic string tool that doesn't require any input validation.\n *\n * This function only returns true for basic ZodString schemas, including:\n * - Basic string schemas (z.string())\n * - String schemas with validations (z.string().min(1), z.string().email(), etc.)\n *\n * This function returns false for everything else, including:\n * - String schemas with defaults (z.string().default(\"value\"))\n * - Branded string schemas (z.string().brand<\"UserId\">())\n * - String schemas with catch operations (z.string().catch(\"default\"))\n * - Optional/nullable string schemas (z.string().optional())\n * - Transformed schemas (z.string().transform() or z.object().transform())\n * - Object or record schemas, even if they're empty\n * - Any other schema type\n *\n * @param schema The Zod schema to check.\n * @returns {boolean} True if the schema is a basic ZodString, false otherwise.\n */ function isSimpleStringZodSchema(schema) {\n    if (!isInteropZodSchema(schema)) {\n        return false;\n    }\n    // For v3 schemas\n    if (isZodSchemaV3(schema)) {\n        // @ts-expect-error - zod v3 types are not compatible with zod v4 types\n        const def = schema._def;\n        // Only accept basic ZodString\n        return def.typeName === \"ZodString\";\n    }\n    // For v4 schemas\n    if (isZodSchemaV4(schema)) {\n        const def = schema._zod.def;\n        // Only accept basic string type\n        return def.type === \"string\";\n    }\n    return false;\n}\nfunction isZodObjectV3(obj) {\n    // Zod v3 object schemas have _def.typeName === \"ZodObject\"\n    if (typeof obj === \"object\" && obj !== null && \"_def\" in obj && typeof obj._def === \"object\" && obj._def !== null && \"typeName\" in obj._def && obj._def.typeName === \"ZodObject\") {\n        return true;\n    }\n    return false;\n}\nfunction isZodObjectV4(obj) {\n    if (!isZodSchemaV4(obj)) return false;\n    // Zod v4 object schemas have _zod.def.type === \"object\"\n    if (typeof obj === \"object\" && obj !== null && \"_zod\" in obj && typeof obj._zod === \"object\" && obj._zod !== null && \"def\" in obj._zod && typeof obj._zod.def === \"object\" && obj._zod.def !== null && \"type\" in obj._zod.def && obj._zod.def.type === \"object\") {\n        return true;\n    }\n    return false;\n}\nfunction isZodArrayV4(obj) {\n    if (!isZodSchemaV4(obj)) return false;\n    // Zod v4 array schemas have _zod.def.type === \"array\"\n    if (typeof obj === \"object\" && obj !== null && \"_zod\" in obj && typeof obj._zod === \"object\" && obj._zod !== null && \"def\" in obj._zod && typeof obj._zod.def === \"object\" && obj._zod.def !== null && \"type\" in obj._zod.def && obj._zod.def.type === \"array\") {\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if the provided value is an InteropZodObject (Zod v3 or v4 object schema).\n *\n * @param obj The value to check.\n * @returns {boolean} True if the value is a Zod v3 or v4 object schema, false otherwise.\n */ function isInteropZodObject(obj) {\n    if (isZodObjectV3(obj)) return true;\n    if (isZodObjectV4(obj)) return true;\n    return false;\n}\n/**\n * Retrieves the shape (fields) of a Zod object schema, supporting both Zod v3 and v4.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @returns {InteropZodObjectShape<T>} The shape of the object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */ function getInteropZodObjectShape(schema) {\n    if (isZodSchemaV3(schema)) {\n        return schema.shape;\n    }\n    if (isZodSchemaV4(schema)) {\n        return schema._zod.def.shape;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Extends a Zod object schema with additional fields, supporting both Zod v3 and v4.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @param {InteropZodObjectShape} extension - The fields to add to the schema.\n * @returns {InteropZodObject} The extended Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */ function extendInteropZodObject(schema, extension) {\n    if (isZodSchemaV3(schema)) {\n        return schema.extend(extension);\n    }\n    if (isZodSchemaV4(schema)) {\n        return zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.extend(schema, extension);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a partial version of a Zod object schema, making all fields optional.\n * Supports both Zod v3 and v4.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @returns {InteropZodObject} The partial Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */ function interopZodObjectPartial(schema) {\n    if (isZodSchemaV3(schema)) {\n        // z3: .partial() exists and works as expected\n        return schema.partial();\n    }\n    if (isZodSchemaV4(schema)) {\n        // z4: util.partial exists and works as expected\n        return zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.partial(zod_v4_core__WEBPACK_IMPORTED_MODULE_3__.$ZodOptional, schema, undefined);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a strict version of a Zod object schema, disallowing unknown keys.\n * Supports both Zod v3 and v4 object schemas. If `recursive` is true, applies strictness\n * recursively to all nested object schemas and arrays of object schemas.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @param {boolean} [recursive=false] - Whether to apply strictness recursively to nested objects/arrays.\n * @returns {InteropZodObject} The strict Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */ function interopZodObjectStrict(schema, recursive = false) {\n    if (isZodSchemaV3(schema)) {\n        // TODO: v3 schemas aren't recursively handled here\n        // (currently not necessary since zodToJsonSchema handles this)\n        return schema.strict();\n    }\n    if (isZodObjectV4(schema)) {\n        const outputShape = schema._zod.def.shape;\n        if (recursive) {\n            for (const [key, keySchema] of Object.entries(schema._zod.def.shape)){\n                // If the shape key is a v4 object schema, we need to make it strict\n                if (isZodObjectV4(keySchema)) {\n                    const outputSchema = interopZodObjectStrict(keySchema, recursive);\n                    outputShape[key] = outputSchema;\n                } else if (isZodArrayV4(keySchema)) {\n                    let elementSchema = keySchema._zod.def.element;\n                    if (isZodObjectV4(elementSchema)) {\n                        elementSchema = interopZodObjectStrict(elementSchema, recursive);\n                    }\n                    outputShape[key] = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.clone)(keySchema, {\n                        ...keySchema._zod.def,\n                        element: elementSchema\n                    });\n                } else {\n                    outputShape[key] = keySchema;\n                }\n                // Assign meta fields to the keySchema\n                const meta = zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.get(keySchema);\n                if (meta) zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.add(outputShape[key], meta);\n            }\n        }\n        const modifiedSchema = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.clone)(schema, {\n            ...schema._zod.def,\n            shape: outputShape,\n            catchall: (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_4__._never)(zod_v4_core__WEBPACK_IMPORTED_MODULE_3__.$ZodNever)\n        });\n        const meta = zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.get(schema);\n        if (meta) zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.add(modifiedSchema, meta);\n        return modifiedSchema;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a passthrough version of a Zod object schema, allowing unknown keys.\n * Supports both Zod v3 and v4 object schemas. If `recursive` is true, applies passthrough\n * recursively to all nested object schemas and arrays of object schemas.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @param {boolean} [recursive=false] - Whether to apply passthrough recursively to nested objects/arrays.\n * @returns {InteropZodObject} The passthrough Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */ function interopZodObjectPassthrough(schema, recursive = false) {\n    if (isZodObjectV3(schema)) {\n        // TODO: v3 schemas aren't recursively handled here\n        // (currently not necessary since zodToJsonSchema handles this)\n        return schema.passthrough();\n    }\n    if (isZodObjectV4(schema)) {\n        const outputShape = schema._zod.def.shape;\n        if (recursive) {\n            for (const [key, keySchema] of Object.entries(schema._zod.def.shape)){\n                // If the shape key is a v4 object schema, we need to make it passthrough\n                if (isZodObjectV4(keySchema)) {\n                    const outputSchema = interopZodObjectPassthrough(keySchema, recursive);\n                    outputShape[key] = outputSchema;\n                } else if (isZodArrayV4(keySchema)) {\n                    let elementSchema = keySchema._zod.def.element;\n                    if (isZodObjectV4(elementSchema)) {\n                        elementSchema = interopZodObjectPassthrough(elementSchema, recursive);\n                    }\n                    outputShape[key] = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.clone)(keySchema, {\n                        ...keySchema._zod.def,\n                        element: elementSchema\n                    });\n                } else {\n                    outputShape[key] = keySchema;\n                }\n                // Assign meta fields to the keySchema\n                const meta = zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.get(keySchema);\n                if (meta) zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.add(outputShape[key], meta);\n            }\n        }\n        const modifiedSchema = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.clone)(schema, {\n            ...schema._zod.def,\n            shape: outputShape,\n            catchall: (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_4__._unknown)(zod_v4_core__WEBPACK_IMPORTED_MODULE_3__.$ZodUnknown)\n        });\n        const meta = zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.get(schema);\n        if (meta) zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.add(modifiedSchema, meta);\n        return modifiedSchema;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a getter function for the default value of a Zod schema, if one is defined.\n * Supports both Zod v3 and v4 schemas. If the schema has a default value,\n * the returned function will return that value when called. If no default is defined,\n * returns undefined.\n *\n * @template T - The type of the Zod schema.\n * @param {T} schema - The Zod schema instance (either v3 or v4).\n * @returns {(() => InferInteropZodOutput<T>) | undefined} A function that returns the default value, or undefined if no default is set.\n */ function getInteropZodDefaultGetter(schema) {\n    if (isZodSchemaV3(schema)) {\n        try {\n            const defaultValue = schema.parse(undefined);\n            return ()=>defaultValue;\n        } catch  {\n            return undefined;\n        }\n    }\n    if (isZodSchemaV4(schema)) {\n        try {\n            const defaultValue = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_0__.parse)(schema, undefined);\n            return ()=>defaultValue;\n        } catch  {\n            return undefined;\n        }\n    }\n    return undefined;\n}\nfunction isZodTransformV3(schema) {\n    return isZodSchemaV3(schema) && \"typeName\" in schema._def && schema._def.typeName === \"ZodEffects\";\n}\nfunction isZodTransformV4(schema) {\n    return isZodSchemaV4(schema) && schema._zod.def.type === \"pipe\";\n}\n/**\n * Returns the input type of a Zod transform schema, for both v3 and v4.\n * If the schema is not a transform, returns undefined. If `recursive` is true,\n * recursively processes nested object schemas and arrays of object schemas.\n *\n * @param schema - The Zod schema instance (v3 or v4)\n * @param {boolean} [recursive=false] - Whether to recursively process nested objects/arrays.\n * @returns The input Zod schema of the transform, or undefined if not a transform\n */ function interopZodTransformInputSchema(schema, recursive = false) {\n    // Zod v3: ._def.schema is the input schema for ZodEffects (transform)\n    if (isZodSchemaV3(schema)) {\n        if (isZodTransformV3(schema)) {\n            return interopZodTransformInputSchema(schema._def.schema, recursive);\n        }\n        // TODO: v3 schemas aren't recursively handled here\n        // (currently not necessary since zodToJsonSchema handles this)\n        return schema;\n    }\n    // Zod v4: _def.type is the input schema for ZodEffects (transform)\n    if (isZodSchemaV4(schema)) {\n        let outputSchema = schema;\n        if (isZodTransformV4(schema)) {\n            outputSchema = interopZodTransformInputSchema(schema._zod.def.in, recursive);\n        }\n        if (recursive) {\n            // Handle nested object schemas\n            if (isZodObjectV4(outputSchema)) {\n                const outputShape = outputSchema._zod.def.shape;\n                for (const [key, keySchema] of Object.entries(outputSchema._zod.def.shape)){\n                    outputShape[key] = interopZodTransformInputSchema(keySchema, recursive);\n                }\n                outputSchema = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.clone)(outputSchema, {\n                    ...outputSchema._zod.def,\n                    shape: outputShape\n                });\n            } else if (isZodArrayV4(outputSchema)) {\n                const elementSchema = interopZodTransformInputSchema(outputSchema._zod.def.element, recursive);\n                outputSchema = (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.clone)(outputSchema, {\n                    ...outputSchema._zod.def,\n                    element: elementSchema\n                });\n            }\n        }\n        const meta = zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.get(schema);\n        if (meta) zod_v4_core__WEBPACK_IMPORTED_MODULE_1__.globalRegistry.add(outputSchema, meta);\n        return outputSchema;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/embeddings.js":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/embeddings.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* reexport safe */ _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__.Embeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/embeddings.js */ \"(rsc)/./node_modules/@langchain/core/dist/embeddings.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuanM/ZmEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvZW1iZWRkaW5ncy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getModelNameForTiktoken),\n/* harmony export */   isOpenAITool: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.isOpenAITool)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvYmFzZS5qcz83NjUwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvbGFuZ3VhZ2VfbW9kZWxzL2Jhc2UuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/chat_models.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/chat_models.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/chat_models.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvY2hhdF9tb2RlbHMuanM/YzJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/messages.js":
/*!**************************************************!*\
  !*** ./node_modules/@langchain/core/messages.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk),\n/* harmony export */   RemoveMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.RemoveMessage),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk),\n/* harmony export */   _isMessageFieldWithRole: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._isMessageFieldWithRole),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeLists),\n/* harmony export */   _mergeObj: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeObj),\n/* harmony export */   _mergeStatus: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeStatus),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.convertToChunk),\n/* harmony export */   convertToOpenAIImageBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAIImageBlock),\n/* harmony export */   convertToProviderContentBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.convertToProviderContentBlock),\n/* harmony export */   defaultTextSplitter: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultTextSplitter),\n/* harmony export */   filterMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.filterMessages),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isAIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessageChunk),\n/* harmony export */   isBase64ContentBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBase64ContentBlock),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessageChunk),\n/* harmony export */   isChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isChatMessage),\n/* harmony export */   isChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isChatMessageChunk),\n/* harmony export */   isDataContentBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isDataContentBlock),\n/* harmony export */   isFunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isFunctionMessage),\n/* harmony export */   isFunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isFunctionMessageChunk),\n/* harmony export */   isHumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isHumanMessage),\n/* harmony export */   isHumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isHumanMessageChunk),\n/* harmony export */   isIDContentBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isIDContentBlock),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isOpenAIToolCallArray),\n/* harmony export */   isPlainTextContentBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isPlainTextContentBlock),\n/* harmony export */   isSystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isSystemMessage),\n/* harmony export */   isSystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isSystemMessageChunk),\n/* harmony export */   isToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isToolMessage),\n/* harmony export */   isToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isToolMessageChunk),\n/* harmony export */   isURLContentBlock: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isURLContentBlock),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent),\n/* harmony export */   mergeMessageRuns: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeMessageRuns),\n/* harmony export */   parseBase64DataUrl: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.parseBase64DataUrl),\n/* harmony export */   parseMimeType: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.parseMimeType),\n/* harmony export */   trimMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.trimMessages)\n/* harmony export */ });\n/* harmony import */ var _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9tZXNzYWdlcy5qcz84MjkwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9tZXNzYWdlcy9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/output_parsers.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.AsymmetricStructuredOutputParser),\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseLLMOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser),\n/* harmony export */   BytesOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BytesOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.NumberedListOutputParser),\n/* harmony export */   OutputParserException: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException),\n/* harmony export */   StringOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StringOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StructuredOutputParser),\n/* harmony export */   XMLOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson),\n/* harmony export */   parseXMLMarkdown: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/output_parsers/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzLmpzPzE5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L291dHB1dF9wYXJzZXJzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/output_parsers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/outputs.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/core/outputs.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY)\n/* harmony export */ });\n/* harmony import */ var _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvb3V0cHV0cy5qcz9hZjQzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9vdXRwdXRzLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/runnables.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/runnables.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableAssign: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePassthrough),\n/* harmony export */   RunnablePick: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableToolLike: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableToolLike),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks),\n/* harmony export */   RunnableWithMessageHistory: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithMessageHistory),\n/* harmony export */   _coerceToRunnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable),\n/* harmony export */   ensureConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeConfigs),\n/* harmony export */   patchConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.patchConfig),\n/* harmony export */   pickRunnableConfigKeys: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)\n/* harmony export */ });\n/* harmony import */ var _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/runnables/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvcnVubmFibGVzLmpzPzdhYjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L3J1bm5hYmxlcy9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/runnables.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/chunk_array.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/utils/chunk_array.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* reexport safe */ _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__.chunkArray)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/chunk_array.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2NodW5rX2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9jaHVua19hcnJheS5qcz81ZjgyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/env.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/utils/env.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   getRuntimeEnvironmentSync: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironmentSync),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9lbnYuanM/NDY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3V0aWxzL2Vudi5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/function_calling.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/function_calling.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIFunction: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAIFunction),\n/* harmony export */   convertToOpenAITool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAITool),\n/* harmony export */   isLangChainTool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isLangChainTool),\n/* harmony export */   isRunnableToolLike: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isRunnableToolLike),\n/* harmony export */   isStructuredTool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isStructuredTool),\n/* harmony export */   isStructuredToolParams: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isStructuredToolParams)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/function_calling.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvZnVuY3Rpb25fY2FsbGluZy5qcz84Yzg5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvZnVuY3Rpb25fY2FsbGluZy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/function_calling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/json_schema.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/utils/json_schema.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: () => (/* reexport safe */ _dist_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_0__.Validator),\n/* harmony export */   deepCompareStrict: () => (/* reexport safe */ _dist_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict),\n/* harmony export */   toJsonSchema: () => (/* reexport safe */ _dist_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_0__.toJsonSchema),\n/* harmony export */   validatesOnlyStrings: () => (/* reexport safe */ _dist_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_0__.validatesOnlyStrings)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_json_schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/json_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2pzb25fc2NoZW1hLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9qc29uX3NjaGVtYS5qcz8xNjljIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvanNvbl9zY2hlbWEuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/json_schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/core/utils/types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendInteropZodObject: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.extendInteropZodObject),\n/* harmony export */   getInteropZodDefaultGetter: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.getInteropZodDefaultGetter),\n/* harmony export */   getInteropZodObjectShape: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.getInteropZodObjectShape),\n/* harmony export */   getSchemaDescription: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.getSchemaDescription),\n/* harmony export */   interopParse: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopParse),\n/* harmony export */   interopParseAsync: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopParseAsync),\n/* harmony export */   interopSafeParse: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopSafeParse),\n/* harmony export */   interopSafeParseAsync: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopSafeParseAsync),\n/* harmony export */   interopZodObjectPartial: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopZodObjectPartial),\n/* harmony export */   interopZodObjectPassthrough: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopZodObjectPassthrough),\n/* harmony export */   interopZodObjectStrict: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopZodObjectStrict),\n/* harmony export */   interopZodTransformInputSchema: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.interopZodTransformInputSchema),\n/* harmony export */   isInteropZodObject: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isInteropZodObject),\n/* harmony export */   isInteropZodSchema: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isInteropZodSchema),\n/* harmony export */   isShapelessZodSchema: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isShapelessZodSchema),\n/* harmony export */   isSimpleStringZodSchema: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleStringZodSchema),\n/* harmony export */   isZodArrayV4: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isZodArrayV4),\n/* harmony export */   isZodObjectV3: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isZodObjectV3),\n/* harmony export */   isZodObjectV4: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isZodObjectV4),\n/* harmony export */   isZodSchema: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isZodSchema),\n/* harmony export */   isZodSchemaV3: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isZodSchemaV3),\n/* harmony export */   isZodSchemaV4: () => (/* reexport safe */ _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__.isZodSchemaV4)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/types/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy90eXBlcy5qcz8yZWEzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvdHlwZXMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/chat_models.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/chat_models.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* binding */ ChatGoogleGenerativeAI)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/@langchain/core/utils/types.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/zod_to_genai_parameters.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\");\n/* harmony import */ var _utils_common_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/common.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils/common.js\");\n/* harmony import */ var _output_parsers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./output_parsers.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/output_parsers.js\");\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tools.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils/tools.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Google Generative AI chat model integration.\n *\n * Setup:\n * Install `@langchain/google-genai` and set an environment variable named `GOOGLE_API_KEY`.\n *\n * ```bash\n * npm install @langchain/google-genai\n * export GOOGLE_API_KEY=\"your-api-key\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_google_genai.ChatGoogleGenerativeAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_google_genai.GoogleGenerativeAIChatCallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.withConfig`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.withConfig({\n *   stop: [\"\\n\"],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     stop: [\"\\n\"],\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatGoogleGenerativeAI } from '@langchain/google-genai';\n *\n * const llm = new ChatGoogleGenerativeAI({\n *   model: \"gemini-1.5-flash\",\n *   temperature: 0,\n *   maxRetries: 2,\n *   // apiKey: \"...\",\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"content\": \"There are a few ways to translate \\\"I love programming\\\" into French, depending on the level of formality and nuance you want to convey:\\n\\n**Formal:**\\n\\n* **J'aime la programmation.** (This is the most literal and formal translation.)\\n\\n**Informal:**\\n\\n* **J'adore programmer.** (This is a more enthusiastic and informal translation.)\\n* **J'aime beaucoup programmer.** (This is a slightly less enthusiastic but still informal translation.)\\n\\n**More specific:**\\n\\n* **J'aime beaucoup coder.** (This specifically refers to writing code.)\\n* **J'aime beaucoup développer des logiciels.** (This specifically refers to developing software.)\\n\\nThe best translation will depend on the context and your intended audience. \\n\",\n *   \"response_metadata\": {\n *     \"finishReason\": \"STOP\",\n *     \"index\": 0,\n *     \"safetyRatings\": [\n *       {\n *         \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n *         \"probability\": \"NEGLIGIBLE\"\n *       },\n *       {\n *         \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n *         \"probability\": \"NEGLIGIBLE\"\n *       },\n *       {\n *         \"category\": \"HARM_CATEGORY_HARASSMENT\",\n *         \"probability\": \"NEGLIGIBLE\"\n *       },\n *       {\n *         \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n *         \"probability\": \"NEGLIGIBLE\"\n *       }\n *     ]\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 10,\n *     \"output_tokens\": 149,\n *     \"total_tokens\": 159\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"There\",\n *   \"response_metadata\": {\n *     \"index\": 0\n *   }\n *   \"usage_metadata\": {\n *     \"input_tokens\": 10,\n *     \"output_tokens\": 1,\n *     \"total_tokens\": 11\n *   }\n * }\n * AIMessageChunk {\n *   \"content\": \" are a few ways to translate \\\"I love programming\\\" into French, depending on\",\n * }\n * AIMessageChunk {\n *   \"content\": \" the level of formality and nuance you want to convey:\\n\\n**Formal:**\\n\\n\",\n * }\n * AIMessageChunk {\n *   \"content\": \"* **J'aime la programmation.** (This is the most literal and formal translation.)\\n\\n**Informal:**\\n\\n* **J'adore programmer.** (This\",\n * }\n * AIMessageChunk {\n *   \"content\": \" is a more enthusiastic and informal translation.)\\n* **J'aime beaucoup programmer.** (This is a slightly less enthusiastic but still informal translation.)\\n\\n**More\",\n * }\n * AIMessageChunk {\n *   \"content\": \" specific:**\\n\\n* **J'aime beaucoup coder.** (This specifically refers to writing code.)\\n* **J'aime beaucoup développer des logiciels.** (This specifically refers to developing software.)\\n\\nThe best translation will depend on the context and\",\n * }\n * AIMessageChunk {\n *   \"content\": \" your intended audience. \\n\",\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"There are a few ways to translate \\\"I love programming\\\" into French, depending on the level of formality and nuance you want to convey:\\n\\n**Formal:**\\n\\n* **J'aime la programmation.** (This is the most literal and formal translation.)\\n\\n**Informal:**\\n\\n* **J'adore programmer.** (This is a more enthusiastic and informal translation.)\\n* **J'aime beaucoup programmer.** (This is a slightly less enthusiastic but still informal translation.)\\n\\n**More specific:**\\n\\n* **J'aime beaucoup coder.** (This specifically refers to writing code.)\\n* **J'aime beaucoup développer des logiciels.** (This specifically refers to developing software.)\\n\\nThe best translation will depend on the context and your intended audience. \\n\",\n *   \"usage_metadata\": {\n *     \"input_tokens\": 10,\n *     \"output_tokens\": 277,\n *     \"total_tokens\": 287\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call'\n *   },\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: \"Why don\\\\'t cats play poker?\",\n *   punchline: \"Why don\\\\'t cats play poker? Because they always have an ace up their sleeve!\"\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Multimodal</strong></summary>\n *\n * ```typescript\n * import { HumanMessage } from '@langchain/core/messages';\n *\n * const imageUrl = \"https://example.com/image.jpg\";\n * const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n * const base64Image = Buffer.from(imageData).toString('base64');\n *\n * const message = new HumanMessage({\n *   content: [\n *     { type: \"text\", text: \"describe the weather in this image\" },\n *     {\n *       type: \"image_url\",\n *       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n *     },\n *   ]\n * });\n *\n * const imageDescriptionAiMsg = await llm.invoke([message]);\n * console.log(imageDescriptionAiMsg.content);\n * ```\n *\n * ```txt\n * The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 10, output_tokens: 149, total_tokens: 159 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   finishReason: 'STOP',\n *   index: 0,\n *   safetyRatings: [\n *     {\n *       category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n *       probability: 'NEGLIGIBLE'\n *     },\n *     {\n *       category: 'HARM_CATEGORY_HATE_SPEECH',\n *       probability: 'NEGLIGIBLE'\n *     },\n *     { category: 'HARM_CATEGORY_HARASSMENT', probability: 'NEGLIGIBLE' },\n *     {\n *       category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n *       probability: 'NEGLIGIBLE'\n *     }\n *   ]\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Document Messages</strong></summary>\n *\n * This example will show you how to pass documents such as PDFs to Google\n * Generative AI through messages.\n *\n * ```typescript\n * const pdfPath = \"/Users/my_user/Downloads/invoice.pdf\";\n * const pdfBase64 = await fs.readFile(pdfPath, \"base64\");\n *\n * const response = await llm.invoke([\n *   [\"system\", \"Use the provided documents to answer the question\"],\n *   [\n *     \"user\",\n *     [\n *       {\n *         type: \"application/pdf\", // If the `type` field includes a single slash (`/`), it will be treated as inline data.\n *         data: pdfBase64,\n *       },\n *       {\n *         type: \"text\",\n *         text: \"Summarize the contents of this PDF\",\n *       },\n *     ],\n *   ],\n * ]);\n *\n * console.log(response.content);\n * ```\n *\n * ```txt\n * This is a billing invoice from Twitter Developers for X API Basic Access. The transaction date is January 7, 2025,\n * and the amount is $194.34, which has been paid. The subscription period is from January 7, 2025 21:02 to February 7, 2025 00:00 (UTC).\n * The tax is $0.00, with a tax rate of 0%. The total amount is $194.34. The payment was made using a Visa card ending in 7022,\n * expiring in 12/2026. The billing address is Brace Sproul, 1234 Main Street, San Francisco, CA, US 94103. The company being billed is\n * X Corp, located at 865 FM 1209 Building 2, Bastrop, TX, US 78602. Terms and conditions apply.\n * ```\n * </details>\n *\n * <br />\n */ class ChatGoogleGenerativeAI extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_2__.BaseChatModel {\n    static lc_name() {\n        return \"ChatGoogleGenerativeAI\";\n    }\n    get lc_secrets() {\n        return {\n            apiKey: \"GOOGLE_API_KEY\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            apiKey: \"google_api_key\"\n        };\n    }\n    get _isMultimodalModel() {\n        return this.model.includes(\"vision\") || this.model.startsWith(\"gemini-1.5\") || this.model.startsWith(\"gemini-2\");\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"chat_models\",\n                \"google_genai\"\n            ]\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // default value chosen based on model\n        Object.defineProperty(this, \"maxOutputTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // default value chosen based on model\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // default value chosen based on model\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"safetySettings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"json\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streamUsage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"convertSystemMessageToHumanContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.model = fields.model.replace(/^models\\//, \"\");\n        this.maxOutputTokens = fields.maxOutputTokens ?? this.maxOutputTokens;\n        if (this.maxOutputTokens && this.maxOutputTokens < 0) {\n            throw new Error(\"`maxOutputTokens` must be a positive integer\");\n        }\n        this.temperature = fields.temperature ?? this.temperature;\n        if (this.temperature && (this.temperature < 0 || this.temperature > 2)) {\n            throw new Error(\"`temperature` must be in the range of [0.0,2.0]\");\n        }\n        this.topP = fields.topP ?? this.topP;\n        if (this.topP && this.topP < 0) {\n            throw new Error(\"`topP` must be a positive integer\");\n        }\n        if (this.topP && this.topP > 1) {\n            throw new Error(\"`topP` must be below 1.\");\n        }\n        this.topK = fields.topK ?? this.topK;\n        if (this.topK && this.topK < 0) {\n            throw new Error(\"`topK` must be a positive integer\");\n        }\n        this.stopSequences = fields.stopSequences ?? this.stopSequences;\n        this.apiKey = fields.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n        if (!this.apiKey) {\n            throw new Error(\"Please set an API key for Google GenerativeAI \" + \"in the environment variable GOOGLE_API_KEY \" + \"or in the `apiKey` field of the \" + \"ChatGoogleGenerativeAI constructor\");\n        }\n        this.safetySettings = fields.safetySettings ?? this.safetySettings;\n        if (this.safetySettings && this.safetySettings.length > 0) {\n            const safetySettingsSet = new Set(this.safetySettings.map((s)=>s.category));\n            if (safetySettingsSet.size !== this.safetySettings.length) {\n                throw new Error(\"The categories in `safetySettings` array must be unique\");\n            }\n        }\n        this.streaming = fields.streaming ?? this.streaming;\n        this.json = fields.json;\n        this.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(this.apiKey).getGenerativeModel({\n            model: this.model,\n            safetySettings: this.safetySettings,\n            generationConfig: {\n                stopSequences: this.stopSequences,\n                maxOutputTokens: this.maxOutputTokens,\n                temperature: this.temperature,\n                topP: this.topP,\n                topK: this.topK,\n                ...this.json ? {\n                    responseMimeType: \"application/json\"\n                } : {}\n            }\n        }, {\n            apiVersion: fields.apiVersion,\n            baseUrl: fields.baseUrl\n        });\n        this.streamUsage = fields.streamUsage ?? this.streamUsage;\n    }\n    useCachedContent(cachedContent, modelParams, requestOptions) {\n        if (!this.apiKey) return;\n        this.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(this.apiKey).getGenerativeModelFromCachedContent(cachedContent, modelParams, requestOptions);\n    }\n    get useSystemInstruction() {\n        return typeof this.convertSystemMessageToHumanContent === \"boolean\" ? !this.convertSystemMessageToHumanContent : this.computeUseSystemInstruction;\n    }\n    get computeUseSystemInstruction() {\n        // This works on models from April 2024 and later\n        //   Vertex AI: gemini-1.5-pro and gemini-1.0-002 and later\n        //   AI Studio: gemini-1.5-pro-latest\n        if (this.model === \"gemini-1.0-pro-001\") {\n            return false;\n        } else if (this.model.startsWith(\"gemini-pro-vision\")) {\n            return false;\n        } else if (this.model.startsWith(\"gemini-1.0-pro-vision\")) {\n            return false;\n        } else if (this.model === \"gemini-pro\") {\n            // on AI Studio gemini-pro is still pointing at gemini-1.0-pro-001\n            return false;\n        }\n        return true;\n    }\n    getLsParams(options) {\n        return {\n            ls_provider: \"google_genai\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: this.client.generationConfig.temperature,\n            ls_max_tokens: this.client.generationConfig.maxOutputTokens,\n            ls_stop: options.stop\n        };\n    }\n    _combineLLMOutput() {\n        return [];\n    }\n    _llmType() {\n        return \"googlegenerativeai\";\n    }\n    bindTools(tools, kwargs) {\n        return this.withConfig({\n            tools: (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_9__.convertToolsToGenAI)(tools)?.tools,\n            ...kwargs\n        });\n    }\n    invocationParams(options) {\n        const toolsAndConfig = options?.tools?.length ? (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_9__.convertToolsToGenAI)(options.tools, {\n            toolChoice: options.tool_choice,\n            allowedFunctionNames: options.allowedFunctionNames\n        }) : undefined;\n        if (options?.responseSchema) {\n            this.client.generationConfig.responseSchema = options.responseSchema;\n            this.client.generationConfig.responseMimeType = \"application/json\";\n        } else {\n            this.client.generationConfig.responseSchema = undefined;\n            this.client.generationConfig.responseMimeType = this.json ? \"application/json\" : undefined;\n        }\n        return {\n            ...toolsAndConfig?.tools ? {\n                tools: toolsAndConfig.tools\n            } : {},\n            ...toolsAndConfig?.toolConfig ? {\n                toolConfig: toolsAndConfig.toolConfig\n            } : {}\n        };\n    }\n    async _generate(messages, options, runManager) {\n        const prompt = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_7__.convertBaseMessagesToContent)(messages, this._isMultimodalModel, this.useSystemInstruction);\n        let actualPrompt = prompt;\n        if (prompt[0].role === \"system\") {\n            const [systemInstruction] = prompt;\n            this.client.systemInstruction = systemInstruction;\n            actualPrompt = prompt.slice(1);\n        }\n        const parameters = this.invocationParams(options);\n        // Handle streaming\n        if (this.streaming) {\n            const tokenUsage = {};\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            const finalChunks = {};\n            for await (const chunk of stream){\n                const index = chunk.generationInfo?.completion ?? 0;\n                if (finalChunks[index] === undefined) {\n                    finalChunks[index] = chunk;\n                } else {\n                    finalChunks[index] = finalChunks[index].concat(chunk);\n                }\n            }\n            const generations = Object.entries(finalChunks).sort(([aKey], [bKey])=>parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value])=>value);\n            return {\n                generations,\n                llmOutput: {\n                    estimatedTokenUsage: tokenUsage\n                }\n            };\n        }\n        const res = await this.completionWithRetry({\n            ...parameters,\n            contents: actualPrompt\n        });\n        let usageMetadata;\n        if (\"usageMetadata\" in res.response) {\n            const genAIUsageMetadata = res.response.usageMetadata;\n            usageMetadata = {\n                input_tokens: genAIUsageMetadata.promptTokenCount ?? 0,\n                output_tokens: genAIUsageMetadata.candidatesTokenCount ?? 0,\n                total_tokens: genAIUsageMetadata.totalTokenCount ?? 0\n            };\n        }\n        const generationResult = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_7__.mapGenerateContentResultToChatResult)(res.response, {\n            usageMetadata\n        });\n        // may not have generations in output if there was a refusal for safety reasons, malformed function call, etc.\n        if (generationResult.generations?.length > 0) {\n            await runManager?.handleLLMNewToken(generationResult.generations[0]?.text ?? \"\");\n        }\n        return generationResult;\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const prompt = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_7__.convertBaseMessagesToContent)(messages, this._isMultimodalModel, this.useSystemInstruction);\n        let actualPrompt = prompt;\n        if (prompt[0].role === \"system\") {\n            const [systemInstruction] = prompt;\n            this.client.systemInstruction = systemInstruction;\n            actualPrompt = prompt.slice(1);\n        }\n        const parameters = this.invocationParams(options);\n        const request = {\n            ...parameters,\n            contents: actualPrompt\n        };\n        const stream = await this.caller.callWithOptions({\n            signal: options?.signal\n        }, async ()=>{\n            const { stream } = await this.client.generateContentStream(request);\n            return stream;\n        });\n        let usageMetadata;\n        let index = 0;\n        for await (const response of stream){\n            if (\"usageMetadata\" in response && this.streamUsage !== false && options.streamUsage !== false) {\n                const genAIUsageMetadata = response.usageMetadata;\n                if (!usageMetadata) {\n                    usageMetadata = {\n                        input_tokens: genAIUsageMetadata.promptTokenCount ?? 0,\n                        output_tokens: genAIUsageMetadata.candidatesTokenCount ?? 0,\n                        total_tokens: genAIUsageMetadata.totalTokenCount ?? 0\n                    };\n                } else {\n                    // Under the hood, LangChain combines the prompt tokens. Google returns the updated\n                    // total each time, so we need to find the difference between the tokens.\n                    const outputTokenDiff = (genAIUsageMetadata.candidatesTokenCount ?? 0) - usageMetadata.output_tokens;\n                    usageMetadata = {\n                        input_tokens: 0,\n                        output_tokens: outputTokenDiff,\n                        total_tokens: outputTokenDiff\n                    };\n                }\n            }\n            const chunk = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_7__.convertResponseContentToChatGenerationChunk)(response, {\n                usageMetadata,\n                index\n            });\n            index += 1;\n            if (!chunk) {\n                continue;\n            }\n            yield chunk;\n            await runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        return this.caller.callWithOptions({\n            signal: options?.signal\n        }, async ()=>{\n            try {\n                return await this.client.generateContent(request);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e) {\n                // TODO: Improve error handling\n                if (e.message?.includes(\"400 Bad Request\")) {\n                    e.status = 400;\n                }\n                throw e;\n            }\n        });\n    }\n    withStructuredOutput(outputSchema, config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        if (method === \"jsonMode\") {\n            throw new Error(`ChatGoogleGenerativeAI only supports \"jsonSchema\" or \"functionCalling\" as a method.`);\n        }\n        let llm;\n        let outputParser;\n        if (method === \"functionCalling\") {\n            let functionName = name ?? \"extract\";\n            let tools;\n            if ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_4__.isInteropZodSchema)(schema)) {\n                const jsonSchema = (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_6__.schemaToGenerativeAIParameters)(schema);\n                tools = [\n                    {\n                        functionDeclarations: [\n                            {\n                                name: functionName,\n                                description: jsonSchema.description ?? \"A function available to call.\",\n                                parameters: jsonSchema\n                            }\n                        ]\n                    }\n                ];\n                outputParser = new _output_parsers_js__WEBPACK_IMPORTED_MODULE_8__.GoogleGenerativeAIToolsOutputParser({\n                    returnSingle: true,\n                    keyName: functionName,\n                    zodSchema: schema\n                });\n            } else {\n                let geminiFunctionDefinition;\n                if (typeof schema.name === \"string\" && typeof schema.parameters === \"object\" && schema.parameters != null) {\n                    geminiFunctionDefinition = schema;\n                    geminiFunctionDefinition.parameters = (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_6__.removeAdditionalProperties)(schema.parameters);\n                    functionName = schema.name;\n                } else {\n                    geminiFunctionDefinition = {\n                        name: functionName,\n                        description: schema.description ?? \"\",\n                        parameters: (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_6__.removeAdditionalProperties)(schema)\n                    };\n                }\n                tools = [\n                    {\n                        functionDeclarations: [\n                            geminiFunctionDefinition\n                        ]\n                    }\n                ];\n                outputParser = new _output_parsers_js__WEBPACK_IMPORTED_MODULE_8__.GoogleGenerativeAIToolsOutputParser({\n                    returnSingle: true,\n                    keyName: functionName\n                });\n            }\n            llm = this.bindTools(tools).withConfig({\n                allowedFunctionNames: [\n                    functionName\n                ]\n            });\n        } else {\n            const jsonSchema = (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_6__.schemaToGenerativeAIParameters)(schema);\n            llm = this.withConfig({\n                responseSchema: jsonSchema\n            });\n            outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_5__.JsonOutputParser();\n        }\n        if (!includeRaw) {\n            return llm.pipe(outputParser).withConfig({\n                runName: \"ChatGoogleGenerativeAIStructuredOutput\"\n            });\n        }\n        const parserAssign = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_3__.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config)=>outputParser.invoke(input.raw, config)\n        });\n        const parserNone = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_3__.RunnablePassthrough.assign({\n            parsed: ()=>null\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [\n                parserNone\n            ]\n        });\n        return _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_3__.RunnableSequence.from([\n            {\n                raw: llm\n            },\n            parsedWithFallback\n        ]).withConfig({\n            runName: \"StructuredOutputRunnable\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/embeddings.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/embeddings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* binding */ GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/core/embeddings.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n\n\n\n\n/**\n * Class that extends the Embeddings class and provides methods for\n * generating embeddings using the Google Palm API.\n * @example\n * ```typescript\n * const model = new GoogleGenerativeAIEmbeddings({\n *   apiKey: \"<YOUR API KEY>\",\n *   modelName: \"embedding-001\",\n * });\n *\n * // Embed a single query\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n *\n * // Embed multiple documents\n * const documentRes = await model.embedDocuments([\"Hello world\", \"Bye bye\"]);\n * console.log({ documentRes });\n * ```\n */ class GoogleGenerativeAIEmbeddings extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_2__.Embeddings {\n    constructor(fields){\n        super(fields ?? {});\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"embedding-001\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"embedding-001\"\n        });\n        Object.defineProperty(this, \"taskType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"title\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"maxBatchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 100\n        }); // Max batch size for embedDocuments set by GenerativeModel client's batchEmbedContents call\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.modelName = fields?.model?.replace(/^models\\//, \"\") ?? fields?.modelName?.replace(/^models\\//, \"\") ?? this.modelName;\n        this.model = this.modelName;\n        this.taskType = fields?.taskType ?? this.taskType;\n        this.title = fields?.title ?? this.title;\n        if (this.title && this.taskType !== \"RETRIEVAL_DOCUMENT\") {\n            throw new Error(\"title can only be sepcified with TaskType.RETRIEVAL_DOCUMENT\");\n        }\n        this.apiKey = fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n        if (!this.apiKey) {\n            throw new Error(\"Please set an API key for Google GenerativeAI \" + \"in the environmentb variable GOOGLE_API_KEY \" + \"or in the `apiKey` field of the \" + \"GoogleGenerativeAIEmbeddings constructor\");\n        }\n        this.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(this.apiKey).getGenerativeModel({\n            model: this.model\n        }, {\n            baseUrl: fields?.baseUrl\n        });\n    }\n    _convertToContent(text) {\n        const cleanedText = this.stripNewLines ? text.replace(/\\n/g, \" \") : text;\n        return {\n            content: {\n                role: \"user\",\n                parts: [\n                    {\n                        text: cleanedText\n                    }\n                ]\n            },\n            taskType: this.taskType,\n            title: this.title\n        };\n    }\n    async _embedQueryContent(text) {\n        const req = this._convertToContent(text);\n        const res = await this.client.embedContent(req);\n        return res.embedding.values ?? [];\n    }\n    async _embedDocumentsContent(documents) {\n        const batchEmbedChunks = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_3__.chunkArray)(documents, this.maxBatchSize);\n        const batchEmbedRequests = batchEmbedChunks.map((chunk)=>({\n                requests: chunk.map((doc)=>this._convertToContent(doc))\n            }));\n        const responses = await Promise.allSettled(batchEmbedRequests.map((req)=>this.client.batchEmbedContents(req)));\n        const embeddings = responses.flatMap((res, idx)=>{\n            if (res.status === \"fulfilled\") {\n                return res.value.embeddings.map((e)=>e.values || []);\n            } else {\n                return Array(batchEmbedChunks[idx].length).fill([]);\n            }\n        });\n        return embeddings;\n    }\n    /**\n     * Method that takes a document as input and returns a promise that\n     * resolves to an embedding for the document. It calls the _embedText\n     * method with the document as the input.\n     * @param document Document for which to generate an embedding.\n     * @returns Promise that resolves to an embedding for the input document.\n     */ embedQuery(document) {\n        return this.caller.call(this._embedQueryContent.bind(this), document);\n    }\n    /**\n     * Method that takes an array of documents as input and returns a promise\n     * that resolves to a 2D array of embeddings for each document. It calls\n     * the _embedText method for each document in the array.\n     * @param documents Array of documents for which to generate embeddings.\n     * @returns Promise that resolves to a 2D array of embeddings for each input document.\n     */ embedDocuments(documents) {\n        return this.caller.call(this._embedDocumentsContent.bind(this), documents);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatGoogleGenerativeAI),\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/chat_models.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/embeddings.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9pbmRleC5qcz8xMDViIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2NoYXRfbW9kZWxzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbWJlZGRpbmdzLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/output_parsers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/output_parsers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleGenerativeAIToolsOutputParser: () => (/* binding */ GoogleGenerativeAIToolsOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/@langchain/core/utils/types.js\");\n\n\nclass GoogleGenerativeAIToolsOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"GoogleGenerativeAIToolsOutputParser\";\n    }\n    constructor(params){\n        super(params);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"google_genai\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** The type of tool calls to return. */ Object.defineProperty(this, \"keyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Whether to return only the first tool call. */ Object.defineProperty(this, \"returnSingle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"zodSchema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyName = params.keyName;\n        this.returnSingle = params.returnSingle ?? this.returnSingle;\n        this.zodSchema = params.zodSchema;\n    }\n    async _validateResult(result) {\n        if (this.zodSchema === undefined) {\n            return result;\n        }\n        const zodParsedResult = await (0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_1__.interopSafeParseAsync)(this.zodSchema, result);\n        if (zodParsedResult.success) {\n            return zodParsedResult.data;\n        } else {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Failed to parse. Text: \"${JSON.stringify(result, null, 2)}\". Error: ${JSON.stringify(zodParsedResult.error.issues)}`, JSON.stringify(result, null, 2));\n        }\n    }\n    async parseResult(generations) {\n        const tools = generations.flatMap((generation)=>{\n            const { message } = generation;\n            if (!(\"tool_calls\" in message) || !Array.isArray(message.tool_calls)) {\n                return [];\n            }\n            return message.tool_calls;\n        });\n        if (tools[0] === undefined) {\n            throw new Error(\"No parseable tool calls provided to GoogleGenerativeAIToolsOutputParser.\");\n        }\n        const [tool] = tools;\n        const validatedResult = await this._validateResult(tool.args);\n        return validatedResult;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9vdXRwdXRfcGFyc2Vycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkY7QUFDeEI7QUFDOUQsTUFBTUcsNENBQTRDSCwrRUFBbUJBO0lBQ3hFLE9BQU9JLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQ0E7UUFDTkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWE7Z0JBQWdCO2FBQWlCO1FBQzFEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0Esc0NBQXNDLEdBQ3RDTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLGdEQUFnRCxHQUNoREwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHUCxPQUFPTyxPQUFPO1FBQzdCLElBQUksQ0FBQ0MsWUFBWSxHQUFHUixPQUFPUSxZQUFZLElBQUksSUFBSSxDQUFDQSxZQUFZO1FBQzVELElBQUksQ0FBQ0MsU0FBUyxHQUFHVCxPQUFPUyxTQUFTO0lBQ3JDO0lBQ0EsTUFBTUMsZ0JBQWdCQyxNQUFNLEVBQUU7UUFDMUIsSUFBSSxJQUFJLENBQUNGLFNBQVMsS0FBS0csV0FBVztZQUM5QixPQUFPRDtRQUNYO1FBQ0EsTUFBTUUsa0JBQWtCLE1BQU1qQixrRkFBcUJBLENBQUMsSUFBSSxDQUFDYSxTQUFTLEVBQUVFO1FBQ3BFLElBQUlFLGdCQUFnQkMsT0FBTyxFQUFFO1lBQ3pCLE9BQU9ELGdCQUFnQkUsSUFBSTtRQUMvQixPQUNLO1lBQ0QsTUFBTSxJQUFJcEIsaUZBQXFCQSxDQUFDLENBQUMsd0JBQXdCLEVBQUVxQixLQUFLQyxTQUFTLENBQUNOLFFBQVEsTUFBTSxHQUFHLFVBQVUsRUFBRUssS0FBS0MsU0FBUyxDQUFDSixnQkFBZ0JLLEtBQUssQ0FBQ0MsTUFBTSxFQUFFLENBQUMsRUFBRUgsS0FBS0MsU0FBUyxDQUFDTixRQUFRLE1BQU07UUFDeEw7SUFDSjtJQUNBLE1BQU1TLFlBQVlDLFdBQVcsRUFBRTtRQUMzQixNQUFNQyxRQUFRRCxZQUFZRSxPQUFPLENBQUMsQ0FBQ0M7WUFDL0IsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0Q7WUFDcEIsSUFBSSxDQUFFLGlCQUFnQkMsT0FBTSxLQUFNLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUUcsVUFBVSxHQUFHO2dCQUNsRSxPQUFPLEVBQUU7WUFDYjtZQUNBLE9BQU9ILFFBQVFHLFVBQVU7UUFDN0I7UUFDQSxJQUFJTixLQUFLLENBQUMsRUFBRSxLQUFLVixXQUFXO1lBQ3hCLE1BQU0sSUFBSWlCLE1BQU07UUFDcEI7UUFDQSxNQUFNLENBQUNDLEtBQUssR0FBR1I7UUFDZixNQUFNUyxrQkFBa0IsTUFBTSxJQUFJLENBQUNyQixlQUFlLENBQUNvQixLQUFLRSxJQUFJO1FBQzVELE9BQU9EO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9kaXN0L291dHB1dF9wYXJzZXJzLmpzPzA2ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUxMTU91dHB1dFBhcnNlciwgT3V0cHV0UGFyc2VyRXhjZXB0aW9uLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbmltcG9ydCB7IGludGVyb3BTYWZlUGFyc2VBc3luYywgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3R5cGVzXCI7XG5leHBvcnQgY2xhc3MgR29vZ2xlR2VuZXJhdGl2ZUFJVG9vbHNPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlTExNT3V0cHV0UGFyc2VyIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiR29vZ2xlR2VuZXJhdGl2ZUFJVG9vbHNPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwiZ29vZ2xlX2dlbmFpXCIsIFwib3V0cHV0X3BhcnNlcnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJldHVybklkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqIFRoZSB0eXBlIG9mIHRvb2wgY2FsbHMgdG8gcmV0dXJuLiAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJrZXlOYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBXaGV0aGVyIHRvIHJldHVybiBvbmx5IHRoZSBmaXJzdCB0b29sIGNhbGwuICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJldHVyblNpbmdsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInpvZFNjaGVtYVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmtleU5hbWUgPSBwYXJhbXMua2V5TmFtZTtcbiAgICAgICAgdGhpcy5yZXR1cm5TaW5nbGUgPSBwYXJhbXMucmV0dXJuU2luZ2xlID8/IHRoaXMucmV0dXJuU2luZ2xlO1xuICAgICAgICB0aGlzLnpvZFNjaGVtYSA9IHBhcmFtcy56b2RTY2hlbWE7XG4gICAgfVxuICAgIGFzeW5jIF92YWxpZGF0ZVJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHRoaXMuem9kU2NoZW1hID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgem9kUGFyc2VkUmVzdWx0ID0gYXdhaXQgaW50ZXJvcFNhZmVQYXJzZUFzeW5jKHRoaXMuem9kU2NoZW1hLCByZXN1bHQpO1xuICAgICAgICBpZiAoem9kUGFyc2VkUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB6b2RQYXJzZWRSZXN1bHQuZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPdXRwdXRQYXJzZXJFeGNlcHRpb24oYEZhaWxlZCB0byBwYXJzZS4gVGV4dDogXCIke0pTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMil9XCIuIEVycm9yOiAke0pTT04uc3RyaW5naWZ5KHpvZFBhcnNlZFJlc3VsdC5lcnJvci5pc3N1ZXMpfWAsIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlUmVzdWx0KGdlbmVyYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRvb2xzID0gZ2VuZXJhdGlvbnMuZmxhdE1hcCgoZ2VuZXJhdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSBnZW5lcmF0aW9uO1xuICAgICAgICAgICAgaWYgKCEoXCJ0b29sX2NhbGxzXCIgaW4gbWVzc2FnZSkgfHwgIUFycmF5LmlzQXJyYXkobWVzc2FnZS50b29sX2NhbGxzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLnRvb2xfY2FsbHM7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodG9vbHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gcGFyc2VhYmxlIHRvb2wgY2FsbHMgcHJvdmlkZWQgdG8gR29vZ2xlR2VuZXJhdGl2ZUFJVG9vbHNPdXRwdXRQYXJzZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFt0b29sXSA9IHRvb2xzO1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRSZXN1bHQgPSBhd2FpdCB0aGlzLl92YWxpZGF0ZVJlc3VsdCh0b29sLmFyZ3MpO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVkUmVzdWx0O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlTExNT3V0cHV0UGFyc2VyIiwiT3V0cHV0UGFyc2VyRXhjZXB0aW9uIiwiaW50ZXJvcFNhZmVQYXJzZUFzeW5jIiwiR29vZ2xlR2VuZXJhdGl2ZUFJVG9vbHNPdXRwdXRQYXJzZXIiLCJsY19uYW1lIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwia2V5TmFtZSIsInJldHVyblNpbmdsZSIsInpvZFNjaGVtYSIsIl92YWxpZGF0ZVJlc3VsdCIsInJlc3VsdCIsInVuZGVmaW5lZCIsInpvZFBhcnNlZFJlc3VsdCIsInN1Y2Nlc3MiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsImVycm9yIiwiaXNzdWVzIiwicGFyc2VSZXN1bHQiLCJnZW5lcmF0aW9ucyIsInRvb2xzIiwiZmxhdE1hcCIsImdlbmVyYXRpb24iLCJtZXNzYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwidG9vbF9jYWxscyIsIkVycm9yIiwidG9vbCIsInZhbGlkYXRlZFJlc3VsdCIsImFyZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/output_parsers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/utils/common.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/utils/common.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertAuthorToRole: () => (/* binding */ convertAuthorToRole),\n/* harmony export */   convertBaseMessagesToContent: () => (/* binding */ convertBaseMessagesToContent),\n/* harmony export */   convertMessageContentToParts: () => (/* binding */ convertMessageContentToParts),\n/* harmony export */   convertResponseContentToChatGenerationChunk: () => (/* binding */ convertResponseContentToChatGenerationChunk),\n/* harmony export */   convertToGenerativeAITools: () => (/* binding */ convertToGenerativeAITools),\n/* harmony export */   getMessageAuthor: () => (/* binding */ getMessageAuthor),\n/* harmony export */   mapGenerateContentResultToChatResult: () => (/* binding */ mapGenerateContentResultToChatResult)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./zod_to_genai_parameters.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\");\n\n\n\n\n\n\nfunction getMessageAuthor(message) {\n    const type = message._getType();\n    if (_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message)) {\n        return message.role;\n    }\n    if (type === \"tool\") {\n        return type;\n    }\n    return message.name ?? type;\n}\n/**\n * Maps a message type to a Google Generative AI chat author.\n * @param message The message to map.\n * @param model The model to use for mapping.\n * @returns The message type mapped to a Google Generative AI chat author.\n */ function convertAuthorToRole(author) {\n    switch(author){\n        /**\n         *  Note: Gemini currently is not supporting system messages\n         *  we will convert them to human messages and merge with following\n         * */ case \"supervisor\":\n        case \"ai\":\n        case \"model\":\n            return \"model\";\n        case \"system\":\n            return \"system\";\n        case \"human\":\n            return \"user\";\n        case \"tool\":\n        case \"function\":\n            return \"function\";\n        default:\n            throw new Error(`Unknown / unsupported author: ${author}`);\n    }\n}\nfunction messageContentMedia(content) {\n    if (\"mimeType\" in content && \"data\" in content) {\n        return {\n            inlineData: {\n                mimeType: content.mimeType,\n                data: content.data\n            }\n        };\n    }\n    if (\"mimeType\" in content && \"fileUri\" in content) {\n        return {\n            fileData: {\n                mimeType: content.mimeType,\n                fileUri: content.fileUri\n            }\n        };\n    }\n    throw new Error(\"Invalid media content\");\n}\nfunction inferToolNameFromPreviousMessages(message, previousMessages) {\n    return previousMessages.map((msg)=>{\n        if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isAIMessage)(msg)) {\n            return msg.tool_calls ?? [];\n        }\n        return [];\n    }).flat().find((toolCall)=>{\n        return toolCall.id === message.tool_call_id;\n    })?.name;\n}\nfunction _getStandardContentBlockConverter(isMultimodalModel) {\n    const standardContentBlockConverter = {\n        providerName: \"Google Gemini\",\n        fromStandardTextBlock (block) {\n            return {\n                text: block.text\n            };\n        },\n        fromStandardImageBlock (block) {\n            if (!isMultimodalModel) {\n                throw new Error(\"This model does not support images\");\n            }\n            if (block.source_type === \"url\") {\n                const data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.parseBase64DataUrl)({\n                    dataUrl: block.url\n                });\n                if (data) {\n                    return {\n                        inlineData: {\n                            mimeType: data.mime_type,\n                            data: data.data\n                        }\n                    };\n                } else {\n                    return {\n                        fileData: {\n                            mimeType: block.mime_type ?? \"\",\n                            fileUri: block.url\n                        }\n                    };\n                }\n            }\n            if (block.source_type === \"base64\") {\n                return {\n                    inlineData: {\n                        mimeType: block.mime_type ?? \"\",\n                        data: block.data\n                    }\n                };\n            }\n            throw new Error(`Unsupported source type: ${block.source_type}`);\n        },\n        fromStandardAudioBlock (block) {\n            if (!isMultimodalModel) {\n                throw new Error(\"This model does not support audio\");\n            }\n            if (block.source_type === \"url\") {\n                const data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.parseBase64DataUrl)({\n                    dataUrl: block.url\n                });\n                if (data) {\n                    return {\n                        inlineData: {\n                            mimeType: data.mime_type,\n                            data: data.data\n                        }\n                    };\n                } else {\n                    return {\n                        fileData: {\n                            mimeType: block.mime_type ?? \"\",\n                            fileUri: block.url\n                        }\n                    };\n                }\n            }\n            if (block.source_type === \"base64\") {\n                return {\n                    inlineData: {\n                        mimeType: block.mime_type ?? \"\",\n                        data: block.data\n                    }\n                };\n            }\n            throw new Error(`Unsupported source type: ${block.source_type}`);\n        },\n        fromStandardFileBlock (block) {\n            if (!isMultimodalModel) {\n                throw new Error(\"This model does not support files\");\n            }\n            if (block.source_type === \"text\") {\n                return {\n                    text: block.text\n                };\n            }\n            if (block.source_type === \"url\") {\n                const data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.parseBase64DataUrl)({\n                    dataUrl: block.url\n                });\n                if (data) {\n                    return {\n                        inlineData: {\n                            mimeType: data.mime_type,\n                            data: data.data\n                        }\n                    };\n                } else {\n                    return {\n                        fileData: {\n                            mimeType: block.mime_type ?? \"\",\n                            fileUri: block.url\n                        }\n                    };\n                }\n            }\n            if (block.source_type === \"base64\") {\n                return {\n                    inlineData: {\n                        mimeType: block.mime_type ?? \"\",\n                        data: block.data\n                    }\n                };\n            }\n            throw new Error(`Unsupported source type: ${block.source_type}`);\n        }\n    };\n    return standardContentBlockConverter;\n}\nfunction _convertLangChainContentToPart(content, isMultimodalModel) {\n    if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isDataContentBlock)(content)) {\n        return (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.convertToProviderContentBlock)(content, _getStandardContentBlockConverter(isMultimodalModel));\n    }\n    if (content.type === \"text\") {\n        return {\n            text: content.text\n        };\n    } else if (content.type === \"executableCode\") {\n        return {\n            executableCode: content.executableCode\n        };\n    } else if (content.type === \"codeExecutionResult\") {\n        return {\n            codeExecutionResult: content.codeExecutionResult\n        };\n    } else if (content.type === \"image_url\") {\n        if (!isMultimodalModel) {\n            throw new Error(`This model does not support images`);\n        }\n        let source;\n        if (typeof content.image_url === \"string\") {\n            source = content.image_url;\n        } else if (typeof content.image_url === \"object\" && \"url\" in content.image_url) {\n            source = content.image_url.url;\n        } else {\n            throw new Error(\"Please provide image as base64 encoded data URL\");\n        }\n        const [dm, data] = source.split(\",\");\n        if (!dm.startsWith(\"data:\")) {\n            throw new Error(\"Please provide image as base64 encoded data URL\");\n        }\n        const [mimeType, encoding] = dm.replace(/^data:/, \"\").split(\";\");\n        if (encoding !== \"base64\") {\n            throw new Error(\"Please provide image as base64 encoded data URL\");\n        }\n        return {\n            inlineData: {\n                data,\n                mimeType\n            }\n        };\n    } else if (content.type === \"media\") {\n        return messageContentMedia(content);\n    } else if (content.type === \"tool_use\") {\n        return {\n            functionCall: {\n                name: content.name,\n                args: content.input\n            }\n        };\n    } else if (content.type?.includes(\"/\") && // Ensure it's a single slash.\n    content.type.split(\"/\").length === 2 && \"data\" in content && typeof content.data === \"string\") {\n        return {\n            inlineData: {\n                mimeType: content.type,\n                data: content.data\n            }\n        };\n    } else if (\"functionCall\" in content) {\n        // No action needed here — function calls will be added later from message.tool_calls\n        return undefined;\n    } else {\n        if (\"type\" in content) {\n            throw new Error(`Unknown content type ${content.type}`);\n        } else {\n            throw new Error(`Unknown content ${JSON.stringify(content)}`);\n        }\n    }\n}\nfunction convertMessageContentToParts(message, isMultimodalModel, previousMessages) {\n    if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isToolMessage)(message)) {\n        const messageName = message.name ?? inferToolNameFromPreviousMessages(message, previousMessages);\n        if (messageName === undefined) {\n            throw new Error(`Google requires a tool name for each tool call response, and we could not infer a called tool name for ToolMessage \"${message.id}\" from your passed messages. Please populate a \"name\" field on that ToolMessage explicitly.`);\n        }\n        const result = Array.isArray(message.content) ? message.content.map((c)=>_convertLangChainContentToPart(c, isMultimodalModel)).filter((p)=>p !== undefined) : message.content;\n        if (message.status === \"error\") {\n            return [\n                {\n                    functionResponse: {\n                        name: messageName,\n                        // The API expects an object with an `error` field if the function call fails.\n                        // `error` must be a valid object (not a string or array), so we wrap `message.content` here\n                        response: {\n                            error: {\n                                details: result\n                            }\n                        }\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                functionResponse: {\n                    name: messageName,\n                    // again, can't have a string or array value for `response`, so we wrap it as an object here\n                    response: {\n                        result\n                    }\n                }\n            }\n        ];\n    }\n    let functionCalls = [];\n    const messageParts = [];\n    if (typeof message.content === \"string\" && message.content) {\n        messageParts.push({\n            text: message.content\n        });\n    }\n    if (Array.isArray(message.content)) {\n        messageParts.push(...message.content.map((c)=>_convertLangChainContentToPart(c, isMultimodalModel)).filter((p)=>p !== undefined));\n    }\n    if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isAIMessage)(message) && message.tool_calls?.length) {\n        functionCalls = message.tool_calls.map((tc)=>{\n            return {\n                functionCall: {\n                    name: tc.name,\n                    args: tc.args\n                }\n            };\n        });\n    }\n    return [\n        ...messageParts,\n        ...functionCalls\n    ];\n}\nfunction convertBaseMessagesToContent(messages, isMultimodalModel, convertSystemMessageToHumanContent = false) {\n    return messages.reduce((acc, message, index)=>{\n        if (!(0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(message)) {\n            throw new Error(\"Unsupported message input\");\n        }\n        const author = getMessageAuthor(message);\n        if (author === \"system\" && index !== 0) {\n            throw new Error(\"System message should be the first one\");\n        }\n        const role = convertAuthorToRole(author);\n        const prevContent = acc.content[acc.content.length];\n        if (!acc.mergeWithPreviousContent && prevContent && prevContent.role === role) {\n            throw new Error(\"Google Generative AI requires alternate messages between authors\");\n        }\n        const parts = convertMessageContentToParts(message, isMultimodalModel, messages.slice(0, index));\n        if (acc.mergeWithPreviousContent) {\n            const prevContent = acc.content[acc.content.length - 1];\n            if (!prevContent) {\n                throw new Error(\"There was a problem parsing your system message. Please try a prompt without one.\");\n            }\n            prevContent.parts.push(...parts);\n            return {\n                mergeWithPreviousContent: false,\n                content: acc.content\n            };\n        }\n        let actualRole = role;\n        if (actualRole === \"function\" || actualRole === \"system\" && !convertSystemMessageToHumanContent) {\n            // GenerativeAI API will throw an error if the role is not \"user\" or \"model.\"\n            actualRole = \"user\";\n        }\n        const content = {\n            role: actualRole,\n            parts\n        };\n        return {\n            mergeWithPreviousContent: author === \"system\" && !convertSystemMessageToHumanContent,\n            content: [\n                ...acc.content,\n                content\n            ]\n        };\n    }, {\n        content: [],\n        mergeWithPreviousContent: false\n    }).content;\n}\nfunction mapGenerateContentResultToChatResult(response, extra) {\n    // if rejected or error, return empty generations with reason in filters\n    if (!response.candidates || response.candidates.length === 0 || !response.candidates[0]) {\n        return {\n            generations: [],\n            llmOutput: {\n                filters: response.promptFeedback\n            }\n        };\n    }\n    const functionCalls = response.functionCalls();\n    const [candidate] = response.candidates;\n    const { content: candidateContent, ...generationInfo } = candidate;\n    let content;\n    if (Array.isArray(candidateContent?.parts) && candidateContent.parts.length === 1 && candidateContent.parts[0].text) {\n        content = candidateContent.parts[0].text;\n    } else if (Array.isArray(candidateContent?.parts) && candidateContent.parts.length > 0) {\n        content = candidateContent.parts.map((p)=>{\n            if (\"text\" in p) {\n                return {\n                    type: \"text\",\n                    text: p.text\n                };\n            } else if (\"executableCode\" in p) {\n                return {\n                    type: \"executableCode\",\n                    executableCode: p.executableCode\n                };\n            } else if (\"codeExecutionResult\" in p) {\n                return {\n                    type: \"codeExecutionResult\",\n                    codeExecutionResult: p.codeExecutionResult\n                };\n            }\n            return p;\n        });\n    } else {\n        // no content returned - likely due to abnormal stop reason, e.g. malformed function call\n        content = [];\n    }\n    let text = \"\";\n    if (typeof content === \"string\") {\n        text = content;\n    } else if (Array.isArray(content) && content.length > 0) {\n        const block = content.find((b)=>\"text\" in b);\n        text = block?.text ?? text;\n    }\n    const generation = {\n        text,\n        message: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage({\n            content: content ?? \"\",\n            tool_calls: functionCalls?.map((fc)=>{\n                return {\n                    ...fc,\n                    type: \"tool_call\",\n                    id: \"id\" in fc && typeof fc.id === \"string\" ? fc.id : (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()\n                };\n            }),\n            additional_kwargs: {\n                ...generationInfo\n            },\n            usage_metadata: extra?.usageMetadata\n        }),\n        generationInfo\n    };\n    return {\n        generations: [\n            generation\n        ],\n        llmOutput: {\n            tokenUsage: {\n                promptTokens: extra?.usageMetadata?.input_tokens,\n                completionTokens: extra?.usageMetadata?.output_tokens,\n                totalTokens: extra?.usageMetadata?.total_tokens\n            }\n        }\n    };\n}\nfunction convertResponseContentToChatGenerationChunk(response, extra) {\n    if (!response.candidates || response.candidates.length === 0) {\n        return null;\n    }\n    const functionCalls = response.functionCalls();\n    const [candidate] = response.candidates;\n    const { content: candidateContent, ...generationInfo } = candidate;\n    let content;\n    // Checks if some parts do not have text. If false, it means that the content is a string.\n    if (Array.isArray(candidateContent?.parts) && candidateContent.parts.every((p)=>\"text\" in p)) {\n        content = candidateContent.parts.map((p)=>p.text).join(\"\");\n    } else if (Array.isArray(candidateContent?.parts)) {\n        content = candidateContent.parts.map((p)=>{\n            if (\"text\" in p) {\n                return {\n                    type: \"text\",\n                    text: p.text\n                };\n            } else if (\"executableCode\" in p) {\n                return {\n                    type: \"executableCode\",\n                    executableCode: p.executableCode\n                };\n            } else if (\"codeExecutionResult\" in p) {\n                return {\n                    type: \"codeExecutionResult\",\n                    codeExecutionResult: p.codeExecutionResult\n                };\n            }\n            return p;\n        });\n    } else {\n        // no content returned - likely due to abnormal stop reason, e.g. malformed function call\n        content = [];\n    }\n    let text = \"\";\n    if (content && typeof content === \"string\") {\n        text = content;\n    } else if (Array.isArray(content)) {\n        const block = content.find((b)=>\"text\" in b);\n        text = block?.text ?? \"\";\n    }\n    const toolCallChunks = [];\n    if (functionCalls) {\n        toolCallChunks.push(...functionCalls.map((fc)=>({\n                ...fc,\n                args: JSON.stringify(fc.args),\n                index: extra.index,\n                type: \"tool_call_chunk\",\n                id: \"id\" in fc && typeof fc.id === \"string\" ? fc.id : (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()\n            })));\n    }\n    return new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.ChatGenerationChunk({\n        text,\n        message: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n            content: content || \"\",\n            name: !candidateContent ? undefined : candidateContent.role,\n            tool_call_chunks: toolCallChunks,\n            // Each chunk can have unique \"generationInfo\", and merging strategy is unclear,\n            // so leave blank for now.\n            additional_kwargs: {},\n            usage_metadata: extra.usageMetadata\n        }),\n        generationInfo\n    });\n}\nfunction convertToGenerativeAITools(tools) {\n    if (tools.every((tool)=>\"functionDeclarations\" in tool && Array.isArray(tool.functionDeclarations))) {\n        return tools;\n    }\n    return [\n        {\n            functionDeclarations: tools.map((tool)=>{\n                if ((0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_2__.isLangChainTool)(tool)) {\n                    const jsonSchema = (0,_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_4__.schemaToGenerativeAIParameters)(tool.schema);\n                    if (jsonSchema.type === \"object\" && \"properties\" in jsonSchema && Object.keys(jsonSchema.properties).length === 0) {\n                        return {\n                            name: tool.name,\n                            description: tool.description\n                        };\n                    }\n                    return {\n                        name: tool.name,\n                        description: tool.description,\n                        parameters: jsonSchema\n                    };\n                }\n                if ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__.isOpenAITool)(tool)) {\n                    return {\n                        name: tool.function.name,\n                        description: tool.function.description ?? `A function available to call.`,\n                        parameters: (0,_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_4__.jsonSchemaToGeminiParameters)(tool.function.parameters)\n                    };\n                }\n                return tool;\n            })\n        }\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/utils/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/utils/tools.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/utils/tools.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToolsToGenAI: () => (/* binding */ convertToolsToGenAI)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils/common.js\");\n/* harmony import */ var _zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./zod_to_genai_parameters.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\");\n\n\n\n\n\nfunction convertToolsToGenAI(tools, extra) {\n    // Extract function declaration processing to a separate function\n    const genAITools = processTools(tools);\n    // Simplify tool config creation\n    const toolConfig = createToolConfig(genAITools, extra);\n    return {\n        tools: genAITools,\n        toolConfig\n    };\n}\nfunction processTools(tools) {\n    let functionDeclarationTools = [];\n    const genAITools = [];\n    tools.forEach((tool)=>{\n        if ((0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.isLangChainTool)(tool)) {\n            const [convertedTool] = (0,_common_js__WEBPACK_IMPORTED_MODULE_3__.convertToGenerativeAITools)([\n                tool\n            ]);\n            if (convertedTool.functionDeclarations) {\n                functionDeclarationTools.push(...convertedTool.functionDeclarations);\n            }\n        } else if ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_2__.isOpenAITool)(tool)) {\n            const { functionDeclarations } = convertOpenAIToolToGenAI(tool);\n            if (functionDeclarations) {\n                functionDeclarationTools.push(...functionDeclarations);\n            } else {\n                throw new Error(\"Failed to convert OpenAI structured tool to GenerativeAI tool\");\n            }\n        } else {\n            genAITools.push(tool);\n        }\n    });\n    const genAIFunctionDeclaration = genAITools.find((t)=>\"functionDeclarations\" in t);\n    if (genAIFunctionDeclaration) {\n        return genAITools.map((tool)=>{\n            if (functionDeclarationTools?.length > 0 && \"functionDeclarations\" in tool) {\n                const newTool = {\n                    functionDeclarations: [\n                        ...tool.functionDeclarations || [],\n                        ...functionDeclarationTools\n                    ]\n                };\n                // Clear the functionDeclarationTools array so it is not passed again\n                functionDeclarationTools = [];\n                return newTool;\n            }\n            return tool;\n        });\n    }\n    return [\n        ...genAITools,\n        ...functionDeclarationTools.length > 0 ? [\n            {\n                functionDeclarations: functionDeclarationTools\n            }\n        ] : []\n    ];\n}\nfunction convertOpenAIToolToGenAI(tool) {\n    return {\n        functionDeclarations: [\n            {\n                name: tool.function.name,\n                description: tool.function.description,\n                parameters: (0,_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_4__.removeAdditionalProperties)(tool.function.parameters)\n            }\n        ]\n    };\n}\nfunction createToolConfig(genAITools, extra) {\n    if (!genAITools.length || !extra) return undefined;\n    const { toolChoice, allowedFunctionNames } = extra;\n    const modeMap = {\n        any: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.FunctionCallingMode.ANY,\n        auto: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.FunctionCallingMode.AUTO,\n        none: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.FunctionCallingMode.NONE\n    };\n    if (toolChoice && [\n        \"any\",\n        \"auto\",\n        \"none\"\n    ].includes(toolChoice)) {\n        return {\n            functionCallingConfig: {\n                mode: modeMap[toolChoice] ?? \"MODE_UNSPECIFIED\",\n                allowedFunctionNames\n            }\n        };\n    }\n    if (typeof toolChoice === \"string\" || allowedFunctionNames) {\n        return {\n            functionCallingConfig: {\n                mode: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.FunctionCallingMode.ANY,\n                allowedFunctionNames: [\n                    ...allowedFunctionNames ?? [],\n                    ...toolChoice && typeof toolChoice === \"string\" ? [\n                        toolChoice\n                    ] : []\n                ]\n            }\n        };\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/utils/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsonSchemaToGeminiParameters: () => (/* binding */ jsonSchemaToGeminiParameters),\n/* harmony export */   removeAdditionalProperties: () => (/* binding */ removeAdditionalProperties),\n/* harmony export */   schemaToGenerativeAIParameters: () => (/* binding */ schemaToGenerativeAIParameters)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/@langchain/core/utils/types.js\");\n/* harmony import */ var _langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/@langchain/core/utils/json_schema.js\");\n/* eslint-disable @typescript-eslint/no-unused-vars */ \n\nfunction removeAdditionalProperties(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const newObj = {\n            ...obj\n        };\n        if (\"additionalProperties\" in newObj) {\n            delete newObj.additionalProperties;\n        }\n        if (\"$schema\" in newObj) {\n            delete newObj.$schema;\n        }\n        if (\"strict\" in newObj) {\n            delete newObj.strict;\n        }\n        for(const key in newObj){\n            if (key in newObj) {\n                if (Array.isArray(newObj[key])) {\n                    newObj[key] = newObj[key].map(removeAdditionalProperties);\n                } else if (typeof newObj[key] === \"object\" && newObj[key] !== null) {\n                    newObj[key] = removeAdditionalProperties(newObj[key]);\n                }\n            }\n        }\n        return newObj;\n    }\n    return obj;\n}\nfunction schemaToGenerativeAIParameters(schema) {\n    // GenerativeAI doesn't accept either the $schema or additionalProperties\n    // attributes, so we need to explicitly remove them.\n    const jsonSchema = removeAdditionalProperties((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__.isInteropZodSchema)(schema) ? (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_1__.toJsonSchema)(schema) : schema);\n    const { $schema, ...rest } = jsonSchema;\n    return rest;\n}\nfunction jsonSchemaToGeminiParameters(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema) {\n    // Gemini doesn't accept either the $schema or additionalProperties\n    // attributes, so we need to explicitly remove them.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const jsonSchema = removeAdditionalProperties(schema);\n    const { $schema, ...rest } = jsonSchema;\n    return rest;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC91dGlscy96b2RfdG9fZ2VuYWlfcGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLG9EQUFvRCxHQUNjO0FBQ0E7QUFDM0QsU0FBU0UsMkJBQ2hCLDhEQUE4RDtBQUM5REMsR0FBRztJQUNDLElBQUksT0FBT0EsUUFBUSxZQUFZQSxRQUFRLE1BQU07UUFDekMsTUFBTUMsU0FBUztZQUFFLEdBQUdELEdBQUc7UUFBQztRQUN4QixJQUFJLDBCQUEwQkMsUUFBUTtZQUNsQyxPQUFPQSxPQUFPQyxvQkFBb0I7UUFDdEM7UUFDQSxJQUFJLGFBQWFELFFBQVE7WUFDckIsT0FBT0EsT0FBT0UsT0FBTztRQUN6QjtRQUNBLElBQUksWUFBWUYsUUFBUTtZQUNwQixPQUFPQSxPQUFPRyxNQUFNO1FBQ3hCO1FBQ0EsSUFBSyxNQUFNQyxPQUFPSixPQUFRO1lBQ3RCLElBQUlJLE9BQU9KLFFBQVE7Z0JBQ2YsSUFBSUssTUFBTUMsT0FBTyxDQUFDTixNQUFNLENBQUNJLElBQUksR0FBRztvQkFDNUJKLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHSixNQUFNLENBQUNJLElBQUksQ0FBQ0csR0FBRyxDQUFDVDtnQkFDbEMsT0FDSyxJQUFJLE9BQU9FLE1BQU0sQ0FBQ0ksSUFBSSxLQUFLLFlBQVlKLE1BQU0sQ0FBQ0ksSUFBSSxLQUFLLE1BQU07b0JBQzlESixNQUFNLENBQUNJLElBQUksR0FBR04sMkJBQTJCRSxNQUFNLENBQUNJLElBQUk7Z0JBQ3hEO1lBQ0o7UUFDSjtRQUNBLE9BQU9KO0lBQ1g7SUFDQSxPQUFPRDtBQUNYO0FBQ08sU0FBU1MsK0JBQStCQyxNQUFNO0lBQ2pELHlFQUF5RTtJQUN6RSxvREFBb0Q7SUFDcEQsTUFBTUMsYUFBYVosMkJBQTJCRiwrRUFBa0JBLENBQUNhLFVBQVVaLCtFQUFZQSxDQUFDWSxVQUFVQTtJQUNsRyxNQUFNLEVBQUVQLE9BQU8sRUFBRSxHQUFHUyxNQUFNLEdBQUdEO0lBQzdCLE9BQU9DO0FBQ1g7QUFDTyxTQUFTQyw2QkFDaEIsOERBQThEO0FBQzlESCxNQUFNO0lBQ0YsbUVBQW1FO0lBQ25FLG9EQUFvRDtJQUNwRCw4REFBOEQ7SUFDOUQsTUFBTUMsYUFBYVosMkJBQTJCVztJQUM5QyxNQUFNLEVBQUVQLE9BQU8sRUFBRSxHQUFHUyxNQUFNLEdBQUdEO0lBQzdCLE9BQU9DO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC91dGlscy96b2RfdG9fZ2VuYWlfcGFyYW1ldGVycy5qcz81OWFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgaXNJbnRlcm9wWm9kU2NoZW1hLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvdHlwZXNcIjtcbmltcG9ydCB7IHRvSnNvblNjaGVtYSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2pzb25fc2NoZW1hXCI7XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxub2JqKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgb2JqICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG5ld09iaiA9IHsgLi4ub2JqIH07XG4gICAgICAgIGlmIChcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCIgaW4gbmV3T2JqKSB7XG4gICAgICAgICAgICBkZWxldGUgbmV3T2JqLmFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcIiRzY2hlbWFcIiBpbiBuZXdPYmopIHtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdPYmouJHNjaGVtYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJzdHJpY3RcIiBpbiBuZXdPYmopIHtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdPYmouc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld09iaikge1xuICAgICAgICAgICAgaWYgKGtleSBpbiBuZXdPYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdPYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBuZXdPYmpba2V5XS5tYXAocmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgbmV3T2JqW2tleV0gPT09IFwib2JqZWN0XCIgJiYgbmV3T2JqW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSByZW1vdmVBZGRpdGlvbmFsUHJvcGVydGllcyhuZXdPYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gc2NoZW1hVG9HZW5lcmF0aXZlQUlQYXJhbWV0ZXJzKHNjaGVtYSkge1xuICAgIC8vIEdlbmVyYXRpdmVBSSBkb2Vzbid0IGFjY2VwdCBlaXRoZXIgdGhlICRzY2hlbWEgb3IgYWRkaXRpb25hbFByb3BlcnRpZXNcbiAgICAvLyBhdHRyaWJ1dGVzLCBzbyB3ZSBuZWVkIHRvIGV4cGxpY2l0bHkgcmVtb3ZlIHRoZW0uXG4gICAgY29uc3QganNvblNjaGVtYSA9IHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKGlzSW50ZXJvcFpvZFNjaGVtYShzY2hlbWEpID8gdG9Kc29uU2NoZW1hKHNjaGVtYSkgOiBzY2hlbWEpO1xuICAgIGNvbnN0IHsgJHNjaGVtYSwgLi4ucmVzdCB9ID0ganNvblNjaGVtYTtcbiAgICByZXR1cm4gcmVzdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqc29uU2NoZW1hVG9HZW1pbmlQYXJhbWV0ZXJzKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnNjaGVtYSkge1xuICAgIC8vIEdlbWluaSBkb2Vzbid0IGFjY2VwdCBlaXRoZXIgdGhlICRzY2hlbWEgb3IgYWRkaXRpb25hbFByb3BlcnRpZXNcbiAgICAvLyBhdHRyaWJ1dGVzLCBzbyB3ZSBuZWVkIHRvIGV4cGxpY2l0bHkgcmVtb3ZlIHRoZW0uXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBqc29uU2NoZW1hID0gcmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMoc2NoZW1hKTtcbiAgICBjb25zdCB7ICRzY2hlbWEsIC4uLnJlc3QgfSA9IGpzb25TY2hlbWE7XG4gICAgcmV0dXJuIHJlc3Q7XG59XG4iXSwibmFtZXMiOlsiaXNJbnRlcm9wWm9kU2NoZW1hIiwidG9Kc29uU2NoZW1hIiwicmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMiLCJvYmoiLCJuZXdPYmoiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsIiRzY2hlbWEiLCJzdHJpY3QiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJzY2hlbWFUb0dlbmVyYXRpdmVBSVBhcmFtZXRlcnMiLCJzY2hlbWEiLCJqc29uU2NoZW1hIiwicmVzdCIsImpzb25TY2hlbWFUb0dlbWluaVBhcmFtZXRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/google-genai/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatGoogleGenerativeAI),\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL2luZGV4LmpzP2M5NTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/native.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/native.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    randomUUID: crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9DO0FBQ3BDLGlFQUFlO0lBQUVBLFVBQVVBLGdEQUFBQTtBQUFDLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS9uYXRpdmUuanM/MGIyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnY3J5cHRvJztcbmV4cG9ydCBkZWZhdWx0IHsgcmFuZG9tVVVJRCB9O1xuIl0sIm5hbWVzIjpbInJhbmRvbVVVSUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/native.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/regex.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/regex.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLDBKQUEwSixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtL3JlZ2V4LmpzP2U0NmEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS04XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDB8ZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmKSQvaTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/rng.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/rng.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync)(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdDO0FBQ3hDLE1BQU1DLFlBQVksSUFBSUMsV0FBVztBQUNqQyxJQUFJQyxVQUFVRixVQUFVRyxNQUFNO0FBQ2YsU0FBU0M7SUFDcEIsSUFBSUYsVUFBVUYsVUFBVUcsTUFBTSxHQUFHLElBQUk7UUFDakNKLHNEQUFjQSxDQUFDQztRQUNmRSxVQUFVO0lBQ2Q7SUFDQSxPQUFPRixVQUFVSyxLQUFLLENBQUNILFNBQVVBLFdBQVc7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vcm5nLmpzPzZlYWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmFuZG9tRmlsbFN5bmMgfSBmcm9tICdjcnlwdG8nO1xuY29uc3Qgcm5kczhQb29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmxldCBwb29sUHRyID0gcm5kczhQb29sLmxlbmd0aDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgICAgICByYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgICAgICBwb29sUHRyID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHJuZHM4UG9vbC5zbGljZShwb29sUHRyLCAocG9vbFB0ciArPSAxNikpO1xufVxuIl0sIm5hbWVzIjpbInJhbmRvbUZpbGxTeW5jIiwicm5kczhQb29sIiwiVWludDhBcnJheSIsInBvb2xQdHIiLCJsZW5ndGgiLCJybmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/stringify.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/stringify.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/validate.js\");\n\nconst byteToHex = [];\nfor(let i = 0; i < 256; ++i){\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNyQyxNQUFNQyxZQUFZLEVBQUU7QUFDcEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksS0FBSyxFQUFFQSxFQUFHO0lBQzFCRCxVQUFVRSxJQUFJLENBQUMsQ0FBQ0QsSUFBSSxLQUFJLEVBQUdFLFFBQVEsQ0FBQyxJQUFJQyxLQUFLLENBQUM7QUFDbEQ7QUFDTyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsU0FBUyxDQUFDO0lBQzNDLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQzlCUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FDMUJQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQzFCLE1BQ0FQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQzFCLE1BQ0FQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQzFCLE1BQ0FQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQzFCLE1BQ0FQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUMzQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQzNCUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FDM0JQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUMzQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQzNCUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsRUFBRUMsV0FBVztBQUNoRDtBQUNBLFNBQVNDLFVBQVVILEdBQUcsRUFBRUMsU0FBUyxDQUFDO0lBQzlCLE1BQU1HLE9BQU9MLGdCQUFnQkMsS0FBS0M7SUFDbEMsSUFBSSxDQUFDUix3REFBUUEsQ0FBQ1csT0FBTztRQUNqQixNQUFNQyxVQUFVO0lBQ3BCO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBLGlFQUFlRCxTQUFTQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtL3N0cmluZ2lmeS5qcz82Zjc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gICAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdXVpZDtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTtcbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsInVuc2FmZVN0cmluZ2lmeSIsImFyciIsIm9mZnNldCIsInRvTG93ZXJDYXNlIiwic3RyaW5naWZ5IiwidXVpZCIsIlR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/v4.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/v4.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0,_rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    if (rnds.length < 16) {\n        throw new Error(\"Random bytes length must be >= 16\");\n    }\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for(let i = 0; i < 16; ++i){\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pELFNBQVNHLEdBQUdDLE9BQU8sRUFBRUMsR0FBRyxFQUFFQyxNQUFNO0lBQzVCLElBQUlOLGtEQUFNQSxDQUFDTyxVQUFVLElBQUksQ0FBQ0YsT0FBTyxDQUFDRCxTQUFTO1FBQ3ZDLE9BQU9KLGtEQUFNQSxDQUFDTyxVQUFVO0lBQzVCO0lBQ0FILFVBQVVBLFdBQVcsQ0FBQztJQUN0QixNQUFNSSxPQUFPSixRQUFRSyxNQUFNLElBQUlMLFFBQVFILEdBQUcsUUFBUUEsbURBQUdBO0lBQ3JELElBQUlPLEtBQUtFLE1BQU0sR0FBRyxJQUFJO1FBQ2xCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBSCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUssQ0FBQyxFQUFFLEdBQUcsT0FBUTtJQUM3QkEsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFLLENBQUMsRUFBRSxHQUFHLE9BQVE7SUFDN0IsSUFBSUgsS0FBSztRQUNMQyxTQUFTQSxVQUFVO1FBQ25CLElBQUlBLFNBQVMsS0FBS0EsU0FBUyxLQUFLRCxJQUFJSyxNQUFNLEVBQUU7WUFDeEMsTUFBTSxJQUFJRSxXQUFXLENBQUMsZ0JBQWdCLEVBQUVOLE9BQU8sQ0FBQyxFQUFFQSxTQUFTLEdBQUcsd0JBQXdCLENBQUM7UUFDM0Y7UUFDQSxJQUFLLElBQUlPLElBQUksR0FBR0EsSUFBSSxJQUFJLEVBQUVBLEVBQUc7WUFDekJSLEdBQUcsQ0FBQ0MsU0FBU08sRUFBRSxHQUFHTCxJQUFJLENBQUNLLEVBQUU7UUFDN0I7UUFDQSxPQUFPUjtJQUNYO0lBQ0EsT0FBT0gsOERBQWVBLENBQUNNO0FBQzNCO0FBQ0EsaUVBQWVMLEVBQUVBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vdjQuanM/ODVhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmF0aXZlIGZyb20gJy4vbmF0aXZlLmpzJztcbmltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tID8/IG9wdGlvbnMucm5nPy4oKSA/PyBybmcoKTtcbiAgICBpZiAocm5kcy5sZW5ndGggPCAxNikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JhbmRvbSBieXRlcyBsZW5ndGggbXVzdCBiZSA+PSAxNicpO1xuICAgIH1cbiAgICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gICAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuICAgIGlmIChidWYpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDE2ID4gYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVVSUQgYnl0ZSByYW5nZSAke29mZnNldH06JHtvZmZzZXQgKyAxNX0gaXMgb3V0IG9mIGJ1ZmZlciBib3VuZHNgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHY0O1xuIl0sIm5hbWVzIjpbIm5hdGl2ZSIsInJuZyIsInVuc2FmZVN0cmluZ2lmeSIsInY0Iiwib3B0aW9ucyIsImJ1ZiIsIm9mZnNldCIsInJhbmRvbVVVSUQiLCJybmRzIiwicmFuZG9tIiwibGVuZ3RoIiwiRXJyb3IiLCJSYW5nZUVycm9yIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/validate.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/validate.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDL0IsU0FBU0MsU0FBU0MsSUFBSTtJQUNsQixPQUFPLE9BQU9BLFNBQVMsWUFBWUYsaURBQUtBLENBQUNHLElBQUksQ0FBQ0Q7QUFDbEQ7QUFDQSxpRUFBZUQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS92YWxpZGF0ZS5qcz84MjhhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTtcbiJdLCJuYW1lcyI6WyJSRUdFWCIsInZhbGlkYXRlIiwidXVpZCIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/uuid/dist/esm/validate.js\n");

/***/ })

};
;